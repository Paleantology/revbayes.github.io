- name: 'VectorMonitors'
  return_type: 'Monitor[]'
  usage: 'VectorMonitors()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'VectorMoves'
  return_type: 'Move[]'
  usage: 'VectorMoves()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: '[]'
  return_type: 'Integer'
  usage: '[](Integer[]<any> v, Natural<any> index)'
  arguments:
    - label: 'v'
      description: 'The vector.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer[]'
      default:
      options:
    - label: 'index'
      description: 'The index.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'abs'
  return_type: 'RealPos'
  usage: 'abs(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'A (possibly negative) number.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title: 'Absolute value of a number'
  aliases:
  description: 'The ''abs'' function returns the absolute value of a number.'
  details:
  example: |
    # compute the absolute value of a real number
    number <- -3.0
    absoluteValueOfTheNumber <- abs(number)
    if (number + absoluteValueOfTheNumber != 0.0) {
        print("Problem when computing an absolute value.")
    } else {
        print("Correct computation of an absolute value.")
    }
  authors:
  see_also:
    - 'ceil'
    - 'floor'
    - 'round'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'ancestralStateTree'
  return_type: 'Tree'
  usage: 'ancestralStateTree(Tree<any> tree, AncestralStateTrace[]<any> ancestral_state_trace_vector, TraceTree<any> tree_trace, Bool<any> include_start_states, String<any> file, Probability|Integer<any> burnin, String<any> summary_statistic {valid options: "MAP"|"mean"}, String<any> reconstruction {valid options: "conditional"|"joint"|"marginal"}, Integer<any> site, Bool<any> verbose, Natural<any> nStates)'
  arguments:
    - label: 'tree'
      description: 'The input tree to summarize ancestral states over.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Tree'
      default:
      options:
    - label: 'ancestral_state_trace_vector'
      description: 'A vector of ancestral state traces.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AncestralStateTrace[]'
      default:
      options:
    - label: 'tree_trace'
      description: 'A trace of tree samples.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'TraceTree'
      default: 'NULL'
      options:
    - label: 'include_start_states'
      description: 'Annotate start states as well as end states for each branch. Only applicable for cladogenetic processes.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'file'
      description: 'The name of the file to store the annotated tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.25'
      options:
    - label: 'summary_statistic'
      description: 'The statistic used to summarize ancestral states. ''MAP'' displays the 3 states with highest posterior probabilities. ''mean'' displays the mean value and 95% CI.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'MAP'
      options:
        - 'MAP'
        - 'mean'
    - label: 'reconstruction'
      description: '''joint'' and ''conditional'' should only be used to summarize ancestral states sampled from the joint distribution. ''marginal'' can be used for states sampled from the joint or marginal distribution.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'marginal'
      options:
        - 'conditional'
        - 'joint'
        - 'marginal'
    - label: 'site'
      description: 'The character site to be summarized.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default: '1'
      options:
    - label: 'verbose'
      description: 'Printing verbose output'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'nStates'
      description: 'The number of states for which we compute the posterior probability. By default it will be the best three.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '3'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'annotateTree'
  return_type: 'Tree'
  usage: 'annotateTree(Tree<any> tree, TraceTree|TraceTree[]<any> trace, String<any> file, Bool<any> ages, Bool<any> ccAges, Bool<any> ccp, Bool<any> conditionalAges, Probability<any> hpd, Bool<any> mean, Bool<any> sampledAncestors)'
  arguments:
    - label: 'tree'
      description: 'The input tree which will be annotated.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Tree'
      default:
      options:
    - label: 'trace'
      description: 'The sample trace.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree'
      default:
      options:
    - label: 'file'
      description: 'The name of the file where to store the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'ages'
      description: 'Annotate node ages?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'ccAges'
      description: 'Annotate conditional clade ages?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'ccp'
      description: 'Annotate conditional clade probabilities?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'conditionalAges'
      description: 'Annotate node ages conditional on the input topology?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'hpd'
      description: 'The probability mass of the highest posterior density node age interval.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.95'
      options:
    - label: 'mean'
      description: 'Annotate node ages using the mean age instead of the median?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'sampledAncestors'
      description: 'Annotate sampled ancestor probs?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'append'
  return_type: 'Integer[]'
  usage: 'append(Integer[]<any> v, Integer<any> x)'
  arguments:
    - label: 'v'
      description: 'The vector that we append.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'Integer[]'
      default:
      options:
    - label: 'x'
      description: 'The value that we append.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'Integer'
      default:
      options:
  title: 'Append a value'
  aliases:
  description: '''append'' adds an element to a vector.'
  details: '''append'' creates a new vector that is the original vector plus the extra element.'
  example: |
    a <- 1:3
    b <- 4
    c := append(a,b)
  authors:
  see_also: 'rep'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'branchScoreDistance'
  return_type: 'RealPos'
  usage: 'branchScoreDistance(Tree<any> tree1, Tree<any> tree2)'
  arguments:
    - label: 'tree1'
      description: 'The first tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
    - label: 'tree2'
      description: 'The second tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'ceil'
  return_type: 'Integer'
  usage: 'ceil(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title: 'Ceiling value of a number'
  aliases:
  description: 'The ''ceil'' function maps the value of a number to the smallest following integer.'
  details:
  example: |
    # compute the ceiling of a real number
    number <- 3.4
    ceiled_number <- ceil(number)
    if (ceiled_number != 4.0) {
        print("Problem when computing a ceiled value.")
    } else {
        print("Correct computation of a ceiled value.")
    }
  authors:
  see_also:
    - 'abs'
    - 'floor'
    - 'round'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'characterMapTree'
  return_type: 'Tree'
  usage: 'characterMapTree(Tree<any> tree, AncestralStateTrace[]<any> ancestral_state_trace_vector, TraceTree<any> tree_trace, String<any> character_file, String<any> posterior_file, String<any> shift_prob_file, Probability|Integer<any> burnin, String<any> reconstruction {valid options: "conditional"|"joint"|"marginal"}, Integer<any> num_time_slices, Bool<any> verbose)'
  arguments:
    - label: 'tree'
      description: 'The input tree to summarize the character history over.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Tree'
      default:
      options:
    - label: 'ancestral_state_trace_vector'
      description: 'A vector of ancestral state traces.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AncestralStateTrace[]'
      default:
      options:
    - label: 'tree_trace'
      description: 'A trace of tree samples.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'TraceTree'
      default: 'NULL'
      options:
    - label: 'character_file'
      description: 'The name of the file to store the tree annotated with the MAP character history.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'posterior_file'
      description: 'The name of the file to store the tree annotated with the posterior probabilities for the MAP character history.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'shift_prob_file'
      description: 'The name of the file to store the tree annotated with the shift probabilities of the character.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'NULL'
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.25'
      options:
    - label: 'reconstruction'
      description: '''joint'' and ''conditional'' should only be used to summarize character maps sampled from the joint distribution. ''marginal'' can be used for character maps sampled from the joint or marginal distribution.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'marginal'
      options:
        - 'conditional'
        - 'joint'
        - 'marginal'
    - label: 'num_time_slices'
      description: 'The number of time slices to discretize the character history. Should be the same as used for the numeric ODE.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default: '500'
      options:
    - label: 'verbose'
      description: 'Printing verbose output'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'checkNodeOrderConstraints'
  return_type: 'Bool'
  usage: 'checkNodeOrderConstraints(TimeTree<any> tree, RlRelativeNodeAgeConstraints<any> constraints)'
  arguments:
    - label: 'tree'
      description: 'The tree which is used to compute the MRCA.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'constraints'
      description: 'The constraints on relative node ages that need to be tested on the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RlRelativeNodeAgeConstraints'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'choose'
  return_type: 'Natural'
  usage: 'choose(Natural<any> n, Natural<any> k)'
  arguments:
    - label: 'n'
      description: 'Number of total elements.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'k'
      description: 'Number of chosen elements.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description: 'Rev function to calculate the binomial coefficients.'
  details:
  example: |
    n <- 5
    k <- 2
    x := choose(n, k)
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'clear'
  return_type: 'void'
  usage: 'clear(RevObject ...)'
  arguments:
    - label:
      description: 'Variables to remove.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RevObject'
      default:
      options:
  title: 'Clear the current workspace'
  aliases:
  description: 'Clear (e.g., remove) variables and functions from the workspace.'
  details: 'The clear function removes either a given variable or all variables from the workspace. Clearing the workspace is very useful between analysis if you do not want to have old connections between variables hanging around.'
  example: |
    ls()   # check what is in the workspace
    a <- 1
    b := exp(a)
    ls()   # check what is in the workspace
    clear()
    ls()   # check what is in the workspace
    a <- 1
    b := exp(a)
    ls()   # check what is in the workspace
    clear( b )
    ls()   # check what is in the workspace
  authors:
  see_also: 'exists'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'combineCharacter'
  return_type: 'AbstractHomologousDiscreteCharacterData'
  usage: 'combineCharacter(AbstractHomologousDiscreteCharacterData<any> a, AbstractHomologousDiscreteCharacterData<any> b)'
  arguments:
    - label: 'a'
      description: 'First character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'b'
      description: 'Second character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
  title: 'Concatenate character matrices'
  aliases:
  description: 'Creates a new data matrix by concatentating the provided data matrices (by order).'
  details:
  example: |
    # read in character data for locus_1
    locus_1 = readContinuousCharacterData("locus_1.nex")
    # read in character data for locus_2
    locus_2 = readContinuousCharacterData("locus_2.nex")
    # create concated locus for 1+2 (union of taxa)
    locus_1_and_2 = concatenate( locus_1, locus_2 )
  authors:
  see_also:
  type_spec:
    - 'Procedure'
    - 'Function'
    - 'RevObject'
  references:
- name: 'computeWeightedNodeOrderConstraintsScore'
  return_type: 'Real'
  usage: 'computeWeightedNodeOrderConstraintsScore(TimeTree<any> tree, RlRelativeNodeAgeWeightedConstraints<any> constraints, RealPos<any> beta)'
  arguments:
    - label: 'tree'
      description: 'The tree which is used to compute the MRCA.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'constraints'
      description: 'The constraints on relative node ages that are needed to compute the score of the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RlRelativeNodeAgeWeightedConstraints'
      default:
      options:
    - label: 'beta'
      description: 'The beta weight for the constraints.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'concatenate'
  return_type: 'AbstractHomologousDiscreteCharacterData'
  usage: 'concatenate(AbstractHomologousDiscreteCharacterData<any> a, AbstractHomologousDiscreteCharacterData<any> b, AbstractHomologousDiscreteCharacterData ..., String<any> merge {valid options: "union"|"intersection"})'
  arguments:
    - label: 'a'
      description: 'First character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'b'
      description: 'Second character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label:
      description: 'Additional character data objects.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'merge'
      description: 'How to merge differing taxa'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'Taxa must match'
      options:
        - 'union'
        - 'intersection'
  title: 'Concatenate character matrices'
  aliases:
  description: 'Creates a new data matrix by concatentating the provided data matrices (by order).'
  details:
  example: |
    # read in character data for locus_1
    locus_1 = readDiscreteCharacterData("locus_1.nex")
    # read in character data for locus_2
    locus_2 = readDiscreteCharacterData("locus_2.nex")
    # create concated locus for 1+2 (union of taxa)
    locus_1_and_2 = concatenate( locus_1, locus_2 )
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'consensusTree'
  return_type: 'Tree'
  usage: 'consensusTree(TraceTree|TraceTree[]<any> trace, Probability<any> cutoff, String<any> file, Probability<any> hpd, Bool<any> mean, Bool<any> sampledAncestors, Bool<any> positiveBranchLengths)'
  arguments:
    - label: 'trace'
      description: 'The samples of trees from the posterior.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree'
      default:
      options:
    - label: 'cutoff'
      description: 'The minimum threshold for clade probabilities.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.5'
      options:
    - label: 'file'
      description: 'The name of the file for storing the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'hpd'
      description: 'The probability mass of the highest posterior density node age interval.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.95'
      options:
    - label: 'mean'
      description: 'Annotate node ages using the mean age instead of the median?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'sampledAncestors'
      description: 'Annotate sampled ancestor probs?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'positiveBranchLengths'
      description: 'Force negative branch lengths to be short but positive?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
    - 'conTree'
    - 'sumt'
  description: 'Calculates the majority-rule consensus topology from a trace of trees and summarizes branch lengths.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Generate the majority-rule consensus tree
    map_tree = consensusTree(trace=tree_trace, cutoff=0.5, file="consensus.tree")
  authors:
  see_also:
    - 'mapTree'
    - 'mccTree'
    - 'treeTrace'
    - 'readTreeTrace'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'convertToPhylowood'
  return_type: 'Tree'
  usage: 'convertToPhylowood(String<any> statefile, String<any> treefile, String<any> geofile, String<any> outfile, Probability<any> burnin, String<any> chartype {valid options: "NaturalNumbers"|"Standard"}, String<any> bgtype {valid options: "Range"|"Area"})'
  arguments:
    - label: 'statefile'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'treefile'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'geofile'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'outfile'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'burnin'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.25'
      options:
    - label: 'chartype'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'NaturalNumbers'
      options:
        - 'NaturalNumbers'
        - 'Standard'
    - label: 'bgtype'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'Area'
      options:
        - 'Range'
        - 'Area'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'diagonalMatrix'
  return_type: 'MatrixRealSymmetric'
  usage: 'diagonalMatrix(Natural<any> n)'
  arguments:
    - label: 'n'
      description: 'The number of rows/columns (dimension).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description: 'Building a identity/diagonal matrix with ''n'' columns and rows.'
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'exists'
  return_type: 'Bool'
  usage: 'exists(String<any> name)'
  arguments:
    - label: 'name'
      description: 'The name of the variable we wish to check for existence.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title: 'Check whether a variable exists'
  aliases:
  description: 'Determines whether the RevBayes workspace contains a variable named ''name'''
  details: '''exists'' returns ''true'' if the workspace contains a variable whose name matches the String ''name'' and ''false'' otherwise. One use of ''exists'' is to add Move and Monitor objects conditional on the variable ''x'' existing. The function ''ls'' provides a summary for all variable names that ''exists'' would evaluate as ''true''.'
  example: |
    ## Correct usage: does "x" exist?
    x <- 1.0
    exists("x")
    
    ## Incorrect usage: does "1.0" exist?
    exists(x)
  authors:
  see_also: 'clear'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'exp'
  return_type: 'RealPos'
  usage: 'exp(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'A number.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'floor'
  return_type: 'Integer'
  usage: 'floor(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnAdjacentRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnAdjacentRateModifier(Real<any> gainFactor, Real<any> lossFactor, Natural<any> width, RealPos[][]|Real[][]|MatrixRealSymmetric|MatrixReal<any> matrix, Natural<any> numStates, Natural<any> numChars)'
  arguments:
    - label: 'gainFactor'
      description: 'Multiplicative factor (r'' = r * e^{ n_1 * f }) for characters in context set'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'lossFactor'
      description: 'Multiplicative factor (r'' = r * e^{ n_0 * f }) for characters in context set'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'width'
      description: 'Width of context-dependence window'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default: '1'
      options:
    - label: 'matrix'
      description: 'Weighted character adjacency matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default: 'NULL'
      options:
    - label: 'numStates'
      description: 'Number of states'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'numChars'
      description: 'Number of characters'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnAverageDistanceMatrix'
  return_type: 'AverageDistanceMatrix'
  usage: 'fnAverageDistanceMatrix(DistanceMatrix[]<any> distanceMatrices)'
  arguments:
    - label: 'distanceMatrices'
      description: 'The vector of distance matrices.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'DistanceMatrix[]'
      default:
      options:
  title:
  aliases: 'avgDistanceMatrix'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<AverageDistanceMatrix>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnBetaBrokenStick'
  return_type: 'Simplex'
  usage: 'fnBetaBrokenStick(RealPos<any> alpha, RealPos<any> beta, Natural<any> numCats)'
  arguments:
    - label: 'alpha'
      description: 'The alpha parameter of the beta distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'beta'
      description: 'The beta parameter of the beta distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnBinaryMutationCoalescentRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnBinaryMutationCoalescentRateMatrix(Natural<any> n, RealPos<any> mu, RealPos<any> Ne)'
  arguments:
    - label: 'n'
      description: 'The number of samples.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'mu'
      description: 'The mutation rate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'Ne'
      description: 'The effective population size.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnBiogeoDE'
  return_type: 'RateGeneratorSequence'
  usage: 'fnBiogeoDE(RateGenerator<any> gainLossRates, CharacterHistoryRateModifier<any> geoRateMod, Simplex<any> root_frequencies, Natural<any> numAreas, Bool<any> forbidExtinction)'
  arguments:
    - label: 'gainLossRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      default:
      options:
    - label: 'geoRateMod'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'CharacterHistoryRateModifier'
      default: 'NULL'
      options:
    - label: 'root_frequencies'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default: '[ 0.500, 0.500 ]'
      options:
    - label: 'numAreas'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'forbidExtinction'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnBiogeographyCladoEventsBD'
  return_type: 'CladogeneticSpeciationRateMatrix'
  usage: 'fnBiogeographyCladoEventsBD(RealPos[]<any> speciation_rates, RealPos[]<any> rate_multipliers, RealPos[][]<constant> connectivity_matrix, RealPos[]<any> connectivity_weights, Natural<any> max_range_size)'
  arguments:
    - label: 'speciation_rates'
      description: 'The speciation rates for different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'rate_multipliers'
      description: 'The rate multipliers for hidden rate classes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default: 'NULL'
      options:
    - label: 'connectivity_matrix'
      description: 'The connectivity matrix.'
      dag_type: '<constant>'
      pass_by: 'value'
      value_type: 'RealPos[][]'
      default: 'NULL'
      options:
    - label: 'connectivity_weights'
      description: 'The speciation rates for different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default: 'NULL'
      options:
    - label: 'max_range_size'
      description: 'The maximum range size.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnBlosum62'
  return_type: 'RateGenerator'
  usage: 'fnBlosum62()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnChromosomes'
  return_type: 'RateMatrix'
  usage: 'fnChromosomes(Natural<any> maxChromosomes, RealPos<any> gamma, RealPos<any> delta, RealPos<any> rho, RealPos<any> eta, Real<any> gamma_l, Real<any> delta_l)'
  arguments:
    - label: 'maxChromosomes'
      description: 'Maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'gamma'
      description: 'Rate of gain of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'delta'
      description: 'Rate of loss of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'rho'
      description: 'Rate of polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'eta'
      description: 'Rate of demi-polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'gamma_l'
      description: 'Rate modifier for chromosome gains.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'delta_l'
      description: 'Rate modifier for chromosome losses.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnChromosomesCladoEventsBD'
  return_type: 'CladogeneticSpeciationRateMatrix'
  usage: 'fnChromosomesCladoEventsBD(RealPos[]<any> speciation_rates, RealPos[]<any> rate_multipliers, Natural<any> max_chromosomes)'
  arguments:
    - label: 'speciation_rates'
      description: 'The speciation rates for different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'rate_multipliers'
      description: 'The rate multipliers for hidden rate classes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default: 'NULL'
      options:
    - label: 'max_chromosomes'
      description: 'The maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnChromosomesCladoProbs'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnChromosomesCladoProbs(Simplex<any> eventProbs, Natural<any> maxChromosomes)'
  arguments:
    - label: 'eventProbs'
      description: 'The probabilities of the different event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
    - label: 'maxChromosomes'
      description: 'The maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnChromosomesPloidy'
  return_type: 'RateMatrix'
  usage: 'fnChromosomesPloidy(Natural<any> maxChromosomes, RealPos<any> gamma_d, RealPos<any> delta_d, RealPos<any> rho_d, RealPos<any> eta_d, Real<any> gamma_dl, Real<any> delta_dl, RealPos<any> gamma_p, RealPos<any> delta_p, RealPos<any> rho_p, RealPos<any> eta_p, Real<any> gamma_pl, Real<any> delta_pl, Real<any> beta)'
  arguments:
    - label: 'maxChromosomes'
      description: 'Maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'gamma_d'
      description: 'Diploid rate of gain of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'delta_d'
      description: 'Diploid rate of loss of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'rho_d'
      description: 'Diploid rate of polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'eta_d'
      description: 'Disploid rate of demi-polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'gamma_dl'
      description: 'Diploid rate modifier for chromosome gains.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'delta_dl'
      description: 'Diploid rate modifier for chromosome losses.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'gamma_p'
      description: 'Polyploid rate of gain of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'delta_p'
      description: 'Polyploid rate of loss of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'rho_p'
      description: 'Polyploid rate of polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'eta_p'
      description: 'Polyploid rate of demi-polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
    - label: 'gamma_pl'
      description: 'Polyploid rate modifier for chromosome gains.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'delta_pl'
      description: 'Polyploid rate modifier for chromosome losses.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'beta'
      description: 'Rate of rediploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnChromosomesPloidyCladoEventsBD'
  return_type: 'CladogeneticSpeciationRateMatrix'
  usage: 'fnChromosomesPloidyCladoEventsBD(RealPos[]<any> speciation_rates, Natural<any> max_chromosomes)'
  arguments:
    - label: 'speciation_rates'
      description: 'The speciation rates for different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'max_chromosomes'
      description: 'The maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnChronoToPhylo'
  return_type: 'BranchLengthTree'
  usage: 'fnChronoToPhylo(TimeTree<any> tree, RealPos[]<any> rates)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'rates'
      description: 'The branch rates we use to multiply/rescale the branches with.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnCladeSpecificHierarchicalBranchRate'
  return_type: 'RealPos[]'
  usage: 'fnCladeSpecificHierarchicalBranchRate(TimeTree<any> tree, Clade[]<any> clades, RealPos[]<any> baseRates, RealPos[]<any> cladeRates)'
  arguments:
    - label: 'tree'
      description: 'The tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'clades'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Clade[]'
      default:
      options:
    - label: 'baseRates'
      description: 'The branch rates without clade multipliers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'cladeRates'
      description: 'The rate multipliers for the clades.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnCladogeneticProbabilityMatrix'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnCladogeneticProbabilityMatrix(Integer[][]<any> cladogenetic_events, RealPos[]<any> probabilities, Natural<any> num_states)'
  arguments:
    - label: 'cladogenetic_events'
      description: 'A vector of cladogenetic event types. Each type is in the form [ancestral_state, daughter1_state, daughter2_state].'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer[][]'
      default:
      options:
    - label: 'probabilities'
      description: 'The probabilities that correspond to the different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'num_states'
      description: 'The number of states.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnCladogeneticSpeciationRateMatrix'
  return_type: 'CladogeneticSpeciationRateMatrix'
  usage: 'fnCladogeneticSpeciationRateMatrix(Natural[][]<any> cladogenetic_events, RealPos[]<any> speciation_rates, Natural<any> num_states)'
  arguments:
    - label: 'cladogenetic_events'
      description: 'A vector of cladogenetic event types. Each type is in the form [ancestral_state, daughter1_state, daughter2_state].'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural[][]'
      default:
      options:
    - label: 'speciation_rates'
      description: 'The speciation rates that correspond to the different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'num_states'
      description: 'The number of states.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnCoala'
  return_type: 'Real[]'
  usage: 'fnCoala(Real[]<any> coordinates, MatrixReal<any> corAnalysis, RealPos[]<any> weights)'
  arguments:
    - label: 'coordinates'
      description: 'A vector of coordinates.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'corAnalysis'
      description: 'A correspondence analysis object.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'MatrixReal'
      default:
      options:
    - label: 'weights'
      description: 'A vector of weight for the coordinates.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
    - citation: 'A branch-heterogeneous model of protein evolution for efficient inference of ancestral sequences. Groussin M, Boussau B, Gouy M. Syst Biol. 2013 Jul;62(4):523-38.'
      doi: '10.1093/sysbio/syt016'
      url: 'https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3676677/'
- name: 'fnCodon'
  return_type: 'RateMatrix'
  usage: 'fnCodon(RealPos<any> omega, Simplex<any> codonFrequencies)'
  arguments:
    - label: 'omega'
      description: 'The dN / dS rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'codonFrequencies'
      description: 'The stationary frequencies.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnCodonHKY'
  return_type: 'RateMatrix'
  usage: 'fnCodonHKY(RealPos<any> omega, RealPos<any> kappa, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'omega'
      description: 'The dN / dS rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'kappa'
      description: 'The transition-transversion rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnCovarion'
  return_type: 'RateMatrix'
  usage: 'fnCovarion(RateGenerator[]<any> RateMatrices, RealPos[]<any> RateScalars, RealPos[][]<any> SwitchRates, Bool<any> rescaled)'
  arguments:
    - label: 'RateMatrices'
      description: 'Rate matrices for the characters per state.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator[]'
      default:
      options:
    - label: 'RateScalars'
      description: 'Rate multipliers per state.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'SwitchRates'
      description: 'Rates between state.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnCovarionRateMatrix'
  return_type: 'RateGenerator'
  usage: 'fnCovarionRateMatrix(RateGenerator[]<any> Q, RateMatrix<any> switch_rates, RealPos[]<any> clock_rates, Bool<any> rescaled)'
  arguments:
    - label: 'Q'
      description: 'The rate matrix classes'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator[]'
      default:
      options:
    - label: 'switch_rates'
      description: 'The class-switching rate matrix'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateMatrix'
      default:
      options:
    - label: 'clock_rates'
      description: 'The rate multipliers per class'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnCpRev'
  return_type: 'RateGenerator'
  usage: 'fnCpRev()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDECCladoProbs'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnDECCladoProbs(Simplex<any> eventProbs, Natural<any> numCharacters, Natural<any> maxRangeSize, String<any> probType {valid options: "pattern"|"class"}, Bool<any> widespreadAllopatry, String[]<any> eventTypes, RealPos[][]<constant> connectivityGraph, RealPos[][]<constant> vicarianceGraph)'
  arguments:
    - label: 'eventProbs'
      description: 'The probabilities of the different event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
    - label: 'numCharacters'
      description: 'The number of characters.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
    - label: 'maxRangeSize'
      description: 'The maximum range size.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '0'
      options:
    - label: 'probType'
      description: 'Assign event weights over classes of patterns or over specific patterns'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'pattern'
      options:
        - 'pattern'
        - 'class'
    - label: 'widespreadAllopatry'
      description: 'Allopatry may result in both daughter ranges being larger than size 1.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'eventTypes'
      description: 'Vector of cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String[]'
      default:
      options:
    - label: 'connectivityGraph'
      description: 'Connectivity graph of allowed ranges.'
      dag_type: '<constant>'
      pass_by: 'value'
      value_type: 'RealPos[][]'
      default: '[ ]'
      options:
    - label: 'vicarianceGraph'
      description: 'Graph to model vicariance events.'
      dag_type: '<constant>'
      pass_by: 'value'
      value_type: 'RealPos[][]'
      default: '[ ]'
      options:
  title:
  aliases: 'fnCladoProbs'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDECRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnDECRateMatrix(RealPos[][]<any> dispersalRates, RealPos[][]<any> extirpationRates, Simplex<any> rangeSize, String<any> nullRange {valid options: "CondSurv"|"Exclude"|"Include"}, Natural<any> maxRangeSize)'
  arguments:
    - label: 'dispersalRates'
      description: 'Matrix of dispersal rates between areas.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'extirpationRates'
      description: 'Matrix of extirpation rates.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'rangeSize'
      description: 'Relative proportions of range sizes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default: '[ ]'
      options:
    - label: 'nullRange'
      description: 'How should DEC handle the null range?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'CondSurv'
      options:
        - 'CondSurv'
        - 'Exclude'
        - 'Include'
    - label: 'maxRangeSize'
      description: 'Maximum range size.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '0'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDECRates'
  return_type: 'RealPos[]'
  usage: 'fnDECRates(RealPos[][]<any> dispersalRates, RealPos[]<any> extinctionRates, Natural<any> maxRangeSize)'
  arguments:
    - label: 'dispersalRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'extinctionRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'maxRangeSize'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '2147483647'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDECRoot'
  return_type: 'Simplex'
  usage: 'fnDECRoot(RealPos[]<any> rootFreqs, Simplex<any> rangeSize)'
  arguments:
    - label: 'rootFreqs'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'rangeSize'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Simplex'
      default: 'NULL'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDayhoff'
  return_type: 'RateGenerator'
  usage: 'fnDayhoff()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDecompVarCovar'
  return_type: 'MatrixRealSymmetric'
  usage: 'fnDecompVarCovar(RealPos[]<any> standardDeviations, MatrixReal<any> correlationCoefficients)'
  arguments:
    - label: 'standardDeviations'
      description: 'A vector of standard deviations.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'correlationCoefficients'
      description: 'A matrix of correlation coefficients.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'MatrixReal'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDiscretizeBeta'
  return_type: 'Probability[]'
  usage: 'fnDiscretizeBeta(RealPos<any> alpha, RealPos<any> beta, Natural<any> numCats, Bool<any> median)'
  arguments:
    - label: 'alpha'
      description: 'The alpha parameter of the beta distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'beta'
      description: 'The beta parameter of the beta distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
    - label: 'median'
      description: 'Should we use the median or mean?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDiscretizeBetaQuadrature'
  return_type: 'MatrixRealPos'
  usage: 'fnDiscretizeBetaQuadrature(RealPos<any> alpha, RealPos<any> beta, Integer<any> numCats)'
  arguments:
    - label: 'alpha'
      description: 'The alpha parameter of the beta distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'beta'
      description: 'The beta parameter of the beta distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDiscretizeDistribution'
  return_type: 'Real[]'
  usage: 'fnDiscretizeDistribution(ContinuousDistribution<any> G0, Integer<any> num_cats)'
  arguments:
    - label: 'G0'
      description: 'The distribution to discretize.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'ContinuousDistribution'
      default:
      options:
    - label: 'num_cats'
      description: 'The number of categories into which this distribution is categorize.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDiscretizeGamma'
  return_type: 'RealPos[]'
  usage: 'fnDiscretizeGamma(RealPos<any> shape, RealPos<any> rate, Integer<any> numCats, Bool<any> median)'
  arguments:
    - label: 'shape'
      description: 'The shape parameter of the gamma distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'rate'
      description: 'The rate parameter (rate = 1/scale) of the gamma distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
    - label: 'median'
      description: 'Should we use the median or mean?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDiscretizeGammaFromBetaQuantiles'
  return_type: 'RealPos[]'
  usage: 'fnDiscretizeGammaFromBetaQuantiles(RealPos<any> alpha, RealPos<any> beta, RealPos<any> shape, RealPos<any> rate, Integer<any> numCats, Bool<any> median)'
  arguments:
    - label: 'alpha'
      description: 'The alpha parameter of the beta distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'beta'
      description: 'The beta parameter of the beta distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'shape'
      description: 'The shape parameter of the gamma distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'rate'
      description: 'The rate parameter (rate = 1/scale) of the gamma distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
    - label: 'median'
      description: 'Should we use the median or mean?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDiscretizeGammaQuadrature'
  return_type: 'MatrixRealPos'
  usage: 'fnDiscretizeGammaQuadrature(RealPos<any> shape, RealPos<any> rate, Integer<any> numCats)'
  arguments:
    - label: 'shape'
      description: 'The shape parameter of the Gamma distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'rate'
      description: 'The rate parameter (rate = 1/scale) of the Gamma distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDiscretizeLognormalQuadrature'
  return_type: 'MatrixRealPos'
  usage: 'fnDiscretizeLognormalQuadrature(Real<any> mean, RealPos<any> sd, Integer<any> numCats)'
  arguments:
    - label: 'mean'
      description: 'The mean (in log-space) of the Lognormal distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
    - label: 'sd'
      description: 'The standard deviation (in log-space) of the Lognormal distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDistanceRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnDistanceRateModifier(RealPos[][]<any> distances, Real<any> distancePower, Bool<any> useDistances, Bool<any> useAvailable)'
  arguments:
    - label: 'distances'
      description: 'Matrix of distances'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'distancePower'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '1e-05'
      options:
    - label: 'useDistances'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'useAvailable'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDppConcFromMean'
  return_type: 'RealPos'
  usage: 'fnDppConcFromMean(RealPos<any> numCats, Natural<any> numElements)'
  arguments:
    - label: 'numCats'
      description: 'Number of Categories of the DPP.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numElements'
      description: 'Total number of elements.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnDppMeanFromConc'
  return_type: 'RealPos'
  usage: 'fnDppMeanFromConc(RealPos<any> concentration, RealPos<any> numElements)'
  arguments:
    - label: 'concentration'
      description: 'The concentration parameter of the DPP.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos'
      default:
      options:
    - label: 'numElements'
      description: 'The number of elements of the DPP.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnEarlyBurst'
  return_type: 'RealPos[]'
  usage: 'fnEarlyBurst(TimeTree<any> tree, RealPos<any> sigma, RealPos<any> lambda)'
  arguments:
    - label: 'tree'
      description: 'The tree which will be re-scaled.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'sigma'
      description: 'The rate of drift.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'lambda'
      description: 'The rate of change through time.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnEpoch'
  return_type: 'RateGenerator'
  usage: 'fnEpoch(RateGenerator[]<any> Q, RealPos[]<any> times, RealPos[]<any> rates)'
  arguments:
    - label: 'Q'
      description: 'The per epoch rate matrices'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator[]'
      default:
      options:
    - label: 'times'
      description: 'The times of the epochs.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'rates'
      description: 'The rate multipliers per epoch.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnEpochCladoProbs'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnEpochCladoProbs(CladogeneticProbabilityMatrix[]<any> cladogeneticProbabilities, RealPos[]<any> times)'
  arguments:
    - label: 'cladogeneticProbabilities'
      description: 'The cladogenetic event probability functions.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'CladogeneticProbabilityMatrix[]'
      default:
      options:
    - label: 'times'
      description: 'The vector of epoch end ages.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnExtantTree'
  return_type: 'TimeTree'
  usage: 'fnExtantTree(TimeTree<any> tree)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnF81'
  return_type: 'RateMatrix'
  usage: 'fnF81(Simplex<any> baseFrequencies)'
  arguments:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnFreeBinary'
  return_type: 'RateMatrix'
  usage: 'fnFreeBinary(Real[]<any> transition_rates, Bool<any> rescaled)'
  arguments:
    - label: 'transition_rates'
      description: 'The transition rates between the two states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnFreeK'
  return_type: 'RateMatrix'
  usage: 'fnFreeK(RealPos[][]|RealPos[]<any> transition_rates, Bool<any> rescaled, String<any> matrixExponentialMethod {valid options: "scalingAndSquaring"|"scalingAndSquaringPade"|"scalingAndSquaringTaylor"|"uniformization"|"eigen"})'
  arguments:
    - label: 'transition_rates'
      description: 'Transition rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'matrixExponentialMethod'
      description: 'The method used to compute the matrix exponential.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'eigen'
      options:
        - 'scalingAndSquaring'
        - 'scalingAndSquaringPade'
        - 'scalingAndSquaringTaylor'
        - 'uniformization'
        - 'eigen'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnFreeSymmetricRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnFreeSymmetricRateMatrix(RealPos[]<any> transition_rates, Bool<any> rescaled, String<any> matrixExponentialMethod {valid options: "scalingAndSquaring"|"scalingAndSquaringPade"|"scalingAndSquaringTaylor"|"uniformization"|"eigen"})'
  arguments:
    - label: 'transition_rates'
      description: 'The transition rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'matrixExponentialMethod'
      description: 'The method used to compute the matrix exponential.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'scalingAndSquaring'
      options:
        - 'scalingAndSquaring'
        - 'scalingAndSquaringPade'
        - 'scalingAndSquaringTaylor'
        - 'uniformization'
        - 'eigen'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnGTR'
  return_type: 'RateMatrix'
  usage: 'fnGTR(Simplex<any> exchangeRates, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'exchangeRates'
      description: 'The exchangeability rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
  title: 'The General Time-Reversible rate matrix'
  aliases:
  description: 'The GTR rate matrix.'
  details: |
    The general time-reversible rate matrix:
      Q(i,j) = exchangeRates(i,j) * baseFrequencies[j]
    The exchangeRates are symmetric.
  example: |
    er ~ dnDirichlet( v(1,1,1,1,1,1) )
    pi ~ dnDirichlet( v(1,1,1,1) )
    Q := fnGTR(er,pi)
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
    - citation: 'Tavare, S. Some Probabilistic and Statistical Problems in the Analysis of DNA Sequences.  Lectures on Mathematics in the Life Sciences (1986). 17: 57-86'
      doi:
      url: 'http://www.damtp.cam.ac.uk/user/st321/CV_&_Publications_files/STpapers-pdf/T86.pdf'
- name: 'fnGeographicalDistance'
  return_type: 'RealPos'
  usage: 'fnGeographicalDistance(Real<any> lat1, Real<any> lon1, Real<any> lat2, Real<any> lon2)'
  arguments:
    - label: 'lat1'
      description: 'The latitude for the first coordinate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
    - label: 'lon1'
      description: 'The longitude for the first coordinate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
    - label: 'lat2'
      description: 'The latitude for the second coordinate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
    - label: 'lon2'
      description: 'The longitude for the second coordinate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnHKY'
  return_type: 'RateMatrix'
  usage: 'fnHKY(RealPos<any> kappa, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'kappa'
      description: 'The transition-transversion rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
  title: 'The Hasegawa-Kishino-Yano (1985) nucleotide rate matrix'
  aliases:
  description: 'The HKY85 model.'
  details:
  example: |
    kappa ~ dnLognormal(0,1)
    pi ~ dnDirichlet( v(1,1,1,1) )
    Q := fnHKY(kappa,pi)
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
    - citation: 'Hasegawa, M. et al. Dating of the human-ape splitting by a molecular clock of mitochondrial DNA. Journal of molecular evolution (1985) 22 (2): 160-174.'
      doi: 'https://doi.org/10.1007/BF02101694'
      url: 'https://link.springer.com/article/10.1007%2FBF02101694'
- name: 'fnHiddenStateRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnHiddenStateRateMatrix(RealPos[][]|RealPos[]|RateGenerator<any> observered_transition_rates, RealPos[][]|RealPos[]|RateGenerator<any> hidden_transition_rates, Bool<any> rescaled)'
  arguments:
    - label: 'observered_transition_rates'
      description: 'Transition rates between observed states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'hidden_transition_rates'
      description: 'Transition rates between hidden states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnHostSwitchRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnHostSwitchRateModifier(Tree<any> tree, RealPos[]<any> gainScale)'
  arguments:
    - label: 'tree'
      description: 'Host phylogeny that influences host switch rates.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
    - label: 'gainScale'
      description: 'Scales phylogenetic distance depending on gain type.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnInfiniteSites'
  return_type: 'RateMatrix'
  usage: 'fnInfiniteSites(Natural<any> num_states)'
  arguments:
    - label: 'num_states'
      description: 'The number of states.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '2'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnJC'
  return_type: 'RateMatrix'
  usage: 'fnJC(Natural<any> num_states)'
  arguments:
    - label: 'num_states'
      description: 'The number of state or state space.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnJones'
  return_type: 'RateGenerator'
  usage: 'fnJones()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnK80'
  return_type: 'RateMatrix'
  usage: 'fnK80(RealPos<any> kappa)'
  arguments:
    - label: 'kappa'
      description: 'The transition/transversion rate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
  title:
  aliases: 'fnKimura80'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnK81'
  return_type: 'RateMatrix'
  usage: 'fnK81(RealPos<any> kappa1, RealPos<any> kappa2, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'kappa1'
      description: 'The transversion rate from purine to pyrimidine.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'kappa2'
      description: 'The transversion rate from pyrimidine to purine.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default: '[ 0.250, 0.250, 0.250, 0.250 ]'
      options:
  title:
  aliases: 'fnKimura81'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnLG'
  return_type: 'RateGenerator'
  usage: 'fnLG()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnLnProbability'
  return_type: 'Real'
  usage: 'fnLnProbability(Real<stochastic> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<stochastic>'
      pass_by: 'reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnMixtureCladoProbs'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnMixtureCladoProbs(CladogeneticProbabilityMatrix[]<any> cladogeneticProbabilities, Simplex<any> mixtureWeights)'
  arguments:
    - label: 'cladogeneticProbabilities'
      description: 'The cladogenetic event probability functions.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'CladogeneticProbabilityMatrix[]'
      default:
      options:
    - label: 'mixtureWeights'
      description: 'The mixture probabilities.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnMtMam'
  return_type: 'RateGenerator'
  usage: 'fnMtMam()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnMtRev'
  return_type: 'RateGenerator'
  usage: 'fnMtRev()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnNormalizedQuantile'
  return_type: 'Real[]'
  usage: 'fnNormalizedQuantile(Distribution__Real<any> contDistribution, Integer<any> numCategories)'
  arguments:
    - label: 'contDistribution'
      description: 'The distribution which we discretize.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Distribution__Real'
      default:
      options:
    - label: 'numCategories'
      description: 'How many discrete categories?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnNumUniqueInVector'
  return_type: 'Natural'
  usage: 'fnNumUniqueInVector(Real[]<any> vector)'
  arguments:
    - label: 'vector'
      description: 'The vector of values.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnOrderedRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnOrderedRateMatrix(Natural<any> maxState, RealPos<any> lambda, RealPos<any> mu, Bool<any> allowZeroState)'
  arguments:
    - label: 'maxState'
      description: 'The maximum state for this rate matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'lambda'
      description: 'The rate of gain.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '1'
      options:
    - label: 'mu'
      description: 'The rate of loss.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '1'
      options:
    - label: 'allowZeroState'
      description: 'Can the character go into state 0.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnPD'
  return_type: 'RealPos'
  usage: 'fnPD(Tree<any> tree, Clade<any> sample, Bool<any> includeRoot, RealPos[]<any> weights)'
  arguments:
    - label: 'tree'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
    - label: 'sample'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Clade'
      default:
      options:
    - label: 'includeRoot'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'weights'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos[]'
      default: '[ ]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<RealPos>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnPartialToCorr'
  return_type: 'MatrixRealSymmetric'
  usage: 'fnPartialToCorr(MatrixReal<any> partialCorrelations)'
  arguments:
    - label: 'partialCorrelations'
      description: 'A matrix of partial correlation coefficients.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'MatrixReal'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnPattersonsD'
  return_type: 'Real'
  usage: 'fnPattersonsD(String<any> p1, String<any> p2, String<any> p3, String<any> outgroup, AbstractHomologousDiscreteCharacterData<any> data)'
  arguments:
    - label: 'p1'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'p2'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'p3'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'outgroup'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'data'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<Real>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnPhylogeneticIndependentContrasts'
  return_type: 'Real[]'
  usage: 'fnPhylogeneticIndependentContrasts(TimeTree<any> tree, ContinuousCharacterData<any> data, Natural<any> site, Bool<any> normalized)'
  arguments:
    - label: 'tree'
      description: 'The tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'ContinuousCharacterData'
      default:
      options:
    - label: 'site'
      description: 'The site for which we compute the contrasts.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'normalized'
      description: 'If we should normalize the contrasts by their standard deviations.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default:
      options:
  title:
  aliases: 'fnPIC'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnPhylogeneticIndependentContrastsMultiSample'
  return_type: 'Real[]'
  usage: 'fnPhylogeneticIndependentContrastsMultiSample(TimeTree<any> tree, ContinuousCharacterData<any> data, Natural<any> site, Taxon[]<any> taxa, Bool<any> normalized)'
  arguments:
    - label: 'tree'
      description: 'The tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'ContinuousCharacterData'
      default:
      options:
    - label: 'site'
      description: 'The site for which we compute the contrasts.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'taxa'
      description: 'The vector of taxa which have species and individual names.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Taxon[]'
      default:
      options:
    - label: 'normalized'
      description: 'If we should normalize the contrasts by their standard deviations.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default:
      options:
  title:
  aliases: 'fnPIC'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnPoMo'
  return_type: 'RateMatrix'
  usage: 'fnPoMo(RateGenerator<any> mutationRates, Real[]<any> fitness, Natural<any> virtualNe)'
  arguments:
    - label: 'mutationRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      default:
      options:
    - label: 'fitness'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'virtualNe'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnPruneTree'
  return_type: 'Tree'
  usage: 'fnPruneTree(Tree<any> tree, Taxon[]|String[]<any> prune/retain, Bool<any> pruneFossils)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
    - label: 'prune/retain'
      description: 'Taxon set to prune/retain in the tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Taxon[]'
      default:
      options:
    - label: 'pruneFossils'
      description: 'Prune all fossils from tree?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnRangeEvolutionRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnRangeEvolutionRateModifier(Real<any> gainFactor, Real<any> lossFactor, Real[][]<any> matrix, Natural<any> numChars)'
  arguments:
    - label: 'gainFactor'
      description: 'Multiplicative factor (r'' = r * e^{ n_1 * f }) for characters in context set'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'lossFactor'
      description: 'Multiplicative factor (r'' = r * e^{ n_0 * f }) for characters in context set'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default: '0'
      options:
    - label: 'matrix'
      description: 'Weighted character adjacency matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[][]'
      default: 'NULL'
      options:
    - label: 'numChars'
      description: 'Number of characters'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnRateGeneratorSequence'
  return_type: 'RateGeneratorSequence'
  usage: 'fnRateGeneratorSequence(RateGenerator<any> Q, Natural<any> numChars, CharacterHistoryRateModifier[]<any> rateModifiers)'
  arguments:
    - label: 'Q'
      description: 'The per-character rate generator.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      default:
      options:
    - label: 'numChars'
      description: 'The number of characters.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'rateModifiers'
      description: 'The sequence-wide context-dependent rate modifiers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'CharacterHistoryRateModifier[]'
      default: 'NULL'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnReversiblePoMo'
  return_type: 'RateMatrix'
  usage: 'fnReversiblePoMo(Simplex<any> baseFrequencies, Real[]<any> exchangeRates, Natural<any> virtualNe)'
  arguments:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the 4 DNA states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
    - label: 'exchangeRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'virtualNe'
      description: 'The virtual population size'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnRtRev'
  return_type: 'RateGenerator'
  usage: 'fnRtRev()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnSampledCladogenesisRootFrequencies'
  return_type: 'Simplex'
  usage: 'fnSampledCladogenesisRootFrequencies(RateGenerator<any> Q, MatrixReal<deterministic> cladogeneticProbabilities, TimeTree<stochastic> tree, RealPos<any> clock)'
  arguments:
    - label: 'Q'
      description: 'The anagenetic event rate matrix'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      default:
      options:
    - label: 'cladogeneticProbabilities'
      description: 'The cladogenetic event probabilities'
      dag_type: '<deterministic>'
      pass_by: 'const reference'
      value_type: 'MatrixReal'
      default:
      options:
    - label: 'tree'
      description: 'The time-tree variable containtain the sampled speciation events'
      dag_type: '<stochastic>'
      pass_by: 'reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'clock'
      description: 'The anagenetic clock rate'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '1'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnSegregatingSites'
  return_type: 'Natural'
  usage: 'fnSegregatingSites(AbstractHomologousDiscreteCharacterData<any> data, Bool<any> excludeAmbiguous)'
  arguments:
    - label: 'data'
      description: 'The alignment for which to compute the number of segregating sites.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'excludeAmbiguous'
      description: 'Should we exclude ambiguous or missing characters?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<Natural>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnShortestDistance'
  return_type: 'RealPos[][]'
  usage: 'fnShortestDistance(Natural[][]<any> adjacencies, RealPos[][]<any> distances)'
  arguments:
    - label: 'adjacencies'
      description: 'The adjaceny matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural[][]'
      default:
      options:
    - label: 'distances'
      description: 'The distance matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default: 'NULL'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnSiteRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnSiteRateModifier(RealPos[][]<any> rateMultipliers, Natural[][]<any> eventClasses, Natural[]<any> siteClasses)'
  arguments:
    - label: 'rateMultipliers'
      description: 'Multiplies character i by rate-multiplier r_i.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'eventClasses'
      description: 'Assigns event classes to rate matrix events.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural[][]'
      default:
      options:
    - label: 'siteClasses'
      description: 'Assigns classes to the sites.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnStateCountRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnStateCountRateModifier(Real[]<any> stateFactors, Natural<any> numChars)'
  arguments:
    - label: 'stateFactors'
      description: 'Power penalty (bonus) for n-1 states'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'numChars'
      description: 'Number of characters'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnStirling'
  return_type: 'Real'
  usage: 'fnStirling(String<any> kind {valid options: "first"|"lnFirst"|"second"}, Natural<any> n, Natural<any> k)'
  arguments:
    - label: 'kind'
      description: 'The type of the stirling number to compute.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'first'
      options:
        - 'first'
        - 'lnFirst'
        - 'second'
    - label: 'n'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
    - label: 'k'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnStitchTree'
  return_type: 'Tree'
  usage: 'fnStitchTree(Tree<any> backboneTree, TimeTree[]<any> patchClades, Taxon[][]<any> patchTaxa)'
  arguments:
    - label: 'backboneTree'
      description: 'The backbone tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
    - label: 'patchClades'
      description: 'The patch clade variables.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree[]'
      default:
      options:
    - label: 'patchTaxa'
      description: 'The taxa per patch clade to be stitched on to the backbone tree. Shares order with patchClades.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Taxon[][]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnT92'
  return_type: 'RateMatrix'
  usage: 'fnT92(RealPos<any> kappa, Probability<any> gc)'
  arguments:
    - label: 'kappa'
      description: 'The transition-tranversion rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'gc'
      description: 'The frequency of GC.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnTIM'
  return_type: 'RateMatrix'
  usage: 'fnTIM(Simplex<any> exchangeRates, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'exchangeRates'
      description: 'The exchangeability rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnTVM'
  return_type: 'RateMatrix'
  usage: 'fnTVM(Simplex<any> exchangeRates, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'exchangeRates'
      description: 'The exchangeability rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnTajimasD'
  return_type: 'Real'
  usage: 'fnTajimasD(AbstractHomologousDiscreteCharacterData<any> data, Bool<any> excludeAmbiguous)'
  arguments:
    - label: 'data'
      description: 'The character data matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'excludeAmbiguous'
      description: 'Should we exclude ambiguous or amissing characters?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<Real>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnTajimasPi'
  return_type: 'RealPos'
  usage: 'fnTajimasPi(AbstractHomologousDiscreteCharacterData<any> data, Bool<any> perSite, Bool<any> excludeAmbiguous)'
  arguments:
    - label: 'data'
      description: 'The character data matrix for which to compute the summary.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'perSite'
      description: 'Is the statistic normalized per site?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'excludeAmbiguous'
      description: 'Should we exclude ambiguous or missing characters?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<RealPos>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnTrN'
  return_type: 'RateMatrix'
  usage: 'fnTrN(RealPos<any> kappa1, RealPos<any> kappa2, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'kappa1'
      description: 'The first transition rate (A<->G).'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'kappa2'
      description: 'The second transition rate (C<->T).'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default: '[ 0.250, 0.250, 0.250, 0.250 ]'
      options:
  title: 'The Tamura-Nei (1993) nucleotide rate matrix'
  aliases: 'fnTamuraNei'
  description: 'The Tamura-Nei nucleotide rate matrix.'
  details:
  example: |
    kappaAG ~ dnLognormal(0,1)    # The purine transition rate
    kappaCT ~ dnLognormal(0,1)    # The pyrimindine transition rate
    pi ~ dnDirichlet( v(1,1,1,1) )
    Q := fnTrN(kappaAT, kappaCT, ,pi)
  authors:
  see_also: 'fnHKY'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
    - citation: 'Tamura, K. and M. Nei. Estimation of the number of nucleotide substitutions in the control region of mitochondrial DNA in humans and chimpanzees. Molecular biology and evolution (1993) 10(3):512-526.'
      doi: 'https://doi.org/10.1093/oxfordjournals.molbev.a040023'
      url: 'https://academic.oup.com/mbe/article/10/3/512/1016366'
- name: 'fnTreeAssembly'
  return_type: 'Tree'
  usage: 'fnTreeAssembly(Tree<any> topology, RealPos[]<any> brlens)'
  arguments:
    - label: 'topology'
      description: 'The tree topology variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
    - label: 'brlens'
      description: 'The vector of branch lengths.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
  title:
  aliases: 'treeAssembly'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnTreePairwiseDistances'
  return_type: 'DistanceMatrix'
  usage: 'fnTreePairwiseDistances(Tree<any> tree)'
  arguments:
    - label: 'tree'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<Tree>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnTreePairwiseNodalDistances'
  return_type: 'DistanceMatrix'
  usage: 'fnTreePairwiseNodalDistances(Tree<any> tree)'
  arguments:
    - label: 'tree'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<Tree>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnTreeScale'
  return_type: 'TimeTree'
  usage: 'fnTreeScale(RealPos<any> scale, TimeTree<any> tree, RealPos|RealPos[]<any> tipAges)'
  arguments:
    - label: 'scale'
      description: 'The multiplicator by which to scale the tree,'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'tree'
      description: 'The tree which will be re-scaled.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'tipAges'
      description: 'A vector of ages for the tips.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '0'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnUpperTriangle'
  return_type: 'RealPos[]'
  usage: 'fnUpperTriangle(MatrixReal<any> matrix)'
  arguments:
    - label: 'matrix'
      description: 'A matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'MatrixReal'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnVT'
  return_type: 'RateGenerator'
  usage: 'fnVT()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnVarCovar'
  return_type: 'MatrixRealSymmetric'
  usage: 'fnVarCovar(RealPos[]<any> standardDeviations, Real[]<any> correlationCoefficients)'
  arguments:
    - label: 'standardDeviations'
      description: 'The vector of standard deviations.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'correlationCoefficients'
      description: 'The correlation coefficients.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnWAG'
  return_type: 'RateMatrix'
  usage: 'fnWAG(Simplex<any> baseFrequencies)'
  arguments:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default: '[ 0.087, 0.044, 0.039, 0.057, 0.019, 0.037, 0.058, 0.083, 0.024, 0.048, 0.086, 0.062, 0.020, 0.038, 0.046, 0.070, 0.061, 0.014, 0.035, 0.071 ]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnWattersonsTheta'
  return_type: 'RealPos'
  usage: 'fnWattersonsTheta(AbstractHomologousDiscreteCharacterData<any> data, Bool<any> perSite, Bool<any> excludeAmbiguous)'
  arguments:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'perSite'
      description: 'Should we normalize per site?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'excludeAmbiguous'
      description: 'Should we exclude ambiguous or missing characters?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<RealPos>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'fnassembleContinuousMRF'
  return_type: 'RealPos[]'
  usage: 'fnassembleContinuousMRF(Real<any> initialValue, Real[]<any> increments, Bool<any> initialValueIsLogScale, Natural<any> order)'
  arguments:
    - label: 'initialValue'
      description: 'The first value in the MRF.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
    - label: 'increments'
      description: 'The increments of the process, assumed to be on the log-scale.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'initialValueIsLogScale'
      description: 'Is valueInitial on the log-scale, like the increments?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default:
      options:
    - label: 'order'
      description: 'The order of the MRF (1 or 2).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'formatDiscreteCharacterData'
  return_type: 'NULL'
  usage: 'formatDiscreteCharacterData(AbstractHomologousDiscreteCharacterData<any> data, String<any> format, Natural<any> numStates)'
  arguments:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'format'
      description: 'The data format.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'DEC'
      options:
    - label: 'numStates'
      description: 'The number of states (format=="DEC" only).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '0'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'gamma'
  return_type: 'RealPos'
  usage: 'gamma(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'getOption'
  return_type: 'void'
  usage: 'getOption(String<any> key)'
  arguments:
    - label: 'key'
      description: 'The key-identifier for the option.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title: 'Get a global RevBayes option'
  aliases:
  description: 'Get a global option for RevBayes.'
  details: 'Options are used to personalize RevBayes and are stored on the local machine. Currently this is rather experimental.'
  example: |
    # compute the absolute value of a real number
    getOption("linewidth")
    
    # let us set the linewidth to a new value
    setOption("linewidth", 200)
    
    # now let's check what the value is
    getOption("linewidth")
  authors:
  see_also: 'setOption'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'getwd'
  return_type: 'String'
  usage: 'getwd()'
  arguments:
  title: 'Get and print the working directory'
  aliases:
  description: 'Get the current working directory which RevBayes uses.'
  details:
  example: |
    # get the current working directory
    getwd()
    
    # let us set a new working directory
    setwd("~/Desktop")
    
    # check the working directory again
    getwd()
  authors:
  see_also: 'setwd'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'help'
  return_type: 'void'
  usage: 'help(String<any> topic)'
  arguments:
    - label: 'topic'
      description: 'Retrieve help for a specific topic.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'String'
      default:
      options:
  title: 'Get help with RevBayes'
  aliases:
  description: 'Provides general or specific help.'
  details:
  example: |
    # get general help
    help()
    # get specific help
    help("dnNormal")
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'ifelse'
  return_type: 'Natural'
  usage: 'ifelse(Bool<any> condition, Natural<any> a, Natural<any> b)'
  arguments:
    - label: 'condition'
      description: 'A variable representing the condition of the if-else statement.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default:
      options:
    - label: 'a'
      description: 'The value if the statement is true.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'b'
      description: 'The value if the statement is false.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title: 'If-else statement as a function'
  aliases:
  description: 'If the expression is true, then the function returns the first value, otherwise the second value.'
  details: 'The ifelse function is important when the value of a variable should deterministically change during an analysis depending on other variables. Standard if-else statements are not dynamically re-evaluated.'
  example: |
    a <- 1
    b := ifelse( a == 1, 10, -10 )
    b
    
    a <- 2
    b
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'int'
  return_type: 'Integer'
  usage: 'int(String<any> x)'
  arguments:
    - label: 'x'
      description: 'The string value to convert.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Procedure'
    - 'Function'
    - 'RevObject'
  references:
- name: 'license'
  return_type: 'void'
  usage: 'license()'
  arguments:
  title: 'Copyright license of RevBayes'
  aliases:
  description: 'Print the copyright license of RevBayes.'
  details:
  example: 'license()'
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'listFiles'
  return_type: 'String[]'
  usage: 'listFiles(String<any> path, Bool<any> allFiles, Bool<any> recursive, Bool<any> includeDirs)'
  arguments:
    - label: 'path'
      description: 'The path in which to list files.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: '.'
      options:
    - label: 'allFiles'
      description: 'Should special files be returned.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'recursive'
      description: 'Should we search directories recursively.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'includeDirs'
      description: 'Should we re return directory names in recursive search.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'listOptions'
  return_type: 'void'
  usage: 'listOptions()'
  arguments:
  title: 'List global RevBayes options'
  aliases:
  description: 'List all global options for RevBayes.'
  details: 'Options are used to personalize RevBayes and are stored on the local machine. Currently this is rather experimental.'
  example:
  authors:
  see_also:
    - 'setOption'
    - 'getOption'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'ln'
  return_type: 'Real'
  usage: 'ln(RealPos<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
  title: 'Natural log function'
  aliases:
  description: 'Returns the natural log of a (positive) value.'
  details:
  example: |
    # create a stochastic node with an exponential distribution
    x ~ dnExponential(1)
    
    # create a determinstic node that takes the natural log of x
    y := ln(x)
    
    # print the values for x and y
    x # x has the stochastic value of 2.940149
    y # y has the determined value of 1.07846
  authors:
  see_also: 'log'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'log'
  return_type: 'Real'
  usage: 'log(RealPos<any> x, RealPos<any> base)'
  arguments:
    - label: 'x'
      description: 'A positive number.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'base'
      description: 'The base of the logarithm.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'logistic'
  return_type: 'Probability'
  usage: 'logistic(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'ls'
  return_type: 'void'
  usage: 'ls(Bool<any> all, String<any> filter {valid options: "all"|"utility"|"math"|"distribution"|"function"|"datatype"|"move"|"monitor"|"analysis"|"file"|"summary"|"uncategorized"})'
  arguments:
    - label: 'all'
      description: 'Should we print all variables and functions including provided ones by RevBayes?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'filter'
      description: 'List objects for the provided type.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'all'
      options:
        - 'all'
        - 'utility'
        - 'math'
        - 'distribution'
        - 'function'
        - 'datatype'
        - 'move'
        - 'monitor'
        - 'analysis'
        - 'file'
        - 'summary'
        - 'uncategorized'
  title: 'List workspace content'
  aliases:
  description: 'Show the content of the workspace.'
  details: 'The list functions shows all the variables in the current workspace. You can also see all the functions available if you use ls(all=TRUE)'
  example: |
    # now we have an empty workspace
    ls()
    # next wee add a variable
    a <- 1
    # and we can see it
    ls()
  authors:
  see_also:
    - 'clear'
    - 'exists'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'mapTree'
  return_type: 'Tree'
  usage: 'mapTree(TraceTree|TraceTree[]<any> trace, String<any> file, Bool<any> ccAges, Bool<any> ccp, Bool<any> conditionalAges, Probability<any> hpd, Bool<any> mean, Bool<any> sampledAncestors, Bool<any> positiveBranchLengths)'
  arguments:
    - label: 'trace'
      description: 'The samples of trees from the posterior.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree'
      default:
      options:
    - label: 'file'
      description: 'The name of the file where to store the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'ccAges'
      description: 'Annotate conditional clade ages?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'ccp'
      description: 'Annotate conditional clade probabilities?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'conditionalAges'
      description: 'Annotate node ages conditional on the topology?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'hpd'
      description: 'The probability mass of the highest posterior density node age interval.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.95'
      options:
    - label: 'mean'
      description: 'Annotate node ages using the mean age instead of the median?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'sampledAncestors'
      description: 'Annotate sampled ancestor probs?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'positiveBranchLengths'
      description: 'Force negative branch lengths to be short but positive?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description: 'Finds the maximum a posteriori (MAP) topology from a trace of trees and summarizes branch lengths.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Generate the MAP tree
    map_tree = mapTree(trace=tree_trace, file="map.tree")
  authors:
  see_also:
    - 'consensusTree'
    - 'mccTree'
    - 'treeTrace'
    - 'readTreeTrace'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'matrix'
  return_type: 'MatrixReal'
  usage: 'matrix(Real[][]<any> x)'
  arguments:
    - label: 'x'
      description: 'x'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[][]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'max'
  return_type: 'Real'
  usage: 'max(Real[]|MatrixReal<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector/matrix of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title: 'Maximum of a set of numbers'
  aliases:
  description: 'Finds the maximum of a vector of numbers.'
  details:
  example: |
    a = v(1,2,3,4,5)
    max(a)
    # this will print 5
  authors:
  see_also: '`min`'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'maxdiff'
  return_type: 'Tree'
  usage: 'maxdiff(TraceTree[]<any> traces)'
  arguments:
    - label: 'traces'
      description: 'The samples of trees from the posterior.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree[]'
      default:
      options:
  title:
  aliases:
  description: 'Finds the maximum difference in clade probabilities between two posterior samples.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25, nruns=2)
    
    # Compute the maxdiff statistic
    maxdiff = maxdiff(traces=tree_trace)
  authors:
  see_also: 'readTreeTrace'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'maximumTree'
  return_type: 'TimeTree'
  usage: 'maximumTree(TimeTree[]<any> geneTrees)'
  arguments:
    - label: 'geneTrees'
      description: 'The vector of trees from which to pick the maximum.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree[]'
      default:
      options:
  title: 'Maximum tree function to build a species tree.'
  aliases:
  description: 'Builds the maximum species tree given several ultrametric gene trees.'
  details: 'The maximum species tree is a consistent estimate of the species tree under the multispecies coalescent model, if the gene trees are correct and the effective population size constant along the species tree.'
  example: |
    # We simulate a species tree and gene trees and reconstruct a species tree using maximum tree:
    # Let’s simulate a species tree with 10 taxa, 5 gene trees, 1 alleles per species:
    n_species <- 10
    n_genes <- 5
    n_alleles <- 2
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
    }
    # Let's compute the maximum tree:
    recTree <- maximumTree(geneTrees)
    print(recTree)
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
    - citation: 'High-resolution species trees without concatenation. Scott V. Edwards, Liang Liu, and Dennis K. Pearl . PNAS April 3, 2007 vol. 104 no. 14 .'
      doi:
      url: 'http://www.pnas.org/content/104/14/5936.full'
    - citation: '''Maximum tree: a consistent estimator of the species tree. Liu L, Yu L, Pearl DK.  Journal of Mathematical Biology, 2010. Jan;60(1):95-106.'''
      doi: 'https://doi.org/10.1007/s00285-009-0260-0'
      url: 'https://link.springer.com/article/10.1007%2Fs00285-009-0260-0'
- name: 'mccTree'
  return_type: 'Tree'
  usage: 'mccTree(TraceTree|TraceTree[]<any> trace, String<any> file, Bool<any> ccAges, Bool<any> ccp, Bool<any> conditionalAges, Probability<any> hpd, Bool<any> mean, Bool<any> sampledAncestors, Bool<any> positiveBranchLengths)'
  arguments:
    - label: 'trace'
      description: 'The samples of trees from the posterior.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree'
      default:
      options:
    - label: 'file'
      description: 'The name of the file where to store the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'ccAges'
      description: 'Annotate conditional clade ages?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'ccp'
      description: 'Annotate conditional clade probabilities?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'conditionalAges'
      description: 'Annotate node ages conditional on the topology?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'hpd'
      description: 'The probability mass of the highest posterior density node age interval.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.95'
      options:
    - label: 'mean'
      description: 'Annotate node ages using the mean age instead of the median?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'sampledAncestors'
      description: 'Annotate sampled ancestor probs?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
    - label: 'positiveBranchLengths'
      description: 'Force negative branch lengths to be short but positive?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description: 'Finds the maximum clade credibility (MCC) topology from a trace of trees and summarizes branch lengths.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Generate the MCC tree
    map_tree = mccTree(trace=tree_trace, file="mcc.tree")
  authors:
  see_also:
    - 'consensusTree'
    - 'mapTree'
    - 'treeTrace'
    - 'readTreeTrace'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'mean'
  return_type: 'Real'
  usage: 'mean(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title: 'Mean of a vector of numbers'
  aliases:
  description: 'Finds the arithmetic mean of a vector of numbers.'
  details: 'The numbers of the vector are summed and divided by the vector length.'
  example: |
    g = v(2,3,5,6,7)
    mean(g)
    # 4.6
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'median'
  return_type: 'Real'
  usage: 'median(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title: 'Median of a set of numbers'
  aliases:
  description: 'Finds the median of a sorted vector of numbers.'
  details: |
    The vector is sorted when `median` is used finding the
    number of the sorted values with an equal amount of numbers that
    are greater than or less than that value. If the length of the vector is even, there will be no such value. In that case, the two are averaged automatically.
  example: |
    a = v(5,3,2,6,8)
    median(a)
    # 5 is the result
    b = v(1,1,2,3,5,8)
    median(b)
    # 2.5 is the result
  authors:
  see_also: '`mean`'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'min'
  return_type: 'Real'
  usage: 'min(Real[]|MatrixReal<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of values.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title: 'Minimum of a set of numbers'
  aliases:
  description: 'Finds the minimum of a vector of numbers.'
  details:
  example: |
    a = v(0,1,1,2,3,5,8,13)
    min(a)
    # will print 0
  authors:
  see_also: '`max`'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'module'
  return_type: 'void'
  usage: 'module(String<any> file, String<any> namespace, RevObject ...)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of module file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'namespace'
      description: 'Namespace used to rescue variables from overwriting.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'NULL'
      options:
    - label:
      description: 'Additinal variables passed into the module.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RevObject'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'mrcaIndex'
  return_type: 'Natural'
  usage: 'mrcaIndex(TimeTree<any> tree, Clade<any> clade)'
  arguments:
    - label: 'tree'
      description: 'The tree which is used to compute the MRCA.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'clade'
      description: 'The clade for which the MRCA is searched.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Clade'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'nodeAgeByID'
  return_type: 'RealPos'
  usage: 'nodeAgeByID(TimeTree<any> tree, Natural<any> nodeID, Bool<any> stemAge)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'nodeID'
      description: 'The node index.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
    - label: 'stemAge'
      description: 'Do we want the stem age or crown age?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'normalize'
  return_type: 'RealPos[]'
  usage: 'normalize(RealPos[]<any> x, RealPos<any> sum)'
  arguments:
    - label: 'x'
      description: 'The vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default:
      options:
    - label: 'sum'
      description: 'The sum the vector will have after normalization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default: '1'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'pomoRF'
  return_type: 'Simplex'
  usage: 'pomoRF(Simplex<any> root_base_frequencies, Real<any> root_polymorphism_proportion, RateGenerator<any> mutation_rate_matrix, Natural<any> virtualNe)'
  arguments:
    - label: 'root_base_frequencies'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default:
      options:
    - label: 'root_polymorphism_proportion'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
    - label: 'mutation_rate_matrix'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      default:
      options:
    - label: 'virtualNe'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'pomoState4Convert'
  return_type: 'AbstractHomologousDiscreteCharacterData'
  usage: 'pomoState4Convert(AbstractHomologousDiscreteCharacterData<any> aln, Natural<any> virtualNe, Taxon[]<any> taxa)'
  arguments:
    - label: 'aln'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'virtualNe'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
    - label: 'taxa'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Taxon[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'posteriorPredictiveProbability'
  return_type: 'Simplex'
  usage: 'posteriorPredictiveProbability(Real[]<any> v, Real<any> x)'
  arguments:
    - label: 'v'
      description: 'The simulated statistics.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'x'
      description: 'The opbserved value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'power'
  return_type: 'RealPos'
  usage: 'power(Real<any> base, Real<any> exponent)'
  arguments:
    - label: 'base'
      description: 'The base.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
    - label: 'exponent'
      description: 'The exponent.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'printSeed'
  return_type: 'NULL'
  usage: 'printSeed()'
  arguments:
  title: 'Print the random number generator seed'
  aliases:
  description: 'Print the seed of the random number generator.'
  details:
  example: |
    printSeed()
    
    # Set the seed to a new value
    seed(12345)
    # Now print the seed again
    printSeed()
  authors:
  see_also: 'seed'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'quantile'
  return_type: 'Real'
  usage: 'quantile(Real[]<any> x, Probability<any> k)'
  arguments:
    - label: 'x'
      description: 'A vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'k'
      description: 'The kth quantile of vector x.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'quit'
  return_type: 'void'
  usage: 'quit()'
  arguments:
  title: 'Quit RevBayes'
  aliases: 'q'
  description: 'Terminates the currently running instance of RevBayes.'
  details:
  example: |
    # if you really want to quit
    q()
    # you can always start again later ...
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'range'
  return_type: 'Integer[]'
  usage: 'range(Integer<any> first, Integer<any> last)'
  arguments:
    - label: 'first'
      description: 'Lower value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
    - label: 'last'
      description: 'Upper value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
  title: 'A range of consecutive integer numbers'
  aliases:
  description: 'Create a sequence of number in the given range (interval).'
  details: 'This function is a simplified version of the sequence function ''seq''. The range function creates a sequence of integer numbers with a step size of 1.'
  example: |
    range(1,20)
    range(20,-20)
    
    # this function is actually the same as the ':'
    20:-20
  authors:
  see_also:
    - 'seq'
    - 'rep'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readAncestralStateTrace'
  return_type: 'AncestralStateTrace[]'
  usage: 'readAncestralStateTrace(String<any> file, String<any> separator)'
  arguments:
    - label: 'file'
      description: 'The name of the file which holds the ancestral state trace.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'separator'
      description: 'The separater between sampled values.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readAncestralStateTreeTrace'
  return_type: 'TraceTree'
  usage: 'readAncestralStateTreeTrace(String<any> file, String<any> treetype {valid options: "clock"|"non-clock"}, String<any> separator, Probability|Integer<any> burnin)'
  arguments:
    - label: 'file'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'treetype'
      description: 'The type of tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'clock'
      options:
        - 'clock'
        - 'non-clock'
    - label: 'separator'
      description: 'The separater/delimiter between values.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.25'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readAtlas'
  return_type: 'RlAtlas'
  usage: 'readAtlas(String<any> file)'
  arguments:
    - label: 'file'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readBranchLengthTrees'
  return_type: 'BranchLengthTree[]'
  usage: 'readBranchLengthTrees(String<any> file)'
  arguments:
    - label: 'file'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readCharacterData'
  return_type: 'AbstractHomologousDiscreteCharacterData[]'
  usage: 'readCharacterData(String<any> file, Bool<any> alwaysReturnAsVector)'
  arguments:
    - label: 'file'
      description: 'File or directory names where to find the character data.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'alwaysReturnAsVector'
      description: 'Should the value be returned as a vector even it is only a single matrix?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readCharacterDataDelimited'
  return_type: 'NaturalNumbers'
  usage: 'readCharacterDataDelimited(String<any> file, String<any> type {valid options: "NaturalNumbers"|"Bitset"|"Standard"|"Continuous"|"Taxa"}, String<any> stateLabels, String<any> delimiter, Bool<any> headers)'
  arguments:
    - label: 'file'
      description: 'The name of the file to read in.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'type'
      description: 'The type of data.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'NaturalNumbers'
      options:
        - 'NaturalNumbers'
        - 'Bitset'
        - 'Standard'
        - 'Continuous'
        - 'Taxa'
    - label: 'stateLabels'
      description: 'The state labels (for standard states) or max number for NaturalNumbers.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
    - label: 'headers'
      description: 'Has this file a header line?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readContinuousCharacterData'
  return_type: 'ContinuousCharacterData[]'
  usage: 'readContinuousCharacterData(String<any> file, Bool<any> alwaysReturnAsVector)'
  arguments:
    - label: 'file'
      description: 'The name of the file or directory for the character data matrices.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'alwaysReturnAsVector'
      description: 'Should we return this object as a vector even if it is just a single matrix?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readDataDelimitedFile'
  return_type: 'RevObject[][]'
  usage: 'readDataDelimitedFile(String<any> file, Bool<any> header, String<any> delimiter, Bool<any> rownames)'
  arguments:
    - label: 'file'
      description: 'The name of the file to read in.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'header'
      description: 'Skip first line?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
    - label: 'rownames'
      description: 'Skip first column?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases: 'readTable'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readDiscreteCharacterData'
  return_type: 'AbstractHomologousDiscreteCharacterData[]'
  usage: 'readDiscreteCharacterData(String<any> file, Bool<any> alwaysReturnAsVector)'
  arguments:
    - label: 'file'
      description: 'The name of the file or directory from which to read in the character data matrix.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'alwaysReturnAsVector'
      description: 'Should we always return the character data matrix as a vector of matrices even if there is only one?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readDistanceMatrix'
  return_type: 'DistanceMatrix'
  usage: 'readDistanceMatrix(String<any> file)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readMatrix'
  return_type: 'MatrixReal'
  usage: 'readMatrix(String<any> file, String<any> delimiter)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readPoMoCountFile'
  return_type: 'AbstractHomologousDiscreteCharacterData'
  usage: 'readPoMoCountFile(String<any> file, Natural<any> virtualPopulationSize, Natural<any> numStates)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'virtualPopulationSize'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
    - label: 'numStates'
      description: 'The number of states (e.g. 4 for A,C,G and T).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '4'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readRelativeNodeAgeConstraints'
  return_type: 'RlRelativeNodeAgeConstraints'
  usage: 'readRelativeNodeAgeConstraints(String<any> file)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readRelativeNodeAgeWeightedConstraints'
  return_type: 'RlRelativeNodeAgeWeightedConstraints'
  usage: 'readRelativeNodeAgeWeightedConstraints(String<any> file, Real<any> threshold)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'threshold'
      description: 'weight threshold below which constraints are ignored.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readStochasticVariableTrace'
  return_type: 'ModelTrace[]'
  usage: 'readStochasticVariableTrace(String<any> file, String<any> delimiter)'
  arguments:
    - label: 'file'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'delimiter'
      description: 'The delimiter used between the output of variables.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readTaxonData'
  return_type: 'Taxon[]'
  usage: 'readTaxonData(String<any> filename, String<any> delimiter)'
  arguments:
    - label: 'filename'
      description: 'Relative or absolute file name.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'delimiter'
      description: 'Delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readTrace'
  return_type: 'Trace[]'
  usage: 'readTrace(String<any> file, String<any> delimiter, Probability|Integer<any> burnin, Natural<any> thinning)'
  arguments:
    - label: 'file'
      description: 'Name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns (e.g., the iteration number and the trees).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.25'
      options:
    - label: 'thinning'
      description: 'The frequency of samples to read, i.e., we will only used every n-th sample where n is defined by this argument.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '1'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readTreeTrace'
  return_type: 'TraceTree'
  usage: 'readTreeTrace(String|String[]<any> file, String<any> treetype {valid options: "clock"|"non-clock"}, Clade<any> outgroup, String<any> separator, Probability|Integer<any> burnin, Natural<any> thinning, Bool<any> nexus, Natural<any> nruns)'
  arguments:
    - label: 'file'
      description: 'The name of the tree trace file(s), or directories containing them.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'treetype'
      description: 'The type of trees.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'clock'
      options:
        - 'clock'
        - 'non-clock'
    - label: 'outgroup'
      description: 'The clade (consisting of one or more taxa) used as an outgroup.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Clade'
      default: 'NULL'
      options:
    - label: 'separator'
      description: 'The separator/delimiter between values in the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.25'
      options:
    - label: 'thinning'
      description: 'The frequency of samples to read, i.e., we will only used every n-th sample where n is defined by this argument.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '1'
      options:
    - label: 'nexus'
      description: 'Whether the file to read is in NEXUS format.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'nruns'
      description: 'The number of trace files with the same basename (i.e. the number of filenames with pattern <file>_run_<n>.trees'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default: '1'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readTrees'
  return_type: 'TimeTree[]'
  usage: 'readTrees(String<any> file, String<any> text, String<any> treetype {valid options: "clock"|"non-clock"})'
  arguments:
    - label: 'file'
      description: 'The name of the file containing the trees.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'text'
      description: 'A string containing one or several newick trees, separated by end of lines.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'treetype'
      description: 'The type of trees.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'clock'
      options:
        - 'clock'
        - 'non-clock'
  title: 'Function to read in trees.'
  aliases:
  description: 'Reads trees from a file containing trees (Nexus, Phylip or Newick accepted), or from a string containing Newick representations of trees.'
  details: 'Either a file name (with the file argument) or a string (with the text argument) must be provided as argument. If both are provided, trees will be read from both sources.'
  example: |
    trees=readTrees(text="(a,(b,c));\n(d:0.1,(e:0.1,f:0.1):0.1);")
    print(trees)
  authors:
  see_also:
    - 'write'
    - 'readBranchLengthTrees'
    - 'readCharacterData'
    - 'readCharacterDataDelimited'
    - 'readContinuousCharacterData'
    - 'readDiscreteCharacterData'
    - 'readDataDelimitedFile'
    - 'readCharacterData'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'readVCF'
  return_type: 'AbstractHomologousDiscreteCharacterData'
  usage: 'readVCF(String<any> file, String<any> type {valid options: "DNA"|"binary"})'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'type'
      description: 'The type of data to be constructed.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'binary'
      options:
        - 'DNA'
        - 'binary'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'rep'
  return_type: 'Integer[]'
  usage: 'rep(Integer<any> x, Natural<any> n)'
  arguments:
    - label: 'x'
      description: 'The value that we replicate.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'Integer'
      default:
      options:
    - label: 'n'
      description: 'How often we replicate the value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title: 'Replicate a value'
  aliases: 'replicate'
  description: '''rep'' creates a vector of ''n'' copies of the value ''x''.'
  details: '''rep'' creates a vector of ''n'' elements, each with value ''x'', preserving the type of ''x'' in the returned vector.'
  example: 'rep(0.1, 3)'
  authors:
  see_also:
    - 'simplex'
    - 'v'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'rootedTripletDist'
  return_type: 'RootedTripletDistribution'
  usage: 'rootedTripletDist(Tree<any> geneTrees, String[]<any> speciesNames, Bool<any> keepBranchLengths)'
  arguments:
    - label: 'geneTrees'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
    - label: 'speciesNames'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'String[]'
      default:
      options:
    - label: 'keepBranchLengths'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'round'
  return_type: 'Integer'
  usage: 'round(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'seed'
  return_type: 'NULL'
  usage: 'seed(Natural<any> x)'
  arguments:
    - label: 'x'
      description: 'The number used to seed the random number generator.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      default:
      options:
  title: 'Seed set function'
  aliases:
  description: 'Sets the random number generator seed given a natural number.'
  details:
  example: |
    # pick some definitely random number
    seed(80797980)
    a <- rUniform(1,0.6,1.2)
    a
    seed(80797980)
    a <- rUniform(1,0.6,1.2)
    a # this will be the same as above!
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'seq'
  return_type: 'Integer[]'
  usage: 'seq(Integer<any> from, Integer<any> to, Integer<any> by)'
  arguments:
    - label: 'from'
      description: 'The first value of the sequence.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
    - label: 'to'
      description: 'The last value of the sequence.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
    - label: 'by'
      description: 'The step-size between value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      default:
      options:
  title: 'Create a sequence values'
  aliases:
  description: 'Create a sequence of values separate by a given step-size.'
  details: 'The ''seq'' function create a sequence of values, starting with the initial value and then adding the step-size to it until the value reaches the ''to''-value.'
  example: 'seq(-0.5, 10.5, 2)'
  authors:
  see_also: 'rep'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'setOption'
  return_type: 'void'
  usage: 'setOption(String<any> key, String<any> value)'
  arguments:
    - label: 'key'
      description: 'The key-identifier for which to set a new value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'value'
      description: 'The new value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title: 'Set a global RevBayes option'
  aliases:
  description: 'Set a global option for RevBayes.'
  details: 'Options are used to personalize RevBayes and are stored on the local machine. Currently this is rather experimental.'
  example: |
    # compute the absolute value of a real number
    getOption("linewidth")
    
    # let us set the linewidth to a new value
    setOption("linewidth", 200)
    
    # now let's check what the value is
    getOption("linewidth")
  authors:
  see_also: 'getOption'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'setwd'
  return_type: 'void'
  usage: 'setwd(String<any> wd)'
  arguments:
    - label: 'wd'
      description: 'The new working directory.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title: 'Set and print the working directory'
  aliases:
  description: 'Set the current working directory which RevBayes uses.'
  details:
  example: |
    # get the current working directory
    getwd()
    
    # let us set a new working directory
    setwd("~/Desktop")
    
    # check the working directory again
    getwd()
  authors:
  see_also: 'getwd'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'simBirthDeath'
  return_type: 'TimeTree'
  usage: 'simBirthDeath(RealPos[]<any> timeline, RealPos[][]|RealPos[]|RealPos<any> lambda, RealPos[][]|RealPos[]|RealPos<any> mu, RealPos[][]|RealPos[]|RealPos<any> phi, Probability[][]|Probability[]|Probability<any> r, Probability[][]|Probability[]|Probability<any> Lambda, Probability[][]|Probability[]|Probability<any> Mu, Probability[][]|Probability[]|Probability<any> Phi, Probability[][]|Probability[]|Probability<any> R, Simplex<any> rootCategory, RealPos<any> time)'
  arguments:
    - label: 'timeline'
      description: 'The endpoints of the time intervals (episodes). You should include 0 at the end. We use ages before the present.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      default: '[ 0.000 ]'
      options:
    - label: 'lambda'
      description: 'The speciation rates for each interval.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default:
      options:
    - label: 'mu'
      description: 'The extinction rates for each interval.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default: '0'
      options:
    - label: 'phi'
      description: 'The sampling rates for each interval.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      default: '0'
      options:
    - label: 'r'
      description: 'The extinction probability when rate-sampling happens for each interval.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability[][]'
      default: '0'
      options:
    - label: 'Lambda'
      description: 'The burst probability at the end of each interval.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability[][]'
      default: '0'
      options:
    - label: 'Mu'
      description: 'The (mass) extinction probability at the end of each interval.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability[][]'
      default: '0'
      options:
    - label: 'Phi'
      description: 'The sampling probability at the end of each interval.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability[][]'
      default: '0'
      options:
    - label: 'R'
      description: 'The extinction probability when event-sampling happens for each interval.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability[][]'
      default: '0'
      options:
    - label: 'rootCategory'
      description: 'The probabilities of the categories for the root.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      default: '[ 1.000 ]'
      options:
    - label: 'time'
      description: 'The time/age before the present.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
  title:
  aliases:
  description: 'Simulates a tree under a very general birth-death process. Parameters are fed in as a n_cats by n_intervals matrix, such that the ith row is the rate vector for the ith category.'
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'simCompleteTree'
  return_type: 'TimeTree'
  usage: 'simCompleteTree(Taxon[]<any> taxa, RealPos<any> rootAge, RealPos<any> lambda, RealPos<any> mu)'
  arguments:
    - label: 'taxa'
      description: 'The taxon names used for initialization.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Taxon[]'
      default:
      options:
    - label: 'rootAge'
      description: 'The root age.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'lambda'
      description: 'The speciation rate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
    - label: 'mu'
      description: 'The extinction rate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'simStartingTree'
  return_type: 'TimeTree'
  usage: 'simStartingTree(Taxon[]<any> taxa, Clade[]<any> constraints)'
  arguments:
    - label: 'taxa'
      description: 'The taxa used for initialization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Taxon[]'
      default:
      options:
    - label: 'constraints'
      description: 'The topological constraints.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Clade[]'
      default: '[ ]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'simTree'
  return_type: 'TimeTree'
  usage: 'simTree(Natural<any> num_taxa, String<any> type {valid options: "balanced"|"caterpillar"})'
  arguments:
    - label: 'num_taxa'
      description: 'How many taxa this tree has.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      default:
      options:
    - label: 'type'
      description: 'The type of the shape of the topology.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'balanced'
      options:
        - 'balanced'
        - 'caterpillar'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'sinh'
  return_type: 'Real'
  usage: 'sinh(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'sort'
  return_type: 'Real[]'
  usage: 'sort(Real[]<any> x, Bool<any> ascending)'
  arguments:
    - label: 'x'
      description: 'The vector to be sorted.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'Real[]'
      default:
      options:
    - label: 'ascending'
      description: 'Sort in ascending order?.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title: 'Sort function'
  aliases:
  description: 'Function for sorting the members of a vector in either ascending or descending order.'
  details: 'The vector to be sorted can be of any numeric type. Ascending or descending is specified via the `ascending` argument'
  example: |
    nums = v(1,3,5,7,2,4,6,8)
    sort(nums)
    # this will result in 1,2,3,4,5,6,7,8
    sort(nums, ascending = FALSE)
    # this will result in 8,7,6,5,4,3,2,1
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'source'
  return_type: 'void'
  usage: 'source(String<any> file, Bool<any> echo.on)'
  arguments:
    - label: 'file'
      description: 'The name of the file to read-in.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'echo.on'
      description: 'Should we print the commands from the file on the screen?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title: 'Function for sourcing a Rev file'
  aliases:
  description: 'This function takes a Rev filename as an argument and runs that Rev script.'
  details:
  example: |
    # set the file name
    fn = "rb_tutorial.Rev"
    # the source function will run the Rev code in the file fn
    source(fn)
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'sqrt'
  return_type: 'RealPos'
  usage: 'sqrt(RealPos<any> x)'
  arguments:
    - label: 'x'
      description: 'A number.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      default:
      options:
  title: 'Square root of a number'
  aliases:
  description: 'Takes the square root of some positive number `x`.'
  details:
  example: |
    # compute the square root of a real number
    x <- 3.0
    root <- sqrt(x)
    if ( abs(root*root - x) > 1.0e-15) {
        print("Problem computing the square root.")
    } else {
        print("Correct computation of the square root.")
    }
  authors:
  see_also: '`power`'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'stdev'
  return_type: 'Real'
  usage: 'stdev(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'The vector of samples.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'stochasticMatrix'
  return_type: 'StochasticMatrix'
  usage: 'stochasticMatrix(Simplex[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of simplices. Each simplex corresponds to a row in the stochastic matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex[]'
      default:
      options:
  title: 'Building a stochastic matrix.'
  aliases:
  description: 'A stochastic matrix is a matrix (not necessarily square) with rows that sum to 1.'
  details:
  example: |
    vec[1] ~ dnDirichlet( [1,1,1,1] )
    vec[2] ~ dnDirichlet( [1,1,1,1] )
    vec[3] ~ dnDirichlet( [1,1,1,1] )
    vec[4] ~ dnDirichlet( [1,1,1,1] )
    
    m := stochasticMatrix(vec)
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'structure'
  return_type: 'void'
  usage: 'structure(RevObject<any> x, Bool<any> verbose)'
  arguments:
    - label: 'x'
      description: 'The variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RevObject'
      default:
      options:
    - label: 'verbose'
      description: 'Do you want all the information?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title: 'The structure of a variable'
  aliases: 'str'
  description: 'Shows all the information about a given variable.'
  details:
  example: |
    # create a variable
    a <- 1
    b := exp(a)
    # now create a deterministic variable which will be a child of 'b'
    c := ln(b)
    # now create a constant variable which will not be a child of 'b'
    d <- ln(b)
    
    str(b)
  authors:
  see_also: 'type'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'sum'
  return_type: 'Real'
  usage: 'sum(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title: 'Sum function'
  aliases:
  description: |
    Sums all members of a vector of type `Real`, `RealPos`, `Integer`,
    or `Natural`
  details:
  example: |
    a = v(1,2,3,4,5,6,7,8)
    sum(a)
    # returns 36
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'summarizeCharacterMaps'
  return_type: 'Tree'
  usage: 'summarizeCharacterMaps(Tree<any> tree, AncestralStateTrace[]<any> character_map_trace_vector, TraceTree<any> tree_trace, String<any> file, Probability|Integer<any> burnin, String<any> separator, Bool<any> verbose)'
  arguments:
    - label: 'tree'
      description: 'The input tree to summarize ancestral states over.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Tree'
      default: 'NULL'
      options:
    - label: 'character_map_trace_vector'
      description: 'A vector of stochastic character map traces.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AncestralStateTrace[]'
      default:
      options:
    - label: 'tree_trace'
      description: 'A trace of tree samples.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'TraceTree'
      default: 'NULL'
      options:
    - label: 'file'
      description: 'The name of the file to store the summarized character histories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.25'
      options:
    - label: 'separator'
      description: 'The delimiter between variables. 	 by default.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
    - label: 'verbose'
      description: 'Printing verbose output'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'TRUE'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'symmetricDifference'
  return_type: 'RealPos'
  usage: 'symmetricDifference(Tree<any> tree1, Tree<any> tree2)'
  arguments:
    - label: 'tree1'
      description: 'The first tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
    - label: 'tree2'
      description: 'The second tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      default:
      options:
  title:
  aliases: 'symDiff'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'system'
  return_type: 'void'
  usage: 'system(String<any> command)'
  arguments:
    - label: 'command'
      description: 'The system command to execute.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
  title: 'Execute a system command.'
  aliases:
  description: 'Run a system command.'
  details: 'This function will delegate the command to the system. In that way, the function works as an interface to the shell.'
  example: |
    # We can execute any command just as if you are using a terminal
    system("ls")
    system("pwd")
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'tanh'
  return_type: 'Real'
  usage: 'tanh(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'time'
  return_type: 'NULL'
  usage: 'time(String<any> option {valid options: "year"|"day"|"seconds"|"milliseconds"|"fromBeginning"})'
  arguments:
    - label: 'option'
      description: 'The format of the time.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: 'fromBeginning'
      options:
        - 'year'
        - 'day'
        - 'seconds'
        - 'milliseconds'
        - 'fromBeginning'
  title: 'Get the time information'
  aliases:
  description: 'Get the current system time in milliseconds.'
  details:
  example: |
    time()
    
    # Wait a little bit
    sum = 0
    for (i in 1:10000) sum += i
    # Now print the time again
    time()
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'tmrca'
  return_type: 'RealPos'
  usage: 'tmrca(TimeTree<any> tree, Clade<any> clade, Bool<any> stemAge)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      default:
      options:
    - label: 'clade'
      description: 'The clade.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Clade'
      default:
      options:
    - label: 'stemAge'
      description: 'Do we want the stem age or crown age?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
  title: 'Find the time to the most recent common ancestor'
  aliases:
  description: 'Finds the most recent common ancestor (TMRCA) of a clade of taxa on a tree.'
  details:
  example: |
    # let's make up some taxa
    taxa = v("horse", "whale", "unicorn", "narwhal")
    # convert these to the taxon datatype
    for(i in 1:4) { taxa[i] = taxon(taxa[i]) }
    # simulate a tree
    tau ~ dnUniformTimeTree(rootAge=1, taxa=taxa)
    # we also need a molecular substitution model
    molecular_model := fnJC(4)
    # together these form a continuous time Markov chain over the tree
    full_model ~ dnPhyloCTMC(tree=tau, Q=molecular_model, nSites = 100, type="DNA")
    # need to make a clade
    horned_animals <- clade(taxa[3], taxa[4])
    tmrca(tau, horned_animals)
  authors:
  see_also: '`clade`'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'treeTrace'
  return_type: 'TraceTree'
  usage: 'treeTrace(TimeTree[]|BranchLengthTree[]|Tree[]<any> trees, Probability|Integer<any> burnin)'
  arguments:
    - label: 'trees'
      description: 'Vector of trees.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'TimeTree[]'
      default:
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      default: '0.25'
      options:
  title:
  aliases:
  description: 'Creates a tree trace object from a vector of trees.'
  details:
  example: |
    # Read in a vector of trees
    trees = readTrees("trees.nex")
    
    # Create a tree trace
    tree_trace = treeTrace(trees, burnin=0.25)
    
    # Create a distribution of trees from the tree trace
    tree ~ dnEmpiricalTree(tree_trace)
    
    # Add an MCMC move
    moves[1] = mvEmpiricalTree(tree)
  authors:
  see_also:
    - 'mvEmpiricalTree'
    - 'treeTrace'
    - 'readTreeTrace'
    - 'readTrees'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'trunc'
  return_type: 'Integer'
  usage: 'trunc(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'type'
  return_type: 'String'
  usage: 'type(RevObject<any> x)'
  arguments:
    - label: 'x'
      description: 'A variable.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RevObject'
      default:
      options:
  title: 'The value type of a variable'
  aliases:
  description: 'The value type of a variable.'
  details:
  example: |
    a <- 2
    type(a)
    
    b <- 2.0
    type(b)
  authors:
  see_also: 'structure'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'v'
  return_type: 'Integer[]'
  usage: 'v(Integer<any> , Integer ...)'
  arguments:
    - label:
      description: 'First value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer'
      default:
      options:
    - label:
      description: 'More values ...'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer'
      default:
      options:
  title: 'Create a vector'
  aliases:
  description: '''v'' creates a vector of the elements ''...'''
  details: '''v'' creates a vector of the elements ''...'', which are objects of a common base type. Vector elements may themselves be vectors.'
  example: |
    # create a vector, Natural[]
    x <- v(1,2,3)
    x <- x + 1
    x
    
    y <- v(2,4,6)
    # create a vector of Natural[][]
    z <- v(x,y)
    z
    z[0]
  authors:
  see_also:
    - 'simplex'
    - 'rep'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'var'
  return_type: 'RealPos'
  usage: 'var(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of values.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function<RealPos>'
    - 'Function'
    - 'RevObject'
  references:
- name: 'vectorFlatten'
  return_type: 'RealPos[]'
  usage: 'vectorFlatten(Real[][]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of a vector.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[][]'
      default:
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'write'
  return_type: 'NULL'
  usage: 'write(RevObject<any> , RevObject ..., String<any> filename, Bool<any> append, String<any> separator)'
  arguments:
    - label:
      description: 'A variable to write.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RevObject'
      default:
      options:
    - label:
      description: 'Additional variables to write.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RevObject'
      default:
      options:
    - label: 'filename'
      description: 'Writing to this file, or to the screen if name is empty.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'append'
      description: 'Append or overwrite existing file?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      default: 'FALSE'
      options:
    - label: 'separator'
      description: 'How to separate values between variables.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
  title:
  aliases: 'print'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'writeCharacterDataDelimited'
  return_type: 'NULL'
  usage: 'writeCharacterDataDelimited(String<any> filename, AbstractHomologousDiscreteCharacterData|ContinuousCharacterData<any> data, String<any> delimiter)'
  arguments:
    - label: 'filename'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default: ''
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
- name: 'writeFasta'
  return_type: 'NULL'
  usage: 'writeFasta(String<any> filename, AbstractHomologousDiscreteCharacterData<any> data)'
  arguments:
    - label: 'filename'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
  title: 'FASTA file writing function'
  aliases:
  description: |
    This function writes out a FASTA formatted file given 
    data of class `AbstractHomologousDiscreteCharacterData`.
    Filename is specified using the `fn` argument.
  details:
  example: |
    # let's make up some taxa
    taxa = v("horse", "whale", "unicorn", "narwhal")
    # convert these to the taxon datatype
    for(i in 1:4) { taxa[i] = taxon(taxa[i]) }
    # simulate a tree
    tau ~ dnUniformTimeTree(rootAge=1, taxa=taxa)
    # we also need a molecular substitution model
    molecular_model := fnJC(4)
    # together these form a continuous time Markov chain over the tree
    full_model ~ dnPhyloCTMC(tree=tau, Q=molecular_model, nSites = 100, type="DNA")
    # this will print a FASTA file with a simulated molecular matrix
    # to the working directory
    writeFasta(filename="test.fasta", full_model)
  authors:
  see_also: '`writeNexus`, `writeCharacterDataDelimited`'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
    - citation: 'Pearson, William R., and David J. Lipman. "Improved tools for biological sequence comparison." Proceedings of the National Academy of Sciences 85.8 (1988): 2444-2448.'
      doi:
      url:
    - citation:
      doi:
      url: 'https://www.pnas.org/content/85/8/2444.short'
    - citation:
      doi: 'https://doi.org/10.1073/pnas.85.8.2444'
      url:
- name: 'writeNexus'
  return_type: 'NULL'
  usage: 'writeNexus(String<any> filename, AbstractHomologousDiscreteCharacterData|ContinuousCharacterData|Tree|Tree[]|TimeTree[]<any> data)'
  arguments:
    - label: 'filename'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      default:
      options:
    - label: 'data'
      description: 'The character data matrix to print.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      default:
      options:
  title: 'Nexus file writer'
  aliases:
  description: 'Function for writing a nexus file.'
  details: |
    The first argument is the filename  to write to and this must be a string.
    The second argument is a data object that must be some character matrix. 
    This data matrix could be a morphological matrix, a molecular matrix, or a tree.
  example: |
    # let's make up some taxa
    taxa = v("horse", "whale", "unicorn", "narwhal")
    # simulate a tree
    tau ~ dnUniformTimeTree(rootAge=1, taxa=taxa)
    # we also need a molecular substitution model
    molecular_model := fnJC(4)
    # together these form a continuous time Markov chain over the tree
    full_model ~ dnPhyloCTMC(tree=tau, Q=molecular_model, nSites = 100, type="DNA")
    # this will print a Nexus file with a simulated molecular matrix
    # to the working directory
    writeNexus(filename="test.nex", full_model)
  authors:
  see_also: '`writeFasta`, `writeCharacterDataDelimited`, `write`'
  type_spec:
    - 'Function'
    - 'RevObject'
  references:
    - citation: 'David R. Maddison, David L. Swofford, Wayne P. Maddison, Nexus: An Extensible File Format for Systematic Information, Systematic Biology, Volume 46, Issue 4, December 1997, Pages 590–621,'
      doi: 'https://doi.org/10.1093/sysbio/46.4.590'
      url: 'https://academic.oup.com/sysbio/article/46/4/590/1629695'
- name: 'AbstractHomologousDiscreteCharacterData'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'ModelObject'
    - 'RevObject'
  constructor:
  methods:
    - name: '[]'
      return_type: 'AbstractAbstractDiscreteTaxonData'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'addMissingTaxa'
      return_type: 'void'
      usage: 'addMissingTaxa(String|Taxon|String[]|Taxon[]<any> taxon)'
      arguments:
        - label: 'taxon'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'chartype'
      return_type: 'String'
      usage: 'chartype()'
      arguments:
    - name: 'computeMultinomialProfileLikelihood'
      return_type: 'Real'
      usage: 'computeMultinomialProfileLikelihood()'
      arguments:
    - name: 'computeSiteFrequencySpectrum'
      return_type: 'Natural[]'
      usage: 'computeSiteFrequencySpectrum(Bool<any> folded, String<any> ambiguityTreatment {valid options: "ancestral"|"derived"|"skip"|"rescale"})'
      arguments:
        - label: 'folded'
          description: 'Should we compute the folded SFS?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'ambiguityTreatment'
          description: 'How should we treat ambiguous characters as derived?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ancestral'
          options:
            - 'ancestral'
            - 'derived'
            - 'skip'
            - 'rescale'
    - name: 'computeStateFrequencies'
      return_type: 'MatrixReal'
      usage: 'computeStateFrequencies()'
      arguments:
    - name: 'excludeAll'
      return_type: 'void'
      usage: 'excludeAll()'
      arguments:
    - name: 'excludeCharacter'
      return_type: 'void'
      usage: 'excludeCharacter(Natural<any> pos)'
      arguments:
        - label: 'pos'
          description: 'The position of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'excludeCharacter'
      return_type: 'void'
      usage: 'excludeCharacter(Natural[]<any> )'
      arguments:
        - label:
          description: 'A vector of character positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'excludeTaxa'
      return_type: 'void'
      usage: 'excludeTaxa(String|Taxon<any> taxon)'
      arguments:
        - label: 'taxon'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'excludeTaxa'
      return_type: 'void'
      usage: 'excludeTaxa(String[]|Taxon[]<any> taxa)'
      arguments:
        - label: 'taxa'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'expandCharacters'
      return_type: 'AbstractHomologousDiscreteCharacterData'
      usage: 'expandCharacters(Natural<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The factor by which the state space is expanded.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'filename'
      return_type: 'String'
      usage: 'filename()'
      arguments:
    - name: 'getEmpiricalBaseFrequencies'
      return_type: 'Simplex'
      usage: 'getEmpiricalBaseFrequencies()'
      arguments:
    - name: 'getIncludedCharacterIndices'
      return_type: 'Natural[]'
      usage: 'getIncludedCharacterIndices()'
      arguments:
    - name: 'getNumInvariantSites'
      return_type: 'Natural'
      usage: 'getNumInvariantSites(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'getPairwiseDifference'
      return_type: 'DistanceMatrix'
      usage: 'getPairwiseDifference(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'getStateDescriptions'
      return_type: 'String[]'
      usage: 'getStateDescriptions()'
      arguments:
    - name: 'includeAll'
      return_type: 'void'
      usage: 'includeAll()'
      arguments:
    - name: 'includeCharacter'
      return_type: 'void'
      usage: 'includeCharacter(Natural<any> )'
      arguments:
        - label:
          description: 'The position of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'includeCharacter'
      return_type: 'void'
      usage: 'includeCharacter(Natural[]<any> )'
      arguments:
        - label:
          description: 'A vector of character positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'includeTaxa'
      return_type: 'void'
      usage: 'includeTaxa(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'includeTaxa'
      return_type: 'void'
      usage: 'includeTaxa(String[]<any> names)'
      arguments:
        - label: 'names'
          description: 'The names of the taxa.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'isHomologous'
      return_type: 'Bool'
      usage: 'isHomologous()'
      arguments:
    - name: 'isResolved'
      return_type: 'Bool'
      usage: 'isResolved(Natural<any> taxonIndex, Natural<any> charIndex)'
      arguments:
        - label: 'taxonIndex'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'charIndex'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'isSequenceMissing'
      return_type: 'Bool'
      usage: 'isSequenceMissing(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'maxGcContent'
      return_type: 'Probability'
      usage: 'maxGcContent(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'maxInvariableBlockLength'
      return_type: 'Natural'
      usage: 'maxInvariableBlockLength(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'maxPairwiseDifference'
      return_type: 'Natural'
      usage: 'maxPairwiseDifference(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'maxVariableBlockLength'
      return_type: 'Natural'
      usage: 'maxVariableBlockLength(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'meanGcContent'
      return_type: 'Probability'
      usage: 'meanGcContent(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'meanGcContentByCodonPosition'
      return_type: 'Probability'
      usage: 'meanGcContentByCodonPosition(Natural<any> index, Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'index'
          description: 'The index of the codon position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'minGcContent'
      return_type: 'Probability'
      usage: 'minGcContent(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'minPairwiseDifference'
      return_type: 'Natural'
      usage: 'minPairwiseDifference(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nchar'
      return_type: 'Natural'
      usage: 'nchar()'
      arguments:
    - name: 'ntaxa'
      return_type: 'Natural'
      usage: 'ntaxa()'
      arguments:
    - name: 'numInvariableBlocks'
      return_type: 'Natural'
      usage: 'numInvariableBlocks(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'numTaxaMissingSequence'
      return_type: 'Natural'
      usage: 'numTaxaMissingSequence(Probability<any> x)'
      arguments:
        - label: 'x'
          description: 'The percentage/threshold for the missing sequence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default:
          options:
    - name: 'percentageMissing'
      return_type: 'Probability'
      usage: 'percentageMissing(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'removeTaxa'
      return_type: 'void'
      usage: 'removeTaxa(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'removeTaxa'
      return_type: 'void'
      usage: 'removeTaxa(String[]<any> names)'
      arguments:
        - label: 'names'
          description: 'The names of the taxa.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'setCodonPartition'
      return_type: 'void'
      usage: 'setCodonPartition(Natural<any> )'
      arguments:
        - label:
          description: 'The index of the codon position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'setCodonPartition'
      return_type: 'void'
      usage: 'setCodonPartition(Natural[]<any> )'
      arguments:
        - label:
          description: 'The indicies of the codon positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'setHomeologPhase'
      return_type: 'void'
      usage: 'setHomeologPhase(String<any> data_name, String<any> tip_name)'
      arguments:
        - label: 'data_name'
          description: 'The name used in the character alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'tip_name'
          description: 'The tip name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'setNumStatesPartition'
      return_type: 'void'
      usage: 'setNumStatesPartition(Natural<any> )'
      arguments:
        - label:
          description: 'The number of states in this partition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'setNumStatesVector'
      return_type: 'AbstractHomologousDiscreteCharacterData[]'
      usage: 'setNumStatesVector()'
      arguments:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'setTaxonObject'
      return_type: 'void'
      usage: 'setTaxonObject(String<any> current, Taxon<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon'
          default:
          options:
    - name: 'show'
      return_type: 'void'
      usage: 'show()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'taxonIndex'
      return_type: 'Natural'
      usage: 'taxonIndex(String<any> name)'
      arguments:
        - label: 'name'
          description: 'he name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'translateCharacters'
      return_type: 'AbstractHomologousDiscreteCharacterData'
      usage: 'translateCharacters(String<any> type)'
      arguments:
        - label: 'type'
          description: 'The character type into which we want to translate.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'varGcContent'
      return_type: 'Probability'
      usage: 'varGcContent(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'varGcContentByCodonPosition'
      return_type: 'Probability'
      usage: 'varGcContentByCodonPosition(Natural<any> index, Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'index'
          description: 'The index of the codon position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  references:
- name: 'AverageDistanceMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
    - name: 'completeness'
      return_type: 'Natural'
      usage: 'completeness()'
      arguments:
    - name: 'distanceMatrix'
      return_type: 'AverageDistanceMatrix'
      usage: 'distanceMatrix()'
      arguments:
    - name: 'getElement'
      return_type: 'Natural'
      usage: 'getElement(Natural<any> i, Natural<any> j)'
      arguments:
        - label: 'i'
          description: 'The row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'j'
          description: 'The column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'mask'
      return_type: 'MatrixBoolean'
      usage: 'mask()'
      arguments:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'size'
      return_type: 'Real'
      usage: 'size()'
      arguments:
  references:
- name: 'Bool'
  title: 'Datatype for logical variables.'
  aliases:
  description: 'Bool variables can be either `true` or `false` (`TRUE` or `FALSE` also work).'
  details:
  example: |
    a <- FALSE
    if(!a)
        print("a is not true")
    # this will print the statement in parentheses
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
  references:
- name: 'BootstrapAnalysis'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'BootstrapAnalysis(MaximumLikelihoodAnalysis<any> estimator, Natural<any> simulations)'
      arguments:
        - label: 'estimator'
          description: 'The maximum likelihood estimation object.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'MaximumLikelihoodAnalysis'
          default:
          options:
        - label: 'simulations'
          description: 'How many replicate simulations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run(RealPos<any> epsilon)'
      arguments:
        - label: 'epsilon'
          description: 'The minimum improvement in the last interval.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.001'
          options:
  references:
- name: 'BranchLengthTree'
  title: 'Tree datatype'
  aliases:
  description: 'The Tree datatype stores information to describe the shared ancestry of a taxon set. Information includes taxon labels, topology, nodecount, and branch lengths. Tree objects also possess several useful methods to traverse and manipulate the Tree''s value.'
  details:
  example:
  authors:
  see_also:
    - 'TimeTree'
    - 'BranchLengthTree'
  type_spec:
    - 'Tree'
    - 'RevObject'
  constructor:
  methods:
    - name: 'branchLength'
      return_type: 'RealPos'
      usage: 'branchLength(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'calculateEDR'
      return_type: 'RealPos[]'
      usage: 'calculateEDR()'
      arguments:
    - name: 'calculateMNTD'
      return_type: 'Real'
      usage: 'calculateMNTD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Nearest Taxon Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MNTD z-score or the observed MNTD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MNTD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'calculateMPD'
      return_type: 'Real'
      usage: 'calculateMPD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Phylogenetic Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MPD z-score or the observed MPD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MPD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'child'
      return_type: 'Natural'
      usage: 'child(Natural<any> node, Natural<any> index)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'index'
          description: 'The index of the child of this node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'containsClade'
      return_type: 'Bool'
      usage: 'containsClade(Clade<any> clade)'
      arguments:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'dropTip'
      return_type: 'void'
      usage: 'dropTip(String|Taxon<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'fitchScore'
      return_type: 'Natural'
      usage: 'fitchScore(AbstractHomologousDiscreteCharacterData<any> characters)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Fitch Score.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
    - name: 'getClade'
      return_type: 'Clade'
      usage: 'getClade(Taxon[]<any> clade)'
      arguments:
        - label: 'clade'
          description: 'Vector of some of the taxa included in the clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
    - name: 'getIndices'
      return_type: 'Natural[]'
      usage: 'getIndices()'
      arguments:
    - name: 'getInverseES'
      return_type: 'RealPos[]'
      usage: 'getInverseES()'
      arguments:
    - name: 'getPSSP'
      return_type: 'RealPos[]'
      usage: 'getPSSP(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment to use when computing the Parsimoniously Same State Paths (PSSP).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'hasSameTopology'
      return_type: 'Bool'
      usage: 'hasSameTopology(Tree<any> tree)'
      arguments:
        - label: 'tree'
          description: 'The reference tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
    - name: 'isBinary'
      return_type: 'Bool'
      usage: 'isBinary()'
      arguments:
    - name: 'isContainedInClade'
      return_type: 'Bool'
      usage: 'isContainedInClade(Natural<any> node, Clade<any> clade)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'isInternal'
      return_type: 'Bool'
      usage: 'isInternal(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'makeUltrametric'
      return_type: 'void'
      usage: 'makeUltrametric()'
      arguments:
    - name: 'meanInverseES'
      return_type: 'RealPos'
      usage: 'meanInverseES(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the mean inverse ES metric.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nnodes'
      return_type: 'Natural'
      usage: 'nnodes()'
      arguments:
    - name: 'nodeName'
      return_type: 'String'
      usage: 'nodeName(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'ntips'
      return_type: 'Natural'
      usage: 'ntips()'
      arguments:
    - name: 'offset'
      return_type: 'void'
      usage: 'offset(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The offset factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'parent'
      return_type: 'Natural'
      usage: 'parent(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'removeDuplicateTaxa'
      return_type: 'void'
      usage: 'removeDuplicateTaxa()'
      arguments:
    - name: 'reroot'
      return_type: 'void'
      usage: 'reroot(String<any> leaf)'
      arguments:
        - label: 'leaf'
          description: 'The outgroup leaf.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'rescale'
      return_type: 'void'
      usage: 'rescale(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The scaling factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'setBranchLength'
      return_type: 'void'
      usage: 'setBranchLength(Natural<any> index, RealPos<any> value)'
      arguments:
        - label: 'index'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'value'
          description: 'The new branch length value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'setNegativeConstraint'
      return_type: 'void'
      usage: 'setNegativeConstraint(Bool<any> flag)'
      arguments:
        - label: 'flag'
          description: 'Is the tree a negative constraint?.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'tipIndex'
      return_type: 'Natural'
      usage: 'tipIndex(String|Taxon<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the tip/taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'treeLength'
      return_type: 'RealPos'
      usage: 'treeLength()'
      arguments:
  references:
- name: 'CharacterHistoryRateModifier'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
  references:
- name: 'CladogeneticProbabilityMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
  references:
- name: 'CladogeneticSpeciationRateMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
  references:
- name: 'ContinuousCharacterData'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'ModelObject'
    - 'RevObject'
  constructor:
  methods:
    - name: '[]'
      return_type: 'ContinuousTaxonData'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'addMissingTaxa'
      return_type: 'void'
      usage: 'addMissingTaxa(String|Taxon|String[]|Taxon[]<any> taxon)'
      arguments:
        - label: 'taxon'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'excludeAll'
      return_type: 'void'
      usage: 'excludeAll()'
      arguments:
    - name: 'excludeCharacter'
      return_type: 'void'
      usage: 'excludeCharacter(Natural<any> pos)'
      arguments:
        - label: 'pos'
          description: 'The position of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'excludeCharacter'
      return_type: 'void'
      usage: 'excludeCharacter(Natural[]<any> )'
      arguments:
        - label:
          description: 'A vector of character positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'excludeTaxa'
      return_type: 'void'
      usage: 'excludeTaxa(String|Taxon<any> taxon)'
      arguments:
        - label: 'taxon'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'excludeTaxa'
      return_type: 'void'
      usage: 'excludeTaxa(String[]|Taxon[]<any> taxa)'
      arguments:
        - label: 'taxa'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'filename'
      return_type: 'String'
      usage: 'filename()'
      arguments:
    - name: 'get'
      return_type: 'Real'
      usage: 'get(Natural<any> i, Natural<any> j)'
      arguments:
        - label: 'i'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'j'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'getIncludedCharacterIndices'
      return_type: 'Natural[]'
      usage: 'getIncludedCharacterIndices()'
      arguments:
    - name: 'getPairwiseSpeciesDifference'
      return_type: 'DistanceMatrix'
      usage: 'getPairwiseSpeciesDifference(Natural<any> charIndex)'
      arguments:
        - label: 'charIndex'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'getTaxon'
      return_type: 'ContinuousTaxonData'
      usage: 'getTaxon(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'includeAll'
      return_type: 'void'
      usage: 'includeAll()'
      arguments:
    - name: 'includeCharacter'
      return_type: 'void'
      usage: 'includeCharacter(Natural<any> )'
      arguments:
        - label:
          description: 'The position of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'includeCharacter'
      return_type: 'void'
      usage: 'includeCharacter(Natural[]<any> )'
      arguments:
        - label:
          description: 'A vector of character positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'includeTaxa'
      return_type: 'void'
      usage: 'includeTaxa(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'includeTaxa'
      return_type: 'void'
      usage: 'includeTaxa(String[]<any> names)'
      arguments:
        - label: 'names'
          description: 'The names of the taxa.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'isResolved'
      return_type: 'Bool'
      usage: 'isResolved(Natural<any> taxonIndex, Natural<any> charIndex)'
      arguments:
        - label: 'taxonIndex'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'charIndex'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'isSequenceMissing'
      return_type: 'Bool'
      usage: 'isSequenceMissing(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'maxDifference'
      return_type: 'Real'
      usage: 'maxDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'maxSpeciesDifference'
      return_type: 'Real'
      usage: 'maxSpeciesDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'meanDifference'
      return_type: 'Real'
      usage: 'meanDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'meanSpeciesDifference'
      return_type: 'Real'
      usage: 'meanSpeciesDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'meanValue'
      return_type: 'Real'
      usage: 'meanValue(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'minDifference'
      return_type: 'Real'
      usage: 'minDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'minSpeciesDifference'
      return_type: 'Real'
      usage: 'minSpeciesDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nchar'
      return_type: 'Natural'
      usage: 'nchar()'
      arguments:
    - name: 'ntaxa'
      return_type: 'Natural'
      usage: 'ntaxa()'
      arguments:
    - name: 'percentageMissing'
      return_type: 'Probability'
      usage: 'percentageMissing(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'removeTaxa'
      return_type: 'void'
      usage: 'removeTaxa(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'removeTaxa'
      return_type: 'void'
      usage: 'removeTaxa(String[]<any> names)'
      arguments:
        - label: 'names'
          description: 'The names of the taxa.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'setHomeologPhase'
      return_type: 'void'
      usage: 'setHomeologPhase(String<any> data_name, String<any> tip_name)'
      arguments:
        - label: 'data_name'
          description: 'The name used in the character alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'tip_name'
          description: 'The tip name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'setTaxonObject'
      return_type: 'void'
      usage: 'setTaxonObject(String<any> current, Taxon<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon'
          default:
          options:
    - name: 'show'
      return_type: 'void'
      usage: 'show()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'taxonIndex'
      return_type: 'Natural'
      usage: 'taxonIndex(String<any> name)'
      arguments:
        - label: 'name'
          description: 'he name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'var'
      return_type: 'RealPos'
      usage: 'var(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'varDifference'
      return_type: 'Real'
      usage: 'varDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'varSpeciesDifference'
      return_type: 'Real'
      usage: 'varSpeciesDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'withinSpeciesVar'
      return_type: 'RealPos'
      usage: 'withinSpeciesVar(Natural<any> species, Natural<any> site)'
      arguments:
        - label: 'species'
          description: 'The index of the species.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'CorrespondenceAnalysis'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'CorrespondenceAnalysis(MatrixReal<any> data, Natural<any> numAxes, RealPos<any> tolerance)'
      arguments:
        - label: 'data'
          description: 'The matrix of numerical values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'MatrixReal'
          default:
          options:
        - label: 'numAxes'
          description: 'The number of principle components.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tolerance'
          description: 'The allowed machine tolerance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1e-07'
          options:
  methods:
    - name: 'columnCoordinates'
      return_type: 'MatrixReal'
      usage: 'columnCoordinates()'
      arguments:
    - name: 'columnWeights'
      return_type: 'RealPos[]'
      usage: 'columnWeights()'
      arguments:
    - name: 'principalAxes'
      return_type: 'MatrixReal'
      usage: 'principalAxes()'
      arguments:
    - name: 'rank'
      return_type: 'Natural'
      usage: 'rank()'
      arguments:
    - name: 'rowCoordinates'
      return_type: 'MatrixReal'
      usage: 'rowCoordinates()'
      arguments:
  references:
- name: 'DistanceMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
    - name: 'getElement'
      return_type: 'Real'
      usage: 'getElement(Natural<any> i, Natural<any> j)'
      arguments:
        - label: 'i'
          description: 'The row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'j'
          description: 'The column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'matrix'
      return_type: 'MatrixReal'
      usage: 'matrix()'
      arguments:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'setElement'
      return_type: 'void'
      usage: 'setElement(Natural<any> i, Natural<any> j, Real<any> v)'
      arguments:
        - label: 'i'
          description: 'The row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'j'
          description: 'The column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'v'
          description: 'The value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Real'
          default:
          options:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'symmetricMatrix'
      return_type: 'MatrixRealSymmetric'
      usage: 'symmetricMatrix()'
      arguments:
  references:
- name: 'HillClimber'
  title: 'Hill-Climber analysis object'
  aliases:
  description: 'The HillClimber analysis object keeps a model and the associated moves and monitors. The object is used to run Markov chain Monte Carlo (HillClimber) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  details: ' The HillClimber analysis object produced by a call to this function keeps copies of the model and the associated moves and monitors. The HillClimber analysis object is used to run Markov chain Monte Carlo (HillClimber) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  example: |
    # Create a simple model (unclamped)
    a ~ exponential(1)
    mymodel = model(a)
    
    # Create a move vector and a monitor vector
    moves[1] = mvScale(a, lambda=1.0, weight=1.0)
    monitors[1] = mnFile(a,"output/out.log")
    
    # Create an HillClimber object
    myHillClimberObject = HillClimber( mymodel, monitors, moves)
    
    # Run a short analysis
    myHillClimberObject.burnin( generations = 400, tuningInterval = 100)
    myHillClimberObject.run( generations = 400)
    
    # print the summary of the operators (now tuned)
    myHillClimberObject.operatorSummary()
  authors:
  see_also: 'SimulatedAnnealing'
  type_spec:
    - 'MaximumLikelihoodAnalysis'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'HillClimber(Model<any> model, Monitor[]<any> monitors, Move[]<any> moves, String<any> moveschedule {valid options: "sequential"|"random"|"single"})'
      arguments:
        - label: 'model'
          description: 'The model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Model'
          default:
          options:
        - label: 'monitors'
          description: 'The monitors used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Monitor[]'
          default:
          options:
        - label: 'moves'
          description: 'The moves used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Move[]'
          default:
          options:
        - label: 'moveschedule'
          description: 'The strategy how the moves are used.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'random'
          options:
            - 'sequential'
            - 'random'
            - 'single'
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run(RealPos<any> epsilon)'
      arguments:
        - label: 'epsilon'
          description: 'The minimum improvement in the last interval.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.001'
          options:
    - name: 'variable'
      return_type: 'RevObject'
      usage: 'variable(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the variable.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
  references:
- name: 'Integer'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
  references:
- name: 'MatrixBoolean'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
    - name: '[]'
      return_type: 'Bool[]'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'column'
      return_type: 'Bool[]'
      usage: 'column(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'ncolumns'
      return_type: 'Natural'
      usage: 'ncolumns()'
      arguments:
    - name: 'nrows'
      return_type: 'Natural'
      usage: 'nrows()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
  references:
- name: 'MatrixReal'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
    - name: '[]'
      return_type: 'Real[]'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'column'
      return_type: 'Real[]'
      usage: 'column(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'max'
      return_type: 'Real'
      usage: 'max()'
      arguments:
    - name: 'min'
      return_type: 'Real'
      usage: 'min()'
      arguments:
    - name: 'ncolumns'
      return_type: 'Natural'
      usage: 'ncolumns()'
      arguments:
    - name: 'nrows'
      return_type: 'Natural'
      usage: 'nrows()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
  references:
- name: 'MatrixRealPos'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'MatrixReal'
    - 'RevObject'
  constructor:
  methods:
    - name: '[]'
      return_type: 'RealPos[]'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'column'
      return_type: 'RealPos[]'
      usage: 'column(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'max'
      return_type: 'RealPos'
      usage: 'max()'
      arguments:
    - name: 'min'
      return_type: 'RealPos'
      usage: 'min()'
      arguments:
    - name: 'ncolumns'
      return_type: 'Natural'
      usage: 'ncolumns()'
      arguments:
    - name: 'nrows'
      return_type: 'Natural'
      usage: 'nrows()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
  references:
- name: 'MatrixRealSymmetric'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'MatrixReal'
    - 'RevObject'
  constructor:
  methods:
    - name: '[]'
      return_type: 'Real[]'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'column'
      return_type: 'Real[]'
      usage: 'column(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'diagonal'
      return_type: 'RealPos[]'
      usage: 'diagonal()'
      arguments:
    - name: 'max'
      return_type: 'Real'
      usage: 'max()'
      arguments:
    - name: 'min'
      return_type: 'Real'
      usage: 'min()'
      arguments:
    - name: 'ncolumns'
      return_type: 'Natural'
      usage: 'ncolumns()'
      arguments:
    - name: 'nrows'
      return_type: 'Natural'
      usage: 'nrows()'
      arguments:
    - name: 'precision'
      return_type: 'MatrixRealSymmetric'
      usage: 'precision()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'upperTriangle'
      return_type: 'RealPos[]'
      usage: 'upperTriangle()'
      arguments:
  references:
- name: 'Natural'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Integer'
    - 'RevObject'
  constructor:
  methods:
  references:
- name: 'Probability'
  title:
  aliases:
  description: 'A Probability is a real value between 0.0 and 1.0'
  details:
  example: |
    # Create a RealPos
    x <- 12/13
    type(x)
    
    # Convert the RealPos to Probability
    y := Probability(x)
    type(y)
  authors:
  see_also:
  type_spec:
    - 'RealPos'
    - 'Real'
    - 'RevObject'
  constructor:
    - usage: 'Probability(Real<any> x)'
      arguments:
        - label: 'x'
          description: 'The value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
  methods:
  references:
- name: 'RateGenerator'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
    - name: 'getTransitionProbabilities'
      return_type: 'RealPos[][]'
      usage: 'getTransitionProbabilities(RealPos<any> rate, RealPos<any> startAge, RealPos<any> endAge)'
      arguments:
        - label: 'rate'
          description: 'The rate of the process (or duration of the process assuming rate=1).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'startAge'
          description: 'The start age of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'endAge'
          description: 'The end age of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0'
          options:
  references:
- name: 'Real'
  title: 'Real number data type'
  aliases:
  description: |
    The real number data type can hold any real number value.
    Not to be confused with integers which are whole numbers, or
    `Natural` which are the counting numbers (e.g. 1,2,3,...).
  details:
  example: |
    a = 1.1
    b = 1.3
    c = a + b
    # c will be 2.4
  authors:
  see_also: '`RealPos`, `Integer`, `Natural`, `Probability`'
  type_spec: 'RevObject'
  constructor:
  methods:
  references:
- name: 'RealPos'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Real'
    - 'RevObject'
  constructor:
  methods:
  references:
- name: 'RevObject'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
  constructor:
  methods:
  references:
- name: 'Simplex'
  title:
  aliases: 'simplex'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'ModelObject'
    - 'RevObject'
  constructor:
    - usage: 'Simplex(RealPos[]<any> x, RealPos<any> x1, RealPos<any> x2, RealPos ...)'
      arguments:
        - label: 'x'
          description: 'A vector of values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'x1'
          description: 'first value'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'x2'
          description: 'second value'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label:
          description: 'additional values'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
    - name: '[]'
      return_type: 'Probability'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the element.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'StochasticMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'MatrixReal'
    - 'RevObject'
  constructor:
  methods:
    - name: '[]'
      return_type: 'RealPos[]'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'column'
      return_type: 'RealPos[]'
      usage: 'column(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'ncolumns'
      return_type: 'Natural'
      usage: 'ncolumns()'
      arguments:
    - name: 'nrows'
      return_type: 'Natural'
      usage: 'nrows()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
  references:
- name: 'String'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec: 'RevObject'
  constructor:
  methods:
    - name: '[]'
      return_type: 'String'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the element.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'charAt'
      return_type: 'String'
      usage: 'charAt(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the element.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'find'
      return_type: 'Natural'
      usage: 'find(String<any> substr)'
      arguments:
        - label: 'substr'
          description: 'The substring for which we want to find the position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'indexOf'
      return_type: 'Natural'
      usage: 'indexOf(String<any> substr)'
      arguments:
        - label: 'substr'
          description: 'The substring for which we want to find the position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'substr'
      return_type: 'String'
      usage: 'substr(Natural<any> begin, Natural<any> end)'
      arguments:
        - label: 'begin'
          description: 'The index of the first character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'end'
          description: 'The index of the last character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'TimeTree'
  title: 'Tree datatype'
  aliases:
  description: 'The Tree datatype stores information to describe the shared ancestryof a taxon set. Information includes taxon labels, topology, nodecount, and branch lengths. Tree objects also possess several usefulmethods to traverse and manipulate the Tree''s value.'
  details:
  example:
  authors:
  see_also:
    - 'TimeTree'
    - 'BranchLengthTree'
  type_spec:
    - 'Tree'
    - 'RevObject'
  constructor:
  methods:
    - name: 'branchLength'
      return_type: 'RealPos'
      usage: 'branchLength(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'calculateEDR'
      return_type: 'RealPos[]'
      usage: 'calculateEDR()'
      arguments:
    - name: 'calculateMNTD'
      return_type: 'Real'
      usage: 'calculateMNTD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Nearest Taxon Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MNTD z-score or the observed MNTD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MNTD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'calculateMPD'
      return_type: 'Real'
      usage: 'calculateMPD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Phylogenetic Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MPD z-score or the observed MPD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MPD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'child'
      return_type: 'Natural'
      usage: 'child(Natural<any> node, Natural<any> index)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'index'
          description: 'The index of the child of this node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'collapseNegativeBranches'
      return_type: 'void'
      usage: 'collapseNegativeBranches(RealPos<any> length)'
      arguments:
        - label: 'length'
          description: 'The new length of all negative branches.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
    - name: 'colless'
      return_type: 'Natural'
      usage: 'colless()'
      arguments:
    - name: 'containsClade'
      return_type: 'Bool'
      usage: 'containsClade(Clade<any> clade)'
      arguments:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'dropFossils'
      return_type: 'void'
      usage: 'dropFossils()'
      arguments:
    - name: 'dropTip'
      return_type: 'void'
      usage: 'dropTip(String|Taxon<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'fitchScore'
      return_type: 'Natural'
      usage: 'fitchScore(AbstractHomologousDiscreteCharacterData<any> characters)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Fitch Score.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
    - name: 'gammaStatistic'
      return_type: 'Real'
      usage: 'gammaStatistic()'
      arguments:
    - name: 'getClade'
      return_type: 'Clade'
      usage: 'getClade(Taxon[]<any> clade)'
      arguments:
        - label: 'clade'
          description: 'Vector of some of the taxa included in the clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
    - name: 'getFossils'
      return_type: 'Taxon[]'
      usage: 'getFossils()'
      arguments:
    - name: 'getIndices'
      return_type: 'Natural[]'
      usage: 'getIndices()'
      arguments:
    - name: 'getInverseES'
      return_type: 'RealPos[]'
      usage: 'getInverseES()'
      arguments:
    - name: 'getPSSP'
      return_type: 'RealPos[]'
      usage: 'getPSSP(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment to use when computing the Parsimoniously Same State Paths (PSSP).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'hasSameTopology'
      return_type: 'Bool'
      usage: 'hasSameTopology(Tree<any> tree)'
      arguments:
        - label: 'tree'
          description: 'The reference tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
    - name: 'isBinary'
      return_type: 'Bool'
      usage: 'isBinary()'
      arguments:
    - name: 'isContainedInClade'
      return_type: 'Bool'
      usage: 'isContainedInClade(Natural<any> node, Clade<any> clade)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'isInternal'
      return_type: 'Bool'
      usage: 'isInternal(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'isRoot'
      return_type: 'Bool'
      usage: 'isRoot(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'makeUltrametric'
      return_type: 'void'
      usage: 'makeUltrametric()'
      arguments:
    - name: 'meanInverseES'
      return_type: 'RealPos'
      usage: 'meanInverseES(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the mean inverse ES metric.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nnodes'
      return_type: 'Natural'
      usage: 'nnodes()'
      arguments:
    - name: 'nodeAge'
      return_type: 'RealPos'
      usage: 'nodeAge(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'nodeName'
      return_type: 'String'
      usage: 'nodeName(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'ntips'
      return_type: 'Natural'
      usage: 'ntips()'
      arguments:
    - name: 'numSampledAncestors'
      return_type: 'Natural'
      usage: 'numSampledAncestors()'
      arguments:
    - name: 'offset'
      return_type: 'void'
      usage: 'offset(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The offset factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'parent'
      return_type: 'Natural'
      usage: 'parent(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'removeDuplicateTaxa'
      return_type: 'void'
      usage: 'removeDuplicateTaxa()'
      arguments:
    - name: 'rescale'
      return_type: 'void'
      usage: 'rescale(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The scaling factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'rootAge'
      return_type: 'RealPos'
      usage: 'rootAge()'
      arguments:
    - name: 'setBranchLength'
      return_type: 'void'
      usage: 'setBranchLength(Natural<any> index, RealPos<any> value)'
      arguments:
        - label: 'index'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'value'
          description: 'The new branch length value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'setNegativeConstraint'
      return_type: 'void'
      usage: 'setNegativeConstraint(Bool<any> flag)'
      arguments:
        - label: 'flag'
          description: 'Is the tree a negative constraint?.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'tipIndex'
      return_type: 'Natural'
      usage: 'tipIndex(String|Taxon<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the tip/taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'treeLength'
      return_type: 'RealPos'
      usage: 'treeLength()'
      arguments:
    - name: 'unroot'
      return_type: 'BranchLengthTree'
      usage: 'unroot()'
      arguments:
  references:
- name: 'Tree'
  title: 'Tree datatype'
  aliases:
  description: 'The Tree datatype stores information to describe the shared ancestryof a taxon set. Information includes taxon labels, topology, nodecount, and branch lengths. Tree objects also possess several usefulmethods to traverse and manipulate the Tree''s value.'
  details:
  example:
  authors:
  see_also:
    - 'TimeTree'
    - 'BranchLengthTree'
  type_spec: 'RevObject'
  constructor:
  methods:
    - name: 'branchLength'
      return_type: 'RealPos'
      usage: 'branchLength(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'calculateEDR'
      return_type: 'RealPos[]'
      usage: 'calculateEDR()'
      arguments:
    - name: 'calculateMNTD'
      return_type: 'Real'
      usage: 'calculateMNTD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Nearest Taxon Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MNTD z-score or the observed MNTD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MNTD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'calculateMPD'
      return_type: 'Real'
      usage: 'calculateMPD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Phylogenetic Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MPD z-score or the observed MPD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MPD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'child'
      return_type: 'Natural'
      usage: 'child(Natural<any> node, Natural<any> index)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'index'
          description: 'The index of the child of this node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'containsClade'
      return_type: 'Bool'
      usage: 'containsClade(Clade<any> clade)'
      arguments:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'dropTip'
      return_type: 'void'
      usage: 'dropTip(String|Taxon<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'fitchScore'
      return_type: 'Natural'
      usage: 'fitchScore(AbstractHomologousDiscreteCharacterData<any> characters)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Fitch Score.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
    - name: 'getClade'
      return_type: 'Clade'
      usage: 'getClade(Taxon[]<any> clade)'
      arguments:
        - label: 'clade'
          description: 'Vector of some of the taxa included in the clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
    - name: 'getIndices'
      return_type: 'Natural[]'
      usage: 'getIndices()'
      arguments:
    - name: 'getInverseES'
      return_type: 'RealPos[]'
      usage: 'getInverseES()'
      arguments:
    - name: 'getPSSP'
      return_type: 'RealPos[]'
      usage: 'getPSSP(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment to use when computing the Parsimoniously Same State Paths (PSSP).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'hasSameTopology'
      return_type: 'Bool'
      usage: 'hasSameTopology(Tree<any> tree)'
      arguments:
        - label: 'tree'
          description: 'The reference tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
    - name: 'isBinary'
      return_type: 'Bool'
      usage: 'isBinary()'
      arguments:
    - name: 'isContainedInClade'
      return_type: 'Bool'
      usage: 'isContainedInClade(Natural<any> node, Clade<any> clade)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'isInternal'
      return_type: 'Bool'
      usage: 'isInternal(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'makeUltrametric'
      return_type: 'void'
      usage: 'makeUltrametric()'
      arguments:
    - name: 'meanInverseES'
      return_type: 'RealPos'
      usage: 'meanInverseES(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the mean inverse ES metric.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nnodes'
      return_type: 'Natural'
      usage: 'nnodes()'
      arguments:
    - name: 'nodeName'
      return_type: 'String'
      usage: 'nodeName(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'ntips'
      return_type: 'Natural'
      usage: 'ntips()'
      arguments:
    - name: 'offset'
      return_type: 'void'
      usage: 'offset(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The offset factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'parent'
      return_type: 'Natural'
      usage: 'parent(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'removeDuplicateTaxa'
      return_type: 'void'
      usage: 'removeDuplicateTaxa()'
      arguments:
    - name: 'rescale'
      return_type: 'void'
      usage: 'rescale(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The scaling factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'setBranchLength'
      return_type: 'void'
      usage: 'setBranchLength(Natural<any> index, RealPos<any> value)'
      arguments:
        - label: 'index'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'value'
          description: 'The new branch length value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'setNegativeConstraint'
      return_type: 'void'
      usage: 'setNegativeConstraint(Bool<any> flag)'
      arguments:
        - label: 'flag'
          description: 'Is the tree a negative constraint?.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'tipIndex'
      return_type: 'Natural'
      usage: 'tipIndex(String|Taxon<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the tip/taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'treeLength'
      return_type: 'RealPos'
      usage: 'treeLength()'
      arguments:
  references:
- name: 'beca'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'beca(String|String[]<any> filename, String<any> delimiter)'
      arguments:
        - label: 'filename'
          description: 'The name of the file with the parameter samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'delimiter'
          description: 'The delimiter/separator between values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run()'
      arguments:
    - name: 'setBurninMethod'
      return_type: 'void'
      usage: 'setBurninMethod(String<any> method {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'method'
          description: 'The burnin estimation method.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
            - 'ESS'
            - 'SEM'
    - name: 'verbose'
      return_type: 'void'
      usage: 'verbose(Bool<any> x)'
      arguments:
        - label: 'x'
          description: 'Should the output be verbose?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
  references:
- name: 'clade'
  title: 'Clade'
  aliases:
  description: 'A clade is a subtree within a phylogeny.'
  details: 'Clades are defined in terms of a taxon set and a shared tree topology. In phylogenetic analyses, clades are generally used (a) to constrain tree topologies to match provided taxon relationships, (b) to identify the most recent common ancestor of a taxon set within a phylogeny, or (c) to apply node age calibrations on particular nodes in the phylogeny.'
  example: |
    # read in a tree
    phy = readTrees("primates.tre")[1]
    # get taxa from the tree
    taxa = phy.taxa()
    # create a clade for (1,2) using taxon objects
    clade_12 = clade( taxa[1], taxa[2] )
    # create a clade for (1,2,3)
    clade_123 = clade( taxa[3], clade_12 )
    # create a clade for (4,5) using taxon names
    clade_45 = clade( "Taxon_4", "Taxon_5" )
    # create a negative clade constraint
    clade_not_23 = clade( taxa[2], taxa[3], negative=true )
    # create an optional clade constraint
    clade_67 = clade( taxa[6], taxa[7] )
    clade_68 = clade( taxa[6], taxa[8] )
    clade_67_or_68 = clade( clade_67, clade_68, optional_match=true )
  authors:
  see_also:
    - 'dnConstrainedTopology'
    - 'tmrca'
    - 'mrcaIndex'
  type_spec:
    - 'ModelObject'
    - 'RevObject'
  constructor:
    - usage: 'clade(String ..., String[] ..., Clade ..., Taxon ..., Taxon[] ..., RealPos<any> age, Natural<any> missing, Bool<any> negative, Bool<any> optional_match)'
      arguments:
        - label:
          description: 'Taxon names as string values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
        - label:
          description: 'Taxon names as a vector of string values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String[]'
          default:
          options:
        - label:
          description: 'Taxa as clade objects.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade'
          default:
          options:
        - label:
          description: 'Taxon names as taxon values'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon'
          default:
          options:
        - label:
          description: 'Taxon names as a vector of taxons'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'age'
          description: 'The age of the clade (optional).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'missing'
          description: 'Number of missing taxa in the clade (optional).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'negative'
          description: 'Is this a negative clade constraint?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'optional_match'
          description: 'Clade constraint satisfied when any Clade argument matched'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'getAge'
      return_type: 'RealPos'
      usage: 'getAge()'
      arguments:
    - name: 'getNumberOfTaxaMissing'
      return_type: 'Natural'
      usage: 'getNumberOfTaxaMissing()'
      arguments:
    - name: 'getTaxon'
      return_type: 'Taxon'
      usage: 'getTaxon(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'getTaxonName'
      return_type: 'String'
      usage: 'getTaxonName(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'setAge'
      return_type: 'void'
      usage: 'setAge(RealPos<any> a)'
      arguments:
        - label: 'a'
          description: 'The age of the cladea.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
    - name: 'setNumberOfTaxaMissing'
      return_type: 'void'
      usage: 'setNumberOfTaxaMissing(Natural<any> n)'
      arguments:
        - label: 'n'
          description: 'The number of missing taxa.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'size'
      return_type: 'void'
      usage: 'size()'
      arguments:
  references:
- name: 'dfConstant'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'DemographicFunction'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'dfConstant(RealPos<any> theta)'
      arguments:
        - label: 'theta'
          description: 'The population size.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dfExponential'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'DemographicFunction'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'dfExponential(RealPos<any> N0, RealPos<any> N1, RealPos<any> t0, RealPos<any> t1)'
      arguments:
        - label: 'N0'
          description: 'The population size at the beginning of the growth period (towards the present).'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'N1'
          description: 'The population size at the end of the growth period (towards the past).'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 't0'
          description: 'The time of the beginning of the growth period (towards the present).'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 't1'
          description: 'The time of the end of the growth period (towards the past).'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dfLinear'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'DemographicFunction'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'dfLinear(RealPos<any> N0, RealPos<any> N1, RealPos<any> t0, RealPos<any> t1)'
      arguments:
        - label: 'N0'
          description: 'The population size at the beginning of the growth period (towards the present).'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'N1'
          description: 'The population size at the end of the growth period (towards the past).'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 't0'
          description: 'The time of the beginning of the growth period (towards the present).'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 't1'
          description: 'The time of the end of the growth period (towards the past).'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnBernoulli'
  title: 'Bernoulli Distribution'
  aliases:
  description: 'A Bernoulli-distributed random variable takes the value 1 with probability p and the value 0 with probability 1-p.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBernoulli(p)
    x.clamp(1)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnBinomial'
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural'
  constructor:
    - usage: 'dnBernoulli(Probability<any> p)'
      arguments:
        - label: 'p'
          description: 'The probability of success.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnBeta'
  title: 'Beta Distribution'
  aliases:
  description: 'The Beta probability distribution.'
  details: 'The Beta distribution is a probability distribution defined on 0 to 1.'
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBernoulli(p)
    x.clamp(1)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnDirichlet'
  type_spec:
    - 'Distribution__Probability'
    - 'Distribution'
    - 'RevObject'
  domain: 'Probability'
  constructor:
    - usage: 'dnBeta(RealPos<any> alpha, RealPos<any> beta)'
      arguments:
        - label: 'alpha'
          description: 'The alpha shape parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'beta'
          description: 'The beta shape parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnBimodalLognormal'
  title: 'Bimodal Lognormal Distribution'
  aliases:
  description: 'A bimodal lognormal distribution, that is, with probability p a value is distributed according to the first lognormal distribution and with probability 1-p from the second lognormal distribution.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBimodalLognormal(mean1=-1,mean2=1,sd1=0.1,sd2=0.1,p=p)
    x.clamp( exp(1) )
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also:
    - 'dnBimodalNormal'
    - 'dnLognormal'
  type_spec:
    - 'PositiveContinuousDistribution'
    - 'Distribution__RealPos'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos'
  constructor:
    - usage: 'dnBimodalLognormal(Real<any> mean1, Real<any> mean2, RealPos<any> sd1, RealPos<any> sd2, Probability<any> p)'
      arguments:
        - label: 'mean1'
          description: 'The mean (in log-space) of the first lognormal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'mean2'
          description: 'The mean (in log-space) of the second lognormal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd1'
          description: 'The standard deviation of the first lognormal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sd2'
          description: 'The standard deviation of the secind lognormal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'p'
          description: 'The probability to belong to the first distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnBimodalNormal'
  title: 'Bernoulli Distribution'
  aliases:
  description: 'A Bernoulli-distributed random variable takes the value 1 with probability p and the value 0 with probability 1-p.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBimodalNormal(mean1=-1,mean2=1,sd1=0.1,sd2=0.1,p=p)
    x.clamp( 1 )
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also:
    - 'dnBimodalLognormal'
    - 'dnNormal'
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnBimodalNormal(Real<any> mean1, Real<any> mean2, RealPos<any> sd1, RealPos<any> sd2, Probability<any> p)'
      arguments:
        - label: 'mean1'
          description: 'Mean of the first normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'mean2'
          description: 'Mean of the second normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd1'
          description: 'Standard deviation of the first normal distributin.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sd2'
          description: 'Standard deviation of the second normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'p'
          description: 'Probability that the value belongs to the first normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnBinomial'
  title: 'Binomial Distribution'
  aliases: 'dnBinom'
  description: 'Binomial probability distribution of x successes in n trials.'
  details: 'The binomial probability distribution defines the number of success in n trials, where each trial has the same success probability p. The probability is given by (n choose x) p^(x) * (1-p)^(n-p)'
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBinomial(n=10,p)
    x.clamp(8)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnBernoulli'
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural'
  constructor:
    - usage: 'dnBinomial(Probability<any> p, Natural<any> n)'
      arguments:
        - label: 'p'
          description: 'Probability of success.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'n'
          description: 'Number of trials.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnBirthDeath'
  title:
  aliases: 'dnBDP'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnBirthDeath(RealPos<any> lambda, RealPos<any> mu, Probability<any> rho, RealPos<any> rootAge, String<any> samplingStrategy {valid options: "uniform"|"diversified"}, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa, Clade[]<any> incompleteClades)'
      arguments:
        - label: 'lambda'
          description: 'The speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rho'
          description: 'The taxon sampling fraction.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'rootAge'
          description: 'The time of the process starting at the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'samplingStrategy'
          description: 'The sampling strategy of including taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'incompleteClades'
          description: 'Vector of incompletely sampled clades with number of missing species.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnBirthDeathBurstProcess'
  title:
  aliases: 'dnBDBP'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnBirthDeathBurstProcess(RealPos<any> lambda, RealPos<any> mu, Probability<any> beta, RealPos<any> burstTime, Probability<any> rho, RealPos<any> rootAge, String<any> samplingStrategy {valid options: "uniform"|"diversified"}, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa, Clade[]<any> incompleteClades)'
      arguments:
        - label: 'lambda'
          description: 'The speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The piecewise-constant extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'beta'
          description: 'The constant extinction rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'burstTime'
          description: 'The constant extinction rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rho'
          description: 'The taxon sampling fraction(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'rootAge'
          description: 'The time of the process starting at the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'samplingStrategy'
          description: 'The sampling strategy of including taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'incompleteClades'
          description: 'Vector of incompletely sampled clades with number of missing species.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnBirthDeathSamplingTreatment'
  title:
  aliases: 'dnBDSTP'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnBirthDeathSamplingTreatment(RealPos<any> rootAge/originAge, RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, RealPos|RealPos[]<any> phi, RealPos|RealPos[]<any> r, Probability[]<any> Lambda, Probability[]<any> Mu, Probability|Probability[]<any> Phi, Probability[]<any> R, RealPos[]<any> timeline, RealPos[]<any> lambdaTimeline, RealPos[]<any> muTimeline, RealPos[]<any> phiTimeline, RealPos[]<any> rTimeline, RealPos[]<any> LambdaTimeline, RealPos[]<any> MuTimeline, RealPos[]<any> PhiTimeline, String<any> condition {valid options: "time"|"survival"|"sampling"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The birth rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The death rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'phi'
          description: 'The serial sampling rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'r'
          description: 'The probabilit(y|ies) of death upon sampling (treatment).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'Lambda'
          description: 'The episodic birth burst probabilities.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability[]'
          default: 'NULL'
          options:
        - label: 'Mu'
          description: 'The episodic death burst (mass extinction) survival probabilities.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability[]'
          default: 'NULL'
          options:
        - label: 'Phi'
          description: 'The probability of sampling taxa at sampling events (at present only if input is scalar).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'R'
          description: 'The treatment probabilities for the sampling events (excluding sampling at present).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability[]'
          default: 'NULL'
          options:
        - label: 'timeline'
          description: 'The rate interval change times of the piecewise constant process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'lambdaTimeline'
          description: 'The rate interval change times of the speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'muTimeline'
          description: 'The rate interval change times of the extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'phiTimeline'
          description: 'The rate interval change times of the sampling rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'rTimeline'
          description: 'The rate interval change times of the (serial) treatment probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'LambdaTimeline'
          description: 'The rate interval change times of the speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'MuTimeline'
          description: 'The rate interval change times of the extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'PhiTimeline'
          description: 'The rate interval change times of the sampling rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'sampling'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnBivariatePoisson'
  title: 'Bivariate Poisson Distribution'
  aliases:
  description: 'A Bivariate Poisson distribution defines probabilities for pairs of natural numbers.'
  details:
  example: |
    th1 ~ dnUniform(0.0,10.0)
    th2 ~ dnUniform(0.0,10.0)
    th0 ~ dnUniform(0.0,10.0)
     ~ dnBivariatePoisson(th1, th2, th0)
    x.clamp([3, 3, 3])
    oves[1] = mvSlide(th1, delta=0.01, weight=1.0)
    moves[2] = mvSlide(th2, delta=0.01, weight=1.0)
    oves[3] = mvSlide(th0, delta=0.01, weight=1.0)
    monitors[1] = mnScreen(printgen=1000,  th0)
    ymodel = model(th1)
    mymcmc = mcmc(mymodel, monitors, moves)
    ymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnPoisson'
  type_spec:
    - 'Distribution__Natural'
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural[]'
  constructor:
    - usage: 'dnBivariatePoisson(RealPos<any> theta1, RealPos<any> theta2, RealPos<any> theta0)'
      arguments:
        - label: 'theta1'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'theta2'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'theta0'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
    - citation: 'Karlis D, Ntzoufras J (2003). Bayesian and Non-Bayesian Analysis of Soccer Data using Bivariate Poisson Regression Models.'
      doi:
      url:
- name: 'dnCBDSP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCBDSP(RealPos<any> rootAge, RealPos<any> rootLambda, RealPos<any> rootMu, Distribution__RealPos<any> lambda, Distribution__RealPos<any> mu, RealPos<any> delta, Probability<any> rho, String<any> condition {valid options: "time"|"survival"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge'
          description: 'The age of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rootLambda'
          description: 'The speciation rate at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rootMu'
          description: 'The extinction rate at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The prior distribution for the speciation rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__RealPos'
          default: 'NULL'
          options:
        - label: 'mu'
          description: 'The prior distribution for the extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__RealPos'
          default: 'NULL'
          options:
        - label: 'delta'
          description: 'The rate of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'condition'
          description: 'The condition of the birth-death process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'survival'
          options:
            - 'time'
            - 'survival'
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnCDBDP'
  title:
  aliases:
    - 'dnCDSSBDP'
    - 'dnCDFBDP'
    - 'dnBirthDeathMultiRate'
    - 'dnCDCladoBDP'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCDBDP(RealPos<any> rootAge/originAge, CladogeneticSpeciationRateMatrix|RealPos[]<any> speciationRates/lambda/cladoEventMap, RealPos[]<any> extinctionRates/mu, RealPos[]<any> psi/phi, RateGenerator<any> Q, RealPos<any> delta, Simplex<any> pi, Probability<any> rho, String<any> condition {valid options: "time"|"survival"}, RealPos<any> nTimeSlices, String<any> simulateCondition {valid options: "startTime"|"numTips"|"tipStates"|"tree"}, Natural<any> minNumLineages, Natural<any> maxNumLineages, Natural<any> exactNumLineages, RealPos<any> maxTime, Bool<any> pruneExtinctLineages, Bool<any> allowRateShiftsAtExtinctLineages)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'speciationRates/lambda/cladoEventMap'
          description: 'The vector of speciation rates (for anagenetic-only models), or the map of speciation rates to cladogenetic event types.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'CladogeneticSpeciationRateMatrix'
          default:
          options:
        - label: 'extinctionRates/mu'
          description: 'The vector of extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'psi/phi'
          description: 'The vector of serial sampling rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'Q'
          description: 'The rate matrix of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default: 'NULL'
          options:
        - label: 'delta'
          description: 'The rate-factor of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'pi'
          description: 'State frequencies at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'condition'
          description: 'The condition of the birth-death process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'nTimeSlices'
          description: 'The number of time slices for the numeric ODE.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '500'
          options:
        - label: 'simulateCondition'
          description: 'The conditions under which to simulate.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'startTime'
          options:
            - 'startTime'
            - 'numTips'
            - 'tipStates'
            - 'tree'
        - label: 'minNumLineages'
          description: 'The minimum number of lineages to simulate; applied under the startTime condition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'maxNumLineages'
          description: 'The maximum number of lineages to simulate; applied under the startTime condition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '500'
          options:
        - label: 'exactNumLineages'
          description: 'The exact number of lineages to simulate; applied under the numTips condition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '100'
          options:
        - label: 'maxTime'
          description: 'Maximum time for lineages to coalesce when simulating; applied under the numTips and tipStates condition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1000'
          options:
        - label: 'pruneExtinctLineages'
          description: 'When simulating should extinct lineages be pruned off?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'allowRateShiftsAtExtinctLineages'
          description: 'Should we allow rate shifts to occur on extinct lineages?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnCategorical'
  title: 'The Categorical Distribution'
  aliases: 'dnCat'
  description: 'The categorical distribution, sometimes referred to as the generalized Bernoulli distribution. It describes the probability of one of K different outcomes, labeled from 1 to K, with each outcome probability separately specified.'
  details: |
    The argument to the constructor is a simplex containing the probabilities of the outcomes. The outcomes are labeled from 1 to K, where K is the number of elements in the simplex. Outcome i has probability specified by component i in the simplex.
    
    A typical scenario where a categorical variable is used is in the definition of a variable drawn from a mixture. A vector of mixture components is set up first, and then a stochastic variable drawn from a categorical distribution is used as an index in a deterministic assignment that points to a component in the mixture. See example below.
  example: |
    # Define a stochastic variable x that is drawn from
    # a categorical distribution with 4 categories, each
    # category having the same probability, then examine
    # the value of x.
    x ~ dnCat( simplex(1,1,1,1) )
    x
    
    # Draw 10 values from the distribution and place them
    # in a vector a, then examine a.
    for ( i in 1:10 ) {
        a[i] <- x
        x.redraw()
    }
    a
    
    # Use x in defining a deterministic variable y taking
    # on values from a mixture of RealPos values representing
    # rates from a discretized scaled gamma distribution
    # with four categories.
    shape ~ dnExp( 10.0 )
    rates := fnDiscretizeGamma( shape, shape, 4 )
    y := rates[x]
  authors:
  see_also: 'dnBinomial'
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural'
  constructor:
    - usage: 'dnCategorical(Simplex<any> p)'
      arguments:
        - label: 'p'
          description: 'The probability for each category.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default:
          options:
  methods:
  references:
- name: 'dnCauchy'
  title: 'Cauchy Distribution'
  aliases: 'dnLorentz'
  description: 'Cauchy distribution with location equal to ‘location’ and scale equal to ‘scale’.'
  details: |
    The Cauchy distribution has density:
    
    f(x) = 1/(pi * scale) * 1/(1 + x-(location/scale)^2)
  example: |
    # we simulate some obversations
    x <- rCauchy(n=10,location=0,scale=1)
    # let's see what the mean and the variance are.
    The mean will not converge with more samples, the Cauchy family has no moments.
    mean(x)
    var(x)
    sd(x)
  authors:
  see_also:
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnCauchy(Real<any> location, RealPos<any> scale)'
      arguments:
        - label: 'location'
          description: 'The location parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'scale'
          description: 'The scale parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnChisq'
  title: 'Chi-Square Distribution'
  aliases:
  description: 'The chi-square probability distribution.'
  details:
  example: |
    # The most important use of the chi-square distribution
    # is arguable the quantile function.
    # You can access it the following way:
    df <- 10
    a := qchisq(0.025, df)
    a
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos'
  constructor:
    - usage: 'dnChisq(Natural<any> df)'
      arguments:
        - label: 'df'
          description: 'The degrees of freedom.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnCoalescent'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCoalescent(RealPos<any> theta, Taxon[]<any> taxa, Clade[]<any> constraints)'
      arguments:
        - label: 'theta'
          description: 'The constant population size.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The taxa used when drawing a random tree.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'constraints'
          description: 'The topological constraints strictly enforced.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnCoalescentDemography'
  title:
  aliases: 'dnHeterochronousCoalescentDemography'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCoalescentDemography(DemographicFunction[]<any> df, RealPos[]<any> changePoints, Taxon[]<any> taxa, Clade[]<any> constraints)'
      arguments:
        - label: 'df'
          description: 'The vector of demographic functions.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'DemographicFunction[]'
          default:
          options:
        - label: 'changePoints'
          description: 'The times when the demographic function changes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'constraints'
          description: 'The topological constraints strictly enforced.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnCoalescentSkyline'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCoalescentSkyline(RealPos[]<any> theta, RealPos[]<any> times, String<any> method {valid options: "events"|"uniform"|"specified"}, Taxon[]<any> taxa, Clade[]<any> constraints)'
      arguments:
        - label: 'theta'
          description: 'A vector of per interval population sizes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'times'
          description: 'A vector of times for the intervals, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'method'
          description: 'The method how intervals are defined.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'events'
          options:
            - 'events'
            - 'uniform'
            - 'specified'
        - label: 'taxa'
          description: 'The taxa used when drawing a random tree.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'constraints'
          description: 'The strictly enforced topology constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnCompleteBirthDeath'
  title:
  aliases: 'dnCompleteBDP'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCompleteBirthDeath(RealPos<any> rootAge/originAge/mrcaAge, RealPos<any> lambda, RealPos<any> mu, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge/originAge/mrcaAge'
          description: 'The start age of the process, either the root age, mrca age or the origin time.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The constant speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The constant extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnConstrainedNodeAge'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnConstrainedNodeAge(Distribution__TimeTree<any> treeDistribution, Clade[][]<any> constraints)'
      arguments:
        - label: 'treeDistribution'
          description: 'The base distribution for the tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The node Age constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[][]'
          default:
          options:
  methods:
  references:
- name: 'dnConstrainedNodeOrder'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnConstrainedNodeOrder(Distribution__TimeTree<any> treeDistribution, RlRelativeNodeAgeConstraints<any> constraints)'
      arguments:
        - label: 'treeDistribution'
          description: 'The base distribution for the tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The node order constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RlRelativeNodeAgeConstraints'
          default:
          options:
  methods:
  references:
- name: 'dnConstrainedTopology'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnConstrainedTopology(Distribution__TimeTree<any> treeDistribution, Clade[]<any> constraints, TimeTree|TimeTree[]<any> backbone, Bool<any> inverse)'
      arguments:
        - label: 'treeDistribution'
          description: 'The base distribution for the tree.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The topological constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
        - label: 'backbone'
          description: 'The backbone topological constraints.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default: 'NULL'
          options:
        - label: 'inverse'
          description: 'Should the constraint be inverted?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
  references:
- name: 'dnCppNormal'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnCppNormal(RealPos<any> lambda, Real<any> mu, RealPos<any> sigma)'
      arguments:
        - label: 'lambda'
          description: 'The rate of the Poisson distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The mean of the normal distribution'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sigma'
          description: 'The standard deviation of the normal distribution'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnDPP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Real[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real[]'
  constructor:
    - usage: 'dnDPP(RealPos<any> concentration, Distribution__Real<any> baseDistribution, Natural<any> numElements)'
      arguments:
        - label: 'concentration'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'baseDistribution'
          description: 'The base distribution for the per category values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real'
          default:
          options:
        - label: 'numElements'
          description: 'The number of elements drawn from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnDecomposedInvWishart'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'MatrixReal'
  constructor:
    - usage: 'dnDecomposedInvWishart(MatrixRealSymmetric<any> sigma, RealPos[]<any> diagonal, Natural<any> df, RealPos<any> kappa, Natural<any> dim)'
      arguments:
        - label: 'sigma'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default: '[ [ 0.0000 ] ]'
          options:
        - label: 'diagonal'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'df'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'kappa'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'dim'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: '0'
          options:
  methods:
  references:
- name: 'dnDirichlet'
  title: 'Dirichlet Distribution'
  aliases:
  description: 'Dirichlet probability distribution on a simplex.'
  details: 'The Dirichlet probability distribution is the generalization of the Beta distribution. A random variable from a Dirichlet distribution is a simplex, i.e., a vector of probabilities that sum to 1.'
  example: |
    # lets get a draw from a Dirichlet distribution
    a <- [1,1,1,1]   # we could also use rep(1,4)
    b ~ dnDirichlet(a)
    b
    # let check if b really sums to 1
    sum(b)
  authors:
  see_also: 'simplex'
  type_spec:
    - 'Distribution__Simplex'
    - 'Distribution'
    - 'RevObject'
  domain: 'Simplex'
  constructor:
    - usage: 'dnDirichlet(RealPos[]<any> alpha)'
      arguments:
        - label: 'alpha'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
  methods:
  references:
- name: 'dnDiversityDependentYule'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnDiversityDependentYule(RealPos<any> lambda, Natural<any> capacity, RealPos<any> rootAge, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'lambda'
          description: 'The initial speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'capacity'
          description: 'The carrying capacity.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'rootAge'
          description: 'The time of the process since the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'survival'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The names of the taxa used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnDuplicationLoss'
  title: 'Multispecies coalescent Distribution'
  aliases:
  description: 'Multispecies coalescent distribution describing how gene trees can be generated from within a species tree given a constant effective population size. Requires an ultrametric species tree, a single effective population size (a single real positive), and taxa with species and individual names.'
  details: |
    The species tree must be ultrametric.
    The effective population size is constant across the species tree.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
  authors:
  see_also:
    - 'dnMultiSpeciesCoalescentUniformPrior'
    - 'dnMultiSpeciesCoalescentInverseGamma'
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnDuplicationLoss(TimeTree<any> individualTree, RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, Taxon[]<any> taxa)'
      arguments:
        - label: 'individualTree'
          description: 'The individual tree in which the gene trees evolve.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'lambda'
          description: 'The duplication rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The loss rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
    - citation: 'Bayes Estimation of Species Divergence Times and Ancestral Population Sizes Using DNA Sequences From Multiple Loci. Bruce Rannala and Ziheng Yang. GENETICS August 1, 2003 vol. 164 no. 4 1645-1656.'
      doi:
      url: 'http://www.genetics.org/content/164/4/1645.short'
- name: 'dnEmpiricalSample'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Natural[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural[]'
  constructor:
    - usage: 'dnEmpiricalSample(Distribution__Natural<any> baseDistribution)'
      arguments:
        - label: 'baseDistribution'
          description: 'The base distribution for the sampled values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Natural'
          default:
          options:
  methods:
  references:
- name: 'dnEmpiricalTree'
  title:
  aliases:
  description: 'Creates a distribution of trees from a trace of trees.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Create a distribution of trees
    tree ~ dnEmpiricalTree(tree_trace)
    
    # Add an MCMC move
    moves[1] = mvEmpiricalTree(tree)
  authors:
  see_also:
    - 'mvEmpiricalTree'
    - 'treeTrace'
    - 'readTreeTrace'
  type_spec:
    - 'Distribution__Tree'
    - 'Distribution'
    - 'RevObject'
  domain: 'Tree'
  constructor:
    - usage: 'dnEmpiricalTree(TraceTree<any> trace, Trace<any> density)'
      arguments:
        - label: 'trace'
          description: 'The trace of tree samples.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'TraceTree'
          default:
          options:
        - label: 'density'
          description: 'Optional trace of probability density values for each tree.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Trace'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnEpisodicBirthDeath'
  title:
  aliases: 'dnEBDP'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnEpisodicBirthDeath(RealPos|RealPos[]<any> lambdaRates, RealPos|RealPos[]<any> lambdaTimes, RealPos|RealPos[]<any> muRates, RealPos|RealPos[]<any> muTimes, Probability<any> rho, RealPos<any> rootAge, String<any> samplingStrategy {valid options: "uniform"|"diversified"}, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa, Clade[]<any> incompleteClades)'
      arguments:
        - label: 'lambdaRates'
          description: 'The piecewise-constant speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambdaTimes'
          description: 'The speciation rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '[ ]'
          options:
        - label: 'muRates'
          description: 'The piecewise-constant extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'muTimes'
          description: 'The constant extinction rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '[ ]'
          options:
        - label: 'rho'
          description: 'The taxon sampling fraction(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'rootAge'
          description: 'The time of the process starting at the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'samplingStrategy'
          description: 'The sampling strategy of including taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'incompleteClades'
          description: 'Vector of incompletely sampled clades with number of missing species.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnEvent'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Real[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real[]'
  constructor:
    - usage: 'dnEvent(Distribution__Natural<any> eventDistribution, Distribution__Real<any> valueDistribution)'
      arguments:
        - label: 'eventDistribution'
          description: 'The prior on the number of events.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Natural'
          default:
          options:
        - label: 'valueDistribution'
          description: 'The base distribution for the per category values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real'
          default:
          options:
  methods:
  references:
- name: 'dnExponential'
  title: 'Exponential Distribution'
  aliases: 'dnExp'
  description: 'Exponential distribution with rate equal to ‘lambda’.'
  details: |
    The exponential distribution has density:
    
    f(x) = 1/r * exp(-lambda*x)
    
    where lambda is the rate parameter.
  example: |
    # we set a rate parameter
    rate <- 10.0# we create an exponentially distributed random variable
    x ~ dnExponential(lambda=rate)
    # compute the probability of the variable
    x.probability()
  authors:
  see_also:
  type_spec:
    - 'PositiveContinuousDistribution'
    - 'Distribution__RealPos'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos'
  constructor:
    - usage: 'dnExponential(RealPos<any> lambda)'
      arguments:
        - label: 'lambda'
          description: 'The rate ( rate==1/mean) parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
  references:
- name: 'dnExponentialError'
  title:
  aliases: 'dnExpError'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'AverageDistanceMatrix'
  constructor:
    - usage: 'dnExponentialError(AverageDistanceMatrix<any> avgDistMat, DistanceMatrix<any> distMat, RealPos<any> lambda)'
      arguments:
        - label: 'avgDistMat'
          description: 'The average distance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AverageDistanceMatrix'
          default: 'NULL'
          options:
        - label: 'distMat'
          description: 'The distance matrix of the proposed supertree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'DistanceMatrix'
          default: 'NULL'
          options:
        - label: 'lambda'
          description: 'The rate of the exponential distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnFossilizedBirthDeathProcess'
  title:
  aliases:
    - 'dnFBDP'
    - 'dnEFBDP'
    - 'dnEpisodicFossilizedBirthDeathProcess'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnFossilizedBirthDeathProcess(RealPos<any> rootAge/originAge, RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, RealPos|RealPos[]<any> psi, Probability[]<any> Lambda, Probability[]<any> Mu, Probability|Probability[]<any> rho, RealPos[]<any> timeline, RealPos[]<any> lambdaTimeline, RealPos[]<any> muTimeline, RealPos[]<any> psiTimeline, RealPos[]<any> LambdaTimeline, RealPos[]<any> MuTimeline, RealPos[]<any> rhoTimeline, String<any> condition {valid options: "time"|"survival"|"sampling"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The birth rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The death rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'psi'
          description: 'The serial sampling rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'Lambda'
          description: 'The episodic birth burst probabilities.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability[]'
          default: 'NULL'
          options:
        - label: 'Mu'
          description: 'The episodic death burst (mass extinction) survival probabilities.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability[]'
          default: 'NULL'
          options:
        - label: 'rho'
          description: 'The probability of sampling taxa at sampling events (at present only if input is scalar).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'timeline'
          description: 'The rate interval change times of the piecewise constant process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'lambdaTimeline'
          description: 'The rate interval change times of the speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'muTimeline'
          description: 'The rate interval change times of the extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'psiTimeline'
          description: 'The rate interval change times of the fossil sampling rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'LambdaTimeline'
          description: 'The rate interval change times of the birth burst probabilities.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'MuTimeline'
          description: 'The rate interval change times of the mass extinction survival probabilities.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'rhoTimeline'
          description: 'The rate interval change times of the taxon sampling rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'sampling'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnFossilizedBirthDeathRange'
  title:
  aliases: 'dnFBDRP'
  description: 'The fossilized birth death range process describes diversification and sampling of extinct species trees under a mixed model of asymmetric, symmetric and anagenetic speciation.'
  details: 'Fossil species samples are represented by their sampled stratigraphic ranges, consisting of a first and last occurrence, and sample count data. Sampling data may be provided by species, time interval, or both depending on the sampling model assumed. The distribution may describe either sampled trees, in which unsampled tips represent sampling events, or extended trees in which tips represent extinction events.'
  example:
  authors:
  see_also:
    - 'dnFossilizedBirthDeathRangeMatrix'
    - 'dnBirthDeathSamplingTreatment'
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnFossilizedBirthDeathRange(RealPos<any> rootAge/originAge, RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, RealPos|RealPos[]<any> psi, Probability<any> rho, RealPos|RealPos[]<any> lambda_a, Probability|Probability[]<any> beta, RealPos[]<any> timeline, Natural|Natural[]|Natural[][]<any> k, String<any> condition {valid options: "time"|"survival"}, Taxon[]<any> taxa, Bool<any> bounded, Bool<any> binary, Bool<any> extended)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The (asymmetric) speciation rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The extinction rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'psi'
          description: 'The fossil sampling rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rho'
          description: 'The extant sampling fraction.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'lambda_a'
          description: 'The anagenetic speciation rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'beta'
          description: 'The probability of symmetric speciation.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'timeline'
          description: 'The rate interval change times of the piecewise constant process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'k'
          description: 'The fossil observation counts (total or [interval] or [interval][species]).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'bounded'
          description: 'Treat first and last occurrence ages as known range boundaries?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'binary'
          description: 'Treat fossil counts as binary presence/absence data?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'extended'
          description: 'Treat tip nodes as extinction events?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
  references:
    - citation: 'The fossilized birth-death model for the analysis of stratigraphic range data under different speciation modes. Stadler, Tanja et al. Journal of theoretical biology, 447:41-55.'
      doi:
      url: 'https://www.sciencedirect.com/science/article/pii/S002251931830119X'
- name: 'dnFossilizedBirthDeathRangeMatrix'
  title:
  aliases: 'dnFBDRMatrix'
  description: 'The fossilized birth death range matrix process describes the distribution of a matrix of species origin and extinction times under a model of asymmetric speciation and sampling of extinct species.'
  details: 'Fossil species samples are represented by their sampled stratigraphic ranges, consisting of a first and last occurrence, and sample count data. Sampling data may be provided by species, time interval, or both depending on the sampling model assumed.'
  example:
  authors:
  see_also:
    - 'dnFossilizedBirthDeathRange'
    - 'dnBirthDeathSamplingTreatment'
  type_spec:
    - 'Distribution__RealPos[][]'
    - 'Distribution'
    - 'RevObject'
  domain: 'MatrixReal'
  constructor:
    - usage: 'dnFossilizedBirthDeathRangeMatrix(RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, RealPos|RealPos[]<any> psi, Probability<any> rho, RealPos[]<any> timeline, Natural|Natural[]|Natural[][]<any> k, String<any> condition {valid options: "time"|"survival"}, Taxon[]<any> taxa, Bool<any> bounded, Bool<any> binary)'
      arguments:
        - label: 'lambda'
          description: 'The speciation rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The extinction rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'psi'
          description: 'The fossil sampling rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rho'
          description: 'The extant sampling fraction.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'timeline'
          description: 'The rate interval change times of the piecewise constant process (from oldest to youngest).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'k'
          description: 'The fossil observation counts (total or [interval] or [interval][species]).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'taxa'
          description: 'The taxa with stratigraphic ranges used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'bounded'
          description: 'Treat first and last occurrence ages as known range boundaries?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'binary'
          description: 'Treat fossil counts as binary presence/absence data?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
  references:
    - citation: 'The fossilized birth-death model for the analysis of stratigraphic range data under different speciation modes. Stadler, Tanja et al. Journal of theoretical biology, 447:41-55.'
      doi:
      url: 'https://www.sciencedirect.com/science/article/pii/S002251931830119X'
- name: 'dnGamma'
  title: 'Gamma Distribution'
  aliases:
  description: 'Gamma probability distribution for positive real numbers.'
  details: 'The gamma distribution is the probability of the sum of exponentially distributed variables. Thus, it provides a natural prior distribution for parameters that could be considered as sums of exponential variables.'
  example: |
    # lets simulate
    a <- rgamma(1000,shape=4,rate=4)
    # we expect a mean of 1
    mean(a)
    
    # create a random variable
    x ~ dnGamma(shape=4,rate=1)
    x
  authors:
  see_also: 'dnExponential'
  type_spec:
    - 'PositiveContinuousDistribution'
    - 'Distribution__RealPos'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos'
  constructor:
    - usage: 'dnGamma(RealPos<any> shape, RealPos<any> rate)'
      arguments:
        - label: 'shape'
          description: 'The shape parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rate'
          description: 'The rate parameter (rate = 1/scale).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnGeometric'
  title: 'Geometric Distribution'
  aliases: 'dnGeom'
  description: 'A geometric distribution defines a random variable on natural numbers. The geometric distribution describes the number of success until the first failure, with success probability p.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnGeom(p)
    x.clamp(10)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", p)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also:
    - 'dnPoisson'
    - 'mvRandomIntegerWalk'
  type_spec:
    - 'Distribution__Natural'
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural'
  constructor:
    - usage: 'dnGeometric(Probability<any> p)'
      arguments:
        - label: 'p'
          description: 'The probability of success.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnGilbertGraph'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnGilbertGraph(RealPos<any> p, Natural<any> n)'
      arguments:
        - label: 'p'
          description: 'The probability that two vertices share an edge.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'n'
          description: 'The dimensions of the correlation matrix.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnHBDP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnHBDP(RealPos<any> rootAge, Natural<any> rootState, RealPos[]<any> lambda, RealPos[]<any> mu, RealPos<any> delta, Probability<any> rho, String<any> condition {valid options: "time"|"survival"}, Bool<any> allowSameCategory, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge'
          description: 'The age of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rootState'
          description: 'The index of the rate category at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'lambda'
          description: 'The vector of speciation rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'mu'
          description: 'The vector of extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'delta'
          description: 'The rate of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'condition'
          description: 'The condition of the birth-death process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'survival'
          options:
            - 'time'
            - 'survival'
        - label: 'allowSameCategory'
          description: 'Do we allow shifts into the same category'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnHalfCauchy'
  title: 'half-Cauchy Distribution'
  aliases: 'dnCauchyPlus'
  description: 'Half-Cauchy distribution with location equal to ‘location’ and scale equal to ‘scale’.'
  details: |
    The half-Cauchy distribution has density:
    
    f(x) = 2/(pi * sigma) * 1/(1 + x-(location/scale)^2)
  example: |
    # we simulate some obversations
    x <- rHalfCauchy(n=10,location=0,scale=1)
    # let's see what the minimum is (you could do the max too). If this is not ‘location’, we're in trouble!
    min(x)
    # let's also see what the mean and the variance are.
    The mean will not converge with more samples, the Cauchy family has no moments.
    mean(x)
    var(x)
    sd(x)
  authors:
  see_also:
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnHalfCauchy(Real<any> location, RealPos<any> scale)'
      arguments:
        - label: 'location'
          description: 'The location parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'scale'
          description: 'The scale parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnHalfNormal'
  title: 'half-Normal Distribution'
  aliases:
  description: 'half-normal (gaussian) distribution with offset equal to ‘offset’ and standard deviation equal to ‘sd’.'
  details: |
    The half-normal distribution has density:
    
     f(x) = 2/(sqrt(2 pi) sigma) e^-((x - offset)^2/(2 sigma^2)) where offset is the offset of the distribution and sigma the standard deviation.
    
    f(x) = 2/(sqrt(2 pi) sigma) e^-((x - offset)^2/(2 sigma^2))
    
    where offset is the offset of the distribution and sigma the standard deviation.
  example: |
    # we simulate some oversations
    x <- rhalfNormal(n=10,offset=0,sd=10)
    # let's see what the minimum is (you could do the max too)
    # the minimum should never be less than the offset
    min(x)
    # let's also see what the mean and the variance are
    mean(x)
    var(x)
    sd(x)
  authors:
  see_also:
    - 'dnNormal'
    - 'dnLognormal'
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnHalfNormal(Real<any> offset, RealPos<any> sd)'
      arguments:
        - label: 'offset'
          description: 'The offset parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd'
          description: 'The standard deviation parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnHeterochronousCoalescent'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnHeterochronousCoalescent(RealPos<any> theta, Taxon[]<any> taxa, Clade[]<any> constraints)'
      arguments:
        - label: 'theta'
          description: 'The constant population size.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'constraints'
          description: 'The topological constraints strictly enforced.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnHeterochronousCoalescentSkyline'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnHeterochronousCoalescentSkyline(RealPos[]<any> theta, RealPos[]<any> times, String<any> method {valid options: "events"|"uniform"|"specified"}, Taxon[]<any> taxa, Clade[]<any> constraints)'
      arguments:
        - label: 'theta'
          description: 'A vector of per interval population sizes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'times'
          description: 'A vector of times for the intervals, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'method'
          description: 'The method how intervals are defined.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'events'
          options:
            - 'events'
            - 'uniform'
            - 'specified'
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'constraints'
          description: 'The strictly enforced topology constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnIID'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Real[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real[]'
  constructor:
    - usage: 'dnIID(Natural<any> numValues, Distribution__Real<any> valueDistribution)'
      arguments:
        - label: 'numValues'
          description: 'The number of IID samples.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'valueDistribution'
          description: 'The base distribution for the per category values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real'
          default:
          options:
  methods:
  references:
- name: 'dnInverseGamma'
  title: 'inverseGamma Distribution'
  aliases:
  description: 'inverse-gamma probability distribution for positive real numbers.'
  details: 'The inverse Gamma distribution is the probability of the sum of exponentially distributed variables. Thus, it provides a natural prior distribution for parameters that could be considered as sums of exponential variables.'
  example: |
    # lets simulate
    a <- rinverseGamma(1000,shape=4,rate=4)
    # we expect a mean of 1
    mean(a)
    
    # create a random variable
    x ~ dnInverseGamma(shape=4,rate=1)
    x
  authors:
  see_also: 'dnExponential'
  type_spec:
    - 'PositiveContinuousDistribution'
    - 'Distribution__RealPos'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos'
  constructor:
    - usage: 'dnInverseGamma(RealPos<any> shape, RealPos<any> rate)'
      arguments:
        - label: 'shape'
          description: 'The shape parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rate'
          description: 'The rate parameter (rate = 1/scale).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnInverseWishart'
  title:
  aliases: 'dnInvWishart'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnInverseWishart(MatrixRealSymmetric<any> sigma, RealPos[]<any> diagonal, Natural<any> df, RealPos<any> kappa, Natural<any> dim)'
      arguments:
        - label: 'sigma'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default: 'NULL'
          options:
        - label: 'diagonal'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'df'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'kappa'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'dim'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnLKJ'
  title: 'LKJ Distribution'
  aliases:
  description: 'The LKJ (Lewandowski-Kurowicka-Joe) distribution on correlation matrices with concentration parameter eta.'
  details: 'The LKJ distribution is uniform over positive-definite correlation matrices when eta=1.The probability density of a correlation matrix under the LKJ distribution is:f(x) = det(x)^(eta - 1)'
  example: |
    
    # we simulate a correlation matrix.
    R <- rLKJ(n=1, eta=1, dim=5)
    
    # let's print the simulated correlation matrix
    R
  authors:
  see_also: 'dnLKJPartial'
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnLKJ(RealPos<any> eta, Natural<any> dim)'
      arguments:
        - label: 'eta'
          description: 'The parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'dim'
          description: 'The dimensions of the correlation matrix.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
    - citation: 'Lewandowski D, D Kurowicka, H Joe (2009). Generating random correlation matrices based on vines and extended onion method. Journal of Multivariate Analysis, 100(9):1989-2001.'
      doi:
      url:
- name: 'dnLKJPartial'
  title: 'LKJ Distribution (for partial correlation matrices)'
  aliases:
  description: 'The LKJ (Lewandowski-Kurowicka-Joe) distribution (on the partial correlation matrix) with concentration parameter eta.'
  details: |
    The LKJPartial distribution is uniform over positive-definite correlation matrices when eta=1.
    
    The probability density of a correlation matrix under the LKJ distribution is:
    
    f(x) = det(x)^(eta - 1)
  example: |
    # we simulate a partial correlation matrix.
    P <- rLKJPartial(n=1, eta=1, dim=5)
    
    # let's print the simulated partial correlation matrix
    P
  authors:
  see_also: 'dnLKJ'
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnLKJPartial(RealPos<any> eta, Natural<any> dim)'
      arguments:
        - label: 'eta'
          description: 'The parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'dim'
          description: 'The dimensions of the correlation matrix.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
    - citation: 'Lewandowski D, D Kurowicka, H Joe (2009). Generating random correlation matrices based on vines and extended onion method. Journal of Multivariate Analysis, 100(9):1989-2001.'
      doi:
      url:
- name: 'dnLaplace'
  title: 'Laplace Distribution'
  aliases:
  description: 'Laplace distribution with mean equal to ‘mean’ and scale equal to ‘scale’.'
  details: |
    The Laplace distribution has density:
    
    f(x) = 1/(2 b) e^-(abs(x-mu)/b)
    
    where mu is the mean of the distribution and b the scale.
  example:
  authors:
  see_also:
    - 'dnExponential'
    - 'dnNormal'
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnLaplace(Real<any> mean, RealPos<any> scale)'
      arguments:
        - label: 'mean'
          description: 'The mean parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'scale'
          description: 'The scale parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
  references:
- name: 'dnLogExponential'
  title: 'Log-Exponential Distribution'
  aliases:
  description: 'A real number x has a log-Exponential distribution if y = exp(x) has Exponential distribution.'
  details: |
    The log-Exponential distribution is defined over real numbers. Saying that x is log-Exponential is equivalent to saying that y = exp(x) is Exponential. The log-Exponential distribution therefore expresses lack of information about the order of magnitude of a scale parameter:  if x has a log-Exponential distribution, then it has equal chance to be contained by any of the intervals of the form (10^k, 10^(k+1)) within the allowed range.
    
    The density is p(x) = ???, which can be seen by defining x = ln(y) where y has Exponential distribution and apply the change-of-variable formula.
  example: |
    # a log-Exponential prior over the rate of change of a Brownian trait (or a Brownian relaxed clock)
    trueTree = readTrees("data/primates.tree")[1]
    log_sigma ~ dnLogExponential(lambda=1)
    sigma := exp(log_sigma)
    X ~ dnBrownian(trueTree,sigma)
    # ...
  authors:
  see_also: 'dnExponential'
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnLogExponential(RealPos<any> lambda)'
      arguments:
        - label: 'lambda'
          description: 'The rate of the exonential distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnLognormal'
  title: 'Lognormal Distribution'
  aliases: 'dnLnorm'
  description: 'Lognormal distribution is the distribution for a log-transformed normally distributed random variable with mean ''mu'' and standard deviation ''sigma''.'
  details: |
    The lognormal random variable is defined as
    
    :X = exp(mu + sigma Z)
    
    where mu is the mean parameter, sigma is the standard deviation, and Z is a standard normal random variable. Note, in effect, the mean and standard deviation provide the location and scale of the exponentiated normal variate, mu + sigma Z.The lognormal distribution has density:
    
    f(x) = 1/(x sigma sqrt(2 pi)) e^-((ln x - mu)^2/(2 sigma^2))
    
    where mu is the mean of the distribution and sigma the standard deviation.
  example: |
    # set an expected value for x
    expectation_of_x <- 1
    # set a mean and sd parameter
    sd <- 0.5
    mean <- ln(expectation_of_x) - 0.5 * sd^2
    # create a lognormal distribution with expected value of 1
    x ~ dnLognormal(mean=mean, sd=sd)
  authors:
  see_also:
  type_spec:
    - 'PositiveContinuousDistribution'
    - 'Distribution__RealPos'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos'
  constructor:
    - usage: 'dnLognormal(Real<any> mean, RealPos<any> sd)'
      arguments:
        - label: 'mean'
          description: 'The mean in log-space (observed mean is exp(m)).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd'
          description: 'The standard deviation in log-space.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnLoguniform'
  title: 'Log-Uniform Distribution'
  aliases:
  description: 'A strictly positive real number x has a log-uniform distribution over interval (min,max) if its logarithm y = ln(x) has uniform distribution over interval (ln(min),ln(max)).'
  details: |
    The log-uniform distribution is defined over strictly positive real numbers. Saying that x is log-uniform is equivalent to saying that y = ln(x) is uniform. The log-uniform distribution therefore expresses lack of information about the order of magnitude of a scale parameter:  if x has a log-uniform distribution, then it has equal chance to be contained by any of the intervals of the form (10^k, 10^(k+1)) within the allowed range.
    
    The density is p(x) = 1/x, which can be seen by defining x = exp(y) where y has uniform distribution and apply the change-of-variable formula.
    
    The log-uniform distribution is improper when defined over the entire positive real line. To always make it proper, in RevBayes, a min and a max should always be specified.
  example: |
    # a log-uniform prior over the rate of change of a Brownian trait (or a Brownian relaxed clock)
    trueTree = readTrees("data/primates.tree")[1]
    sigma ~ dnLogUniform(min=0.001, max=1000)
    X ~ dnBrownian(trueTree,sigma)
    # ...
  authors:
  see_also: 'dnUniform'
  type_spec:
    - 'PositiveContinuousDistribution'
    - 'Distribution__RealPos'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos'
  constructor:
    - usage: 'dnLoguniform(RealPos<any> min, RealPos<any> max)'
      arguments:
        - label: 'min'
          description: 'The lower bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'max'
          description: 'The upper bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnMixture'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnMixture(Real[]<any> values, Simplex<any> probabilities)'
      arguments:
        - label: 'values'
          description: 'The potential values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'probabilities'
          description: 'The probabilitoes for each value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default:
          options:
  methods:
  references:
- name: 'dnMixtureAnalytical'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnMixtureAnalytical(Distribution__Real[]<any> baseDistributions, Simplex<any> probabilities)'
      arguments:
        - label: 'baseDistributions'
          description: 'The base distribution for the per category values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real[]'
          default:
          options:
        - label: 'probabilities'
          description: 'The probabilitoes for each value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default:
          options:
  methods:
  references:
- name: 'dnMixtureVector'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real[]'
  constructor:
    - usage: 'dnMixtureVector(Distribution__Real[]<any> baseDistributions, Simplex<any> probabilities, Natural<any> numValues)'
      arguments:
        - label: 'baseDistributions'
          description: 'The base distribution for the per category values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real[]'
          default:
          options:
        - label: 'probabilities'
          description: 'The probabilitoes for each value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default:
          options:
        - label: 'numValues'
          description: 'The number of values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnMultiSpeciesCoalescent'
  title: 'Multispecies coalescent Distribution'
  aliases:
  description: 'Multispecies coalescent distribution describing how gene trees can be generated from within a species tree given a constant effective population size. Requires an ultrametric species tree, a single effective population size (a single real positive), and taxa with species and individual names.'
  details: |
    The species tree must be ultrametric.
    The effective population size is constant across the species tree.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
  authors:
  see_also:
    - 'dnMultiSpeciesCoalescentUniformPrior'
    - 'dnMultiSpeciesCoalescentInverseGamma'
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnMultiSpeciesCoalescent(TimeTree<any> speciesTree, RealPos|RealPos[]<any> Ne, Taxon[]<any> taxa)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree in which the gene trees evolve.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'Ne'
          description: 'The effective population size(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
    - citation: 'Bayes Estimation of Species Divergence Times and Ancestral Population Sizes Using DNA Sequences From Multiple Loci. Bruce Rannala and Ziheng Yang. GENETICS August 1, 2003 vol. 164 no. 4 1645-1656.'
      doi:
      url: 'http://www.genetics.org/content/164/4/1645.short'
- name: 'dnMultiSpeciesCoalescentInverseGamma'
  title: 'Multispecies coalescent Distribution with inverse gamma prior on effective population sizes'
  aliases:
  description: 'Multispecies coalescent distribution describing how gene trees can be generated from within a species tree given effective population sizes. Requires an ultrametric species tree, parameters of an inverse gamma prior on effective population sizes, and taxa with species and individual names.'
  details: |
    The species tree must be ultrametric.
    Parameters of an inverse gamma prior on effective population sizes must be provided.
    This distribution uses a conjugate prior on effective population sizes. As a consequence, effective population sizes are integrated out and treated as nuisance parameters.
    
    If you are interested in reconstructing ancestral effective population sizes, use dnMultiSpeciesCoalescent.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick constant parameters for the inverse gamma distribution:
    alpha <- 3
    beta <- 0.003
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescentInverseGamma(speciesTree=spTree, shape=alpha, rate=beta, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
  authors:
  see_also:
    - 'dnMultiSpeciesCoalescent'
    - 'dnMultiSpeciesCoalescentUniformPrior'
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnMultiSpeciesCoalescentInverseGamma(TimeTree<any> speciesTree, RealPos<any> shape, RealPos<any> rate, Taxon[]<any> taxa)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree in which the gene trees evolve.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'shape'
          description: 'The shape of the inverse gamma prior distribution on the effective population sizes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rate'
          description: 'The rate of the inverse gamma prior distribution on the effective population sizes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
    - citation: ''' Algorithmic improvements to species delimitation and phylogeny estimation under the multispecies coalescent. Jones G.  Journal of Mathematical Biology. 2016.'''
      doi: '''DOI: 10.1007/s00285-016-1034-0'''
      url: 'http://www.indriid.com/2016/2016-06-01-STACEY.pdf'
- name: 'dnMultiSpeciesCoalescentUniformPrior'
  title: 'Multispecies coalescent Distribution'
  aliases:
  description: 'Multispecies coalescent distribution describing how gene trees can be generated from within a species tree given effective population sizes. Requires an ultrametric species tree, effective population size(s) (a single real positive or a vector of real positives), and taxa with species and individual names.'
  details: |
    The species tree must be ultrametric.
    Effective population sizes can be constant across the species tree, if a single real positive is provided, or branchwise, if a vector is provided.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescentUniformPrior(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
  authors:
  see_also:
    - 'dnMultiSpeciesCoalescent'
    - 'dnMultiSpeciesCoalescentInverseGamma'
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnMultiSpeciesCoalescentUniformPrior(TimeTree<any> speciesTree, RealPos<any> max, Taxon[]<any> taxa)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree in which the gene trees evolve.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'max'
          description: 'The maximum effective population size.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
    - citation: 'Bayes Estimation of Species Divergence Times and Ancestral Population Sizes Using DNA Sequences From Multiple Loci. Bruce Rannala and Ziheng Yang. GENETICS August 1, 2003 vol. 164 no. 4 1645-1656.'
      doi:
      url: 'http://www.genetics.org/content/164/4/1645.short'
    - citation: '''Bayesian Inference of Species Trees from Multilocus Data. Heled and Drummond Mol. Biol Evol. 27 (3): 570-580, 2010.'''
      doi: '''DOI: https://doi.org/10.1093/molbev/msp274'''
      url: 'https://academic.oup.com/mbe/article/27/3/570/999753/Bayesian-Inference-of-Species-Trees-from'
- name: 'dnMultiValueEvent'
  title: 'MultiValueEvent Distribution'
  aliases:
  description: 'A MultiValueEvent distribution.'
  details:
  example:
  authors:
  see_also: 'dnEvent'
  type_spec:
    - 'Distribution__Natural'
    - 'Distribution'
    - 'RevObject'
  domain: 'MultiValueEvent'
  constructor:
    - usage: 'dnMultiValueEvent(Distribution__Natural<any> eventDistribution, Distribution[]<any> valueDistribution, String[]<any> names, Natural[]<any> minNumberEvents)'
      arguments:
        - label: 'eventDistribution'
          description: 'The prior on the number of events.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Natural'
          default:
          options:
        - label: 'valueDistribution'
          description: 'The base distribution for the per category values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution[]'
          default:
          options:
        - label: 'names'
          description: 'The names of the values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String[]'
          default:
          options:
        - label: 'minNumberEvents'
          description: 'The minum number of values per value category.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural[]'
          default:
          options:
  methods:
  references:
- name: 'dnMultinomial'
  title: 'Multinomial Distribution'
  aliases:
  description: 'A multinomial distribution defines a probability distribution on a vector of natural numbers. It is understood as randomly picking n times from the k categories with replacement where each catefory has its own probability p[i].'
  details:
  example: |
    p <- simplex(1,1,1,1)
    x ~ dnMultinomial(10, p)
    y ~ dnDirichlet(x)
    y.clamp( simplex(1,2,3,4) )
    moves[1] = mvSlide(x, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnDirichlet'
  type_spec:
    - 'Distribution__Natural[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural[]'
  constructor:
    - usage: 'dnMultinomial(Simplex<any> p, Natural<any> n)'
      arguments:
        - label: 'p'
          description: 'The simplex of probabilities for the categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default:
          options:
        - label: 'n'
          description: 'The number of draws.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnMultivariateNormal'
  title: 'Multivariate Normal Distribution'
  aliases:
  description: |
    The multivariate normal distribution has the probability density:
    
    f(x) = det(2 pi Sigma)^(-1/2) e^{-(1/2) (x-mu)' Sigma^-1 (x-mu)}
    
    where mu is a vector of mean values and Sigma is a covariance matrix. Note, this distribution may also be parameterized in terms of the precision matrix, Sigma^-1.
  details:
  example: |
    dim = 4
    df = 100
    kappa <- 2
    Sigma ~ dnWishart(df, kappa, dim)
    for (i in 1:dim) { mu[i] ~ dnUnif(-1, 1) }
    x ~ dnMultivariateNormal( mean=mu, covariance=Sigma )
    mv[1] = mvCorrelationMatrixElementSwap(Sigma)
    mv[2] = mvCorrelationMatrixRandomWalk(Sigma)
    mv[3] = mvCorrelationMatrixSingleElementBeta(Sigma)
    mv[4] = mvCorrelationMatrixSpecificElementBeta(Sigma)
    mv[5] = mvCorrelationMatrixUpdate(Sigma)
    mv[6] = mvVectorSlide(x)
  authors:
  see_also:
    - 'dnNormal'
    - 'dnWishart'
    - 'mvCorrelationMatrixUpdate'
  type_spec:
    - 'Distribution__Real[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real[]'
  constructor:
    - usage: 'dnMultivariateNormal(Real[]<any> mean, MatrixRealSymmetric<any> covariance, MatrixRealSymmetric<any> precision, RealPos<any> scale)'
      arguments:
        - label: 'mean'
          description: 'The vector of mean values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'covariance'
          description: 'The variance-covariance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default: 'NULL'
          options:
        - label: 'precision'
          description: 'The precision matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default: 'NULL'
          options:
        - label: 'scale'
          description: 'The scaling factor of the variance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
    - name: 'clampAt'
      return_type: 'void'
      usage: 'clampAt(Natural<any> index, Real<any> value)'
      arguments:
        - label: 'index'
          description: 'The index of the value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'value'
          description: 'The observed value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Real'
          default:
          options:
  references:
- name: 'dnNbinomial'
  title: 'Negative Binomial Distribution'
  aliases: 'dnNbinom'
  description: 'Negative binomial probability distribution of x successes before r failures.'
  details: 'The negative binomial probability distribution describes the number of successes before r failures, where the success probability is p. The probability is given by (x + r - 1 choose x) p^(x) * (1-p)^r'
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnNegativeBinomial(r=10,p)
    x.clamp(8)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnBinomial'
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural'
  constructor:
    - usage: 'dnNbinomial(Natural<any> r, Probability<any> p)'
      arguments:
        - label: 'r'
          description: 'Number of failures.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'p'
          description: 'Probability of success.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnNormal'
  title: 'Normal Distribution'
  aliases: 'dnNorm'
  description: 'Normal (gaussian) distribution with mean equal to ‘mean’ and standard deviation equal to ‘sd’.'
  details: |
    The normal distribution has density:
    
    f(x) = 1/(sqrt(2 pi) sigma) e^-((x - mu)^2/(2 sigma^2))
    
    where mu is the mean of the distribution and sigma the standard deviation.
  example: |
    # we simulate some observations
    x <- rnorm(n=10,mean=5,sd=10)
    # let's see what the minimum is (you could do the max too)
    min(x)
    # let's also see what the mean and the variance are
    mean(x)
    var(x)
    sd(x)
  authors:
  see_also: 'dnLognormal'
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnNormal(Real<any> mean, RealPos<any> sd)'
      arguments:
        - label: 'mean'
          description: 'The mean parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'sd'
          description: 'The standard deviation parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
  references:
- name: 'dnOrnsteinUhlenbeck'
  title: 'Bernoulli Distribution'
  aliases: 'dnOU'
  description: 'A Bernoulli-distributed random variable takes the value 1 with probability p and the value 0 with probability 1-p.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBernoulli(p)
    x.clamp(1)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", speciation)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnBinomial'
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnOrnsteinUhlenbeck(Real<any> x0, Real<any> theta, RealPos<any> alpha, RealPos<any> sigma, RealPos<any> time)'
      arguments:
        - label: 'x0'
          description: 'The root parameter value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'theta'
          description: 'The location of the optimum parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'alpha'
          description: 'The attraction to the optimum parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sigma'
          description: 'The scaling parameter of the time.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'time'
          description: 'The duration of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnOutgroupBirthDeath'
  title:
  aliases: 'dnOutgroupBDP'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnOutgroupBirthDeath(RealPos<any> lambda, RealPos<any> mu, Probability<any> rhoIngroup, Probability<any> rhoOutgroup, Taxon[]<any> taxaOutgroup, String<any> samplingStrategyOutgroup {valid options: "uniform"|"diversified"}, String<any> samplingStrategyIngroup {valid options: "uniform"|"diversified"}, RealPos<any> rootAge, String<any> samplingStrategy {valid options: "uniform"|"diversified"}, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa, Clade[]<any> incompleteClades)'
      arguments:
        - label: 'lambda'
          description: 'The constant speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The constant extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rhoIngroup'
          description: 'The ingroup sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'rhoOutgroup'
          description: 'The outgroup sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'taxaOutgroup'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'samplingStrategyOutgroup'
          description: 'The sampling strategy of including outgroup taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'samplingStrategyIngroup'
          description: 'The sampling strategy of including ingroup taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'rootAge'
          description: 'The time of the process starting at the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'samplingStrategy'
          description: 'The sampling strategy of including taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'incompleteClades'
          description: 'Vector of incompletely sampled clades with number of missing species.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnPhyloBranchRateBM'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__RealPos[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos[]'
  constructor:
    - usage: 'dnPhyloBranchRateBM(TimeTree<any> tree, RealPos<any> rootState, RealPos<any> sigma, Real<any> drift)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the continuous character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'rootState'
          description: 'The value of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sigma'
          description: 'The branch-length multiplier to scale the variance of the Brownian motion.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'drift'
          description: 'The drift parameter of the Brownian motion.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
  methods:
  references:
- name: 'dnPhyloBrownian'
  title:
  aliases: 'dnPhyloBM'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'Real[]'
  constructor:
    - usage: 'dnPhyloBrownian(TimeTree<any> tree, RealPos<any> sigma, Real<any> drift)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the continuous character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'sigma'
          description: 'The branch-length multiplier to scale the variance of the Brownian motion.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'drift'
          description: 'The drift parameter of the Brownian motion.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
  methods:
  references:
- name: 'dnPhyloBrownianMVN'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloBrownianMVN(Tree<any> tree, RealPos|RealPos[]<any> branchRates, RealPos|RealPos[]<any> siteRates, Real|Real[]<any> rootStates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The rate of evolution along a branch.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The rate of evolution per site.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloBrownianMultiSampleREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloBrownianMultiSampleREML(Tree<any> tree, RealPos|RealPos[]<any> branchRates, RealPos[]<any> withinSpeciesVariances, RealPos|RealPos[]<any> siteRates, Taxon[]<any> taxa, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The per branch rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'withinSpeciesVariances'
          description: 'The per species within-species variances.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'siteRates'
          description: 'The per site rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'nSites'
          description: 'The number of sites used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloBrownianMultiVariate'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'Real[][]'
  constructor:
    - usage: 'dnPhyloBrownianMultiVariate(TimeTree<any> tree, MatrixRealSymmetric<any> sigma)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'sigma'
          description: 'The variance-covariance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloBrownianREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloBrownianREML(Tree<any> tree, RealPos|RealPos[]<any> branchRates, RealPos|RealPos[]<any> siteRates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The per branch rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The per site rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'nSites'
          description: 'The number of sites used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloCTMC'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMC(Tree<any> tree, RateGenerator|RateGenerator[]<any> Q, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, Simplex|Bool<any> siteMatrices, RealPos[]<any> siteRates, Simplex<any> siteRatesProbs, Probability<any> pInv, Natural<any> nSites, String<any> type {valid options: "DNA"|"RNA"|"AA"|"Codon"|"PoMo"|"Protein"|"Standard"|"NaturalNumbers"|"Binary"|"Restriction"}, Bool<any> treatAmbiguousAsGap, String<any> coding, Bool<any> storeInternalNodes, Bool<any> gapMatchClamped)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description: 'The global, branch-specific or site-mixture rate matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default:
          options:
        - label: 'rootFrequencies'
          description: 'The root specific frequencies of the characters, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description: 'The global or branch-specific rate multipliers.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteMatrices'
          description: 'Simplex of site matrix mixture probabilities. Treats Q as vector of site mixture categories instead of branch-specific matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'siteRates'
          description: 'The rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'siteRatesProbs'
          description: 'The probability weights of rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'pInv'
          description: 'The probability of a site being invariant.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites, used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'type'
          description: 'The data type, used for simulation and initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'DNA'
          options:
            - 'DNA'
            - 'RNA'
            - 'AA'
            - 'Codon'
            - 'PoMo'
            - 'Protein'
            - 'Standard'
            - 'NaturalNumbers'
            - 'Binary'
            - 'Restriction'
        - label: 'treatAmbiguousAsGap'
          description: 'Should we treat ambiguous characters as gaps/missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'coding'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'all'
          options:
        - label: 'storeInternalNodes'
          description: 'Should we store internal node states in the character matrix?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'gapMatchClamped'
          description: 'Should we set the simulated character to be gap or missing if the corresponding character in the clamped matrix is gap or missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnPhyloCTMCClado'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMCClado(Tree<any> tree, RateGenerator|RateGenerator[]<any> Q, CladogeneticProbabilityMatrix|CladogeneticProbabilityMatrix[]<deterministic> cladoProbs, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, RealPos[]<any> siteRates, Probability<any> pInv, Natural<any> nSites, String<any> type {valid options: "DNA"|"RNA"|"AA"|"PoMo"|"Protein"|"Standard"|"NaturalNumbers"|"Taxa"}, Bool<any> treatAmbiguousAsGap, Bool<any> storeInternalNodes, Bool<any> gapMatchClamped)'
      arguments:
        - label: 'tree'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default:
          options:
        - label: 'cladoProbs'
          description:
          dag_type: '<deterministic>'
          pass_by: 'const reference'
          value_type: 'CladogeneticProbabilityMatrix'
          default:
          options:
        - label: 'rootFrequencies'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'pInv'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'nSites'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'type'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'NaturalNumbers'
          options:
            - 'DNA'
            - 'RNA'
            - 'AA'
            - 'PoMo'
            - 'Protein'
            - 'Standard'
            - 'NaturalNumbers'
            - 'Taxa'
        - label: 'treatAmbiguousAsGap'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'storeInternalNodes'
          description: 'Should we store internal node states in the character matrix?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'gapMatchClamped'
          description: 'Should we set the simulated character to gap or missing if the corresponding character in the clamped matrix is gap or missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnPhyloCTMCDASequence'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMCDASequence(Tree<any> tree, RateGeneratorSequence|RateGeneratorSequence[]<any> Q, CladogeneticProbabilityMatrix<any> cladoProbs, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, RealPos[]<any> siteRates, Probability<any> pInv, Natural<any> nSites, String<any> type {valid options: "DNA"|"RNA"|"AA"|"PoMo"|"Protein"|"Standard"|"NaturalNumbers"|"Restriction"}, Bool<any> storeInternalNodes, Bool<any> treatAmbiguousAsGap, String<any> coding)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description: 'The global or branch-specific rate matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGeneratorSequence'
          default:
          options:
        - label: 'cladoProbs'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'CladogeneticProbabilityMatrix'
          default: 'NULL'
          options:
        - label: 'rootFrequencies'
          description: 'The root specific frequencies of the characters, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description: 'The global or branch-specific rate multipliers.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'pInv'
          description: 'The probability of a site being invariant.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites, used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'type'
          description: 'The data type, used for simulation and initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'DNA'
          options:
            - 'DNA'
            - 'RNA'
            - 'AA'
            - 'PoMo'
            - 'Protein'
            - 'Standard'
            - 'NaturalNumbers'
            - 'Restriction'
        - label: 'storeInternalNodes'
          description: 'Should we store internal node states in the character matrix?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'treatAmbiguousAsGap'
          description: 'Should we treat ambiguous characters as gaps/missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'coding'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'all'
          options:
  methods:
  references:
- name: 'dnPhyloCTMCDASiteIID'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMCDASiteIID(Tree<any> tree, RateGenerator|RateGenerator[]<any> Q, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, RealPos[]<any> siteRates, Probability<any> pInv, Natural<any> nSites, String<any> type {valid options: "DNA"|"RNA"|"AA"|"PoMo"|"Protein"|"Standard"|"NaturalNumbers"|"Restriction"}, Bool<any> treatAmbiguousAsGap, String<any> coding)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description: 'The global or branch-specific rate matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default:
          options:
        - label: 'rootFrequencies'
          description: 'The root specific frequencies of the characters, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description: 'The global or branch-specific rate multipliers.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'pInv'
          description: 'The probability of a site being invariant.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites, used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'type'
          description: 'The data type, used for simulation and initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'DNA'
          options:
            - 'DNA'
            - 'RNA'
            - 'AA'
            - 'PoMo'
            - 'Protein'
            - 'Standard'
            - 'NaturalNumbers'
            - 'Restriction'
        - label: 'treatAmbiguousAsGap'
          description: 'Should we treat ambiguous characters as gaps/missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'coding'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'all'
          options:
  methods:
  references:
- name: 'dnPhyloCTMCDollo'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMCDollo(Tree<any> tree, RateGenerator|RateGenerator[]<any> Q, RealPos<any> deathRate, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, RealPos[]<any> siteRates, Natural<any> nSites, String<any> type {valid options: "Standard"|"Binary"|"Restriction"}, Bool<any> normalize, String<any> coding)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description: 'The global or branch-specific rate matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default: 'NULL'
          options:
        - label: 'deathRate'
          description: 'The Dollo character death rate'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootFrequencies'
          description: 'The root specific frequencies of the characters, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description: 'The global or branch-specific rate multipliers.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'nSites'
          description: 'The number of sites, used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'type'
          description: 'The data type, used for simulation and initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'Standard'
          options:
            - 'Standard'
            - 'Binary'
            - 'Restriction'
        - label: 'normalize'
          description: 'Should we normalize the Dollo substitution matrices?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'coding'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'noabsencesites'
          options:
  methods:
  references:
- name: 'dnPhyloDistanceGamma'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__DistanceMatrix'
    - 'Distribution'
    - 'RevObject'
  domain: 'DistanceMatrix'
  constructor:
    - usage: 'dnPhyloDistanceGamma(Tree<any> tree, DistanceMatrix<any> distanceMatrix, DistanceMatrix<any> varianceMatrix, String[]<any> names)'
      arguments:
        - label: 'tree'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'distanceMatrix'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'DistanceMatrix'
          default:
          options:
        - label: 'varianceMatrix'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'DistanceMatrix'
          default:
          options:
        - label: 'names'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloMultiSampleOrnsteinUhlenbeck'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloMultiSampleOrnsteinUhlenbeck(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, RealPos[]<any> withinSpeciesVariances, Real|Real[]<any> rootStates, Natural<any> nSites, Taxon[]<any> taxa)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'withinSpeciesVariances'
          description: 'The per species within-species variances.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloMultiSampleOrnsteinUhlenbeckREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloMultiSampleOrnsteinUhlenbeckREML(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, RealPos[]<any> withinSpeciesVariances, Real|Real[]<any> rootStates, Natural<any> nSites, Taxon[]<any> taxa)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'withinSpeciesVariances'
          description: 'The per species within-species variances.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloMultivariateBrownianMultiSampleREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloMultivariateBrownianMultiSampleREML(Tree<any> tree, RealPos|RealPos[]<any> branchRates, MatrixRealSymmetric|MatrixReal<any> rateMatrix, RealPos[][]<any> withinSpeciesVariances, Taxon[]<any> taxa)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The per branch rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rateMatrix'
          description: 'The variance-covariance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
        - label: 'withinSpeciesVariances'
          description: 'The per species per site within-species variances.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[][]'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloMultivariateBrownianREML'
  title: 'Phylogenetic Multivariate Brownian Motion'
  aliases:
  description: 'Multivariate Brownian motion over a phylogeny with variance-covariance matrix rateMatrix.'
  details:
  example: |
    
    # generate a tree and variance-covariance matrix.
    psi ~ dnUniformTimeTree(1, [taxon("A"),taxon("B"),taxon("C")])
    Sigma <- diagonalMatrix(5)
    
    # generate the multivariate data.
    x ~ dnPhyloMultivariateBrownianREML(tree=psi, rateMatrix=Sigma)
    
    # print the simulated data.
    x
  authors:
  see_also:
    - 'dnPhyloBrownianREML'
    - 'dnPhyloBrownianMVN'
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloMultivariateBrownianREML(Tree<any> tree, RealPos|RealPos[]<any> branchRates, MatrixRealSymmetric|MatrixReal<any> rateMatrix)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The per branch rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rateMatrix'
          description: 'The variance-covariance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
  methods:
  references:
    - citation: 'Huelsenbeck JP, B Rannala (2003). Detecting correlation between characters in a comparative analysis with uncertain phylogeny. Evolution, 57(6):1237-1247.'
      doi:
      url:
- name: 'dnPhyloOrnsteinUhlenbeck'
  title:
  aliases: 'dnPhyloOU'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'Real[]'
  constructor:
    - usage: 'dnPhyloOrnsteinUhlenbeck()'
      arguments:
  methods:
  references:
- name: 'dnPhyloOrnsteinUhlenbeckMVN'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloOrnsteinUhlenbeckMVN(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, Real|Real[]<any> rootStates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloOrnsteinUhlenbeckREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloOrnsteinUhlenbeckREML(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, Real|Real[]<any> rootStates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloOrnsteinUhlenbeckThreePoint'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloOrnsteinUhlenbeckThreePoint(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, Real|Real[]<any> rootStates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloWhiteNoise'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos[]'
  constructor:
    - usage: 'dnPhyloWhiteNoise(TimeTree<any> tree, RealPos<any> sigma)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'sigma'
          description: 'The standard deviation.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnPhylodynamicBirthDeathProcess'
  title:
  aliases: 'dnPhylodynamicBDP'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'BirthDeathProcess'
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnPhylodynamicBirthDeathProcess(RealPos<any> rootAge/originAge, RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, RealPos|RealPos[]<any> phi, RealPos|RealPos[]<any> r, Probability|Probability[]<any> Phi, Probability[]<any> R, RealPos[]<any> timeline, RealPos[]<any> lambdaTimeline, RealPos[]<any> muTimeline, RealPos[]<any> phiTimeline, RealPos[]<any> rTimeline, RealPos[]<any> PhiTimeline, String<any> condition {valid options: "time"|"survival"|"sampling"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The birth rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The death rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'phi'
          description: 'The serial sampling rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'r'
          description: 'The probabilit(y|ies) of death upon sampling (treatment).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'Phi'
          description: 'The probability of sampling taxa at sampling events (at present only if input is scalar).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'R'
          description: 'The treatment probabilities for the sampling events (excluding sampling at present).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability[]'
          default: 'NULL'
          options:
        - label: 'timeline'
          description: 'The rate interval change times of the piecewise constant process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'lambdaTimeline'
          description: 'The rate interval change times of the speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'muTimeline'
          description: 'The rate interval change times of the extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'phiTimeline'
          description: 'The rate interval change times of the sampling rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'rTimeline'
          description: 'The rate interval change times of the (serial) treatment probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'PhiTimeline'
          description: 'The rate interval change times of the sampling rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'sampling'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnPointMass'
  title: 'Point Mass Distribution'
  aliases: 'dnDiracDelta'
  description: 'Point mass distribution.'
  details: 'The point mass distribution, or Dirac delta function, has density f(x) = 1 when x is equal to the point mass value.'
  example: 'u ~ dnPointMass(1.2)'
  authors:
  see_also:
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnPointMass(Real<any> value)'
      arguments:
        - label: 'value'
          description: 'The value where mass is concentrated.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
  methods:
  references:
- name: 'dnPoisson'
  title: 'Poisson Distribution'
  aliases: 'dnPois'
  description: 'A Poisson distribution defines probabilities for natural numbers. It is defined as the number of exponentially distributed events in a given interval.'
  details:
  example: |
    l ~ dnUniform(0.0,100.0)
    x ~ dnPoisson(l)
    x.clamp(10)
    moves[1] = mvSlide(l, delta=0.1, weight=1.0)
    monitors[1] = mnScreen(printgen=1000, separator = "        ", l)
    mymodel = model(l)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnGeom'
  type_spec:
    - 'Distribution__Natural'
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural'
  constructor:
    - usage: 'dnPoisson(RealPos<any> lambda)'
      arguments:
        - label: 'lambda'
          description: 'The rate (rate = 1/mean) parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnReversibleJumpMixture'
  title:
  aliases: 'dnRJMixture'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnReversibleJumpMixture(Real<any> constantValue, Distribution__Real<any> baseDistribution, Probability<any> p)'
      arguments:
        - label: 'constantValue'
          description: 'The fixed value this distribution can take.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'baseDistribution'
          description: 'The distribution from which the value is alternatively drawn.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real'
          default:
          options:
        - label: 'p'
          description: 'The probability of being the fixed value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnSBBDP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnSBBDP(RealPos<any> rootAge, RealPos<any> lambda, RealPos<any> mu, Probability<any> rho, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge'
          description: 'The age of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The vector of speciation rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The vector of extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'taxa'
          description: 'The taxa used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnScaledDirichlet'
  title: 'Scaled Dirichlet Distribution'
  aliases:
  description: 'Scaled Dirichlet probability distribution on a simplex.'
  details: 'The scaled Dirichlet probability distribution is the generalization of the dirichlet distribution. A random variable from a scaled Dirichlet distribution is a simplex, i.e., a vector of probabilities that sum to 1. If b[1]=b[2]=...=b[n], then the scaledDirichlet(alpha,beta) collapses to the Dirichlet with the same alphas.'
  example: |
    # lets get a draw from a Dirichlet distribution
    a <- [1,1,1,1]   # we could also use rep(1,4)
    b <- [1,2,3,4]   # if these are all equal, the scaled Dirichlet is equivilent to the Dirichlet(a)x ~ dnScaledDirichlet(a,b)
    x
    # let check if b really sums to 1
    sum(x)
  authors:
  see_also:
    - 'dnDirichlet'
    - 'simplex'
  type_spec:
    - 'Distribution__Simplex'
    - 'Distribution'
    - 'RevObject'
  domain: 'Simplex'
  constructor:
    - usage: 'dnScaledDirichlet(RealPos[]<any> alpha, RealPos[]<any> beta)'
      arguments:
        - label: 'alpha'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'beta'
          description: 'The rate parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
  methods:
  references:
- name: 'dnSoftBoundUniformNormal'
  title: 'Softbound Uniform Distribution with Normal distributed tails.'
  aliases:
  description: 'A softbound uniform distribution with normally distributed tails outside the interval of the uniform distribution.'
  details: 'The center piece of this distribution a uniform distribution defined between the given interval. A variable is drawn from that uniform distribution with probability p and with probability 1-p outside the interval. The probability density outside the interval is described by a normal distribution with standard deviation sd.'
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBernoulli(p)
    x.clamp(1)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "        ", speciation)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors:
  see_also: 'dnUniform'
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnSoftBoundUniformNormal(Real<any> min, Real<any> max, RealPos<any> sd, Probability<any> p)'
      arguments:
        - label: 'min'
          description: 'The min value of the uniform distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'max'
          description: 'The max value of the uniform distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd'
          description: 'The standard deviation of the normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'p'
          description: 'The probability of being within the uniform distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnStudentT'
  title: 'Student T Distribution'
  aliases:
    - 'dnStudentT'
    - 'dnT'
    - 'dnGossetT'
  description: 'The student''s t probability distribution.'
  details:
  example: |
    # The most important use of the Student T distribution
    # is arguable the quantile function.
    # You can access it the following way:
    df <- 10
    a := qStudentT(0.025, df)
    a
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnStudentT(Natural<any> df)'
      arguments:
        - label: 'df'
          description: 'The degrees of freedom.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnTimeVaryingStateDependentSpeciationExtinction'
  title:
  aliases: 'dnTVSSE'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnTimeVaryingStateDependentSpeciationExtinction(RealPos<any> rootAge/originAge, CladogeneticSpeciationRateMatrix|RealPos[][]<any> speciationRates/lambda/cladoEventMap, RealPos[][]<any> extinctionRates/mu, RealPos[][]<any> psi/phi, RealPos[]<any> epochs, RateGenerator[]<any> Q, RealPos<any> delta, Simplex<any> pi, Probability<any> rho, String<any> condition {valid options: "time"|"survival"}, RealPos<any> nTimeSlices, Natural<any> minNumLineages, Natural<any> maxNumLineages, Bool<any> pruneExtinctLineages)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'speciationRates/lambda/cladoEventMap'
          description: 'The vector of speciation rates (for anagenetic-only models), or the map of speciation rates to cladogenetic event types.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'CladogeneticSpeciationRateMatrix'
          default:
          options:
        - label: 'extinctionRates/mu'
          description: 'The vector of extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[][]'
          default:
          options:
        - label: 'psi/phi'
          description: 'The vector of serial sampling rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[][]'
          default: 'NULL'
          options:
        - label: 'epochs'
          description: 'The time intervals when the diversification and transition rates change.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'Q'
          description: 'The rate matrix of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator[]'
          default: 'NULL'
          options:
        - label: 'delta'
          description: 'The rate-factor of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'pi'
          description: 'State frequencies at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'condition'
          description: 'The condition of the birth-death process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'nTimeSlices'
          description: 'The number of time slices for the numeric ODE.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '500'
          options:
        - label: 'minNumLineages'
          description: 'The minimum number of lineages to simulate.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'maxNumLineages'
          description: 'The maximum number of lineages to simulate.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '500'
          options:
        - label: 'pruneExtinctLineages'
          description: 'When simulating should extinct lineages be pruned off?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnUPP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__RealPos[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos[]'
  constructor:
    - usage: 'dnUPP(RealPos[]<any> values, Bool<any> include_zero)'
      arguments:
        - label: 'values'
          description: 'The possible non-zero values in the most fragmented partition of the set.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'include_zero'
          description: 'Should the partitions also include zero values?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnUltrametricTree'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnUltrametricTree(Distribution__TimeTree<any> treePrior, Distribution__RealPos<any> ratePrior, RealPos<any> rootAge, Probability<any> rootBranchFraction, TraceTree<any> trees, Trace<any> density)'
      arguments:
        - label: 'treePrior'
          description: 'The prior distribution for the time tree (divergence times).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'ratePrior'
          description: 'The prior distribution for the branch rates.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__RealPos'
          default:
          options:
        - label: 'rootAge'
          description: 'The root age variable.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rootBranchFraction'
          description: 'The fraction of how much of the root branch is assigned to the left subtree.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'trees'
          description: 'The trace of tree samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'TraceTree'
          default:
          options:
        - label: 'density'
          description: 'Optional trace of probability density values for each tree.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Trace'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnUniform'
  title: 'Uniform Distribution'
  aliases: 'dnUnif'
  description: 'Uniform distribution with lower and uppper bounds.'
  details: 'The uniform distribution has density, f(x) = 1/(b-a), where b is the upper bound and a is the lower bound.'
  example: |
    # set the lower bound
    a <- -2.5
    # set the upper bound
    b <- -3.9
    # create a stochastic node with a uniform prior
    u ~ dnUniform(a, b)
  authors:
  see_also:
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnUniform(Real<any> lower, Real<any> upper)'
      arguments:
        - label: 'lower'
          description: 'The lower bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'upper'
          description: 'The upper bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
  methods:
  references:
- name: 'dnUniformInteger'
  title:
  aliases: 'dnUnifInt'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Integer'
    - 'Distribution'
    - 'RevObject'
  domain: 'Integer'
  constructor:
    - usage: 'dnUniformInteger(Integer<any> lower, Integer<any> upper)'
      arguments:
        - label: 'lower'
          description: 'The lower bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Integer'
          default:
          options:
        - label: 'upper'
          description: 'The upper bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Integer'
          default:
          options:
  methods:
  references:
- name: 'dnUniformNatural'
  title:
  aliases: 'dnUnifNat'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__Natural'
    - 'Distribution'
    - 'RevObject'
  domain: 'Natural'
  constructor:
    - usage: 'dnUniformNatural(Natural<any> lower, Natural<any> upper)'
      arguments:
        - label: 'lower'
          description: 'The lower bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'upper'
          description: 'The upper bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnUniformSerialSampledTimeTree'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnUniformSerialSampledTimeTree(RealPos<any> rootAge/originAge, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The taxa used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnUniformTimeTree'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnUniformTimeTree(RealPos<any> rootAge, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge'
          description: 'The age of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The taxa used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnUniformTopology'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__BranchLengthTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'BranchLengthTree'
  constructor:
    - usage: 'dnUniformTopology(Taxon[]<any> taxa, Clade<any> outgroup, Clade[]<any> constraints, Bool<any> rooted)'
      arguments:
        - label: 'taxa'
          description: 'The vector of taxa that will be used for the tips.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'outgroup'
          description: 'The clade (consisting of one or more taxa) used as an outgroup.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade'
          default: 'NULL'
          options:
        - label: 'constraints'
          description: 'The topological constraints that will be enforced.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
        - label: 'rooted'
          description: 'Is the distribution over rooted topologies?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
  references:
- name: 'dnUniformTopologyBranchLength'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__BranchLengthTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'BranchLengthTree'
  constructor:
    - usage: 'dnUniformTopologyBranchLength(Taxon[]<any> taxa, Clade<any> outgroup, Distribution__RealPos<any> branchLengthDistribution)'
      arguments:
        - label: 'taxa'
          description: 'The vector of taxa that will be used for the tips.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'outgroup'
          description: 'The clade (consisting of one or more taxa) used as an outgroup.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade'
          default: 'NULL'
          options:
        - label: 'branchLengthDistribution'
          description: 'The base distribution for the branch lengths.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnVarianceGamma'
  title: 'Variance-gamma Distribution'
  aliases: 'dnVG'
  description: 'Variance-gamma distribution with location ‘mu’.'
  details: |
    The variance-gamma distribution has density:
    
    f(x) = 1/(sqrt(2 pi) sigma) e^-((x - mu)^2/(2 sigma^2))
    
    where mu is the mean of the distribution and sigma the standard deviation.
  example: |
    # we simulate some oversations
    x <- rnorm(n=10,mean=5,sd=10)
    # let's see what the minum is (you could do the max too)
    min(x)
    # let's also see what the mean and the variance are
    mean(x)
    var(x)
    sd(x)
  authors:
  see_also:
  type_spec:
    - 'ContinuousDistribution'
    - 'Distribution__Real'
    - 'Distribution'
    - 'RevObject'
  domain: 'Real'
  constructor:
    - usage: 'dnVarianceGamma(Real<any> mu, RealPos<any> kappa, RealPos<any> tau, RealPos<any> time)'
      arguments:
        - label: 'mu'
          description: 'The mean parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'kappa'
          description: 'The standard deviation parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tau'
          description: 'The standard deviation parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'time'
          description: 'The duration of time for the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
  references:
- name: 'dnWeightedConstrainedNodeOrder'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnWeightedConstrainedNodeOrder(Distribution__TimeTree<any> treeDistribution, RlRelativeNodeAgeWeightedConstraints<any> constraints, RealPos<any> beta)'
      arguments:
        - label: 'treeDistribution'
          description: 'The base distribution for the tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The node order constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RlRelativeNodeAgeWeightedConstraints'
          default:
          options:
        - label: 'beta'
          description: 'The beta weight for the constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnWeightedSample'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution__TimeTree[]'
    - 'Distribution'
    - 'RevObject'
  domain: 'TimeTree[]'
  constructor:
    - usage: 'dnWeightedSample(Distribution__TimeTree|Distribution__TimeTree[]<any> baseDistribution, Natural<any> numSamples)'
      arguments:
        - label: 'baseDistribution'
          description: 'The base distribution(s) for the sampled values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'numSamples'
          description: 'The number of samples in the weighted average.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
  methods:
  references:
- name: 'dnWhiteNoise'
  title: 'White-Noise Process'
  aliases:
  description: 'White-Noise process for positive real numbers.'
  details: 'The white-noise process is a process of a positive continuous variable similar to Brownian motion and the Ornstein-Uhlenbeck process. However, the white-noise process has a large variance when the time is small, and has small variance if the time is large.'
  example: |
    # lets simulate
    a <- rWhiteNoise(1000,mu=1,sigma=4,time=4)
    # we expect a mean of 1
    mean(a)
    
    # create a random variable
    x ~ dnWhiteNoise(mu=1.0,sigma=4,time=1)
    x
  authors:
  see_also: 'dnGamma'
  type_spec:
    - 'PositiveContinuousDistribution'
    - 'Distribution__RealPos'
    - 'Distribution'
    - 'RevObject'
  domain: 'RealPos'
  constructor:
    - usage: 'dnWhiteNoise(RealPos<any> mu, RealPos<any> sigma, RealPos<any> time)'
      arguments:
        - label: 'mu'
          description: 'The mean of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sigma'
          description: 'The standard deviation of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'time'
          description: 'The time that the process has run.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnWishart'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Distribution'
    - 'RevObject'
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnWishart(Natural<any> df, RealPos<any> kappa, Natural<any> dim)'
      arguments:
        - label: 'df'
          description: 'The degrees of dreedom.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'kappa'
          description: 'The scaling parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'dim'
          description: 'The dimension of the distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'mcmc'
  title: 'MCMC analysis object'
  aliases:
  description: 'The MCMC analysis object keeps a model and the associated moves and monitors. The object is used to run Markov chain Monte Carlo (MCMC) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  details: 'The MCMC analysis object produced by a call to this function keeps copies of the model and the associated moves and monitors. The MCMC analysis object is used to run Markov chain Monte Carlo (MCMC) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  example: |
    # Create a simple model (unclamped)
    a ~ exponential(1)
    mymodel = model(a)
    
    # Create a move vector and a monitor vector
    moves[1] = mvScale(a, lambda=1.0, weight=1.0)
    monitors[1] = mnFile(a,"output/out.log")
    
    # Create an mcmc object
    mymcmcObject = mcmc( mymodel, monitors, moves)
    
    # Run a short analysis
    mymcmcObject.burnin( generations = 400, tuningInterval = 100)
    mymcmcObject.run( generations = 400)
    
    # print the summary of the operators (now tuned)
    mymcmcObject.operatorSummary()
  authors:
  see_also: 'mcmcmc'
  type_spec:
    - 'MonteCarloAnalysis'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mcmc(Model<any> model, Monitor[]<any> monitors, Move[]<any> moves, String<any> moveschedule {valid options: "sequential"|"random"|"single"}, Natural<any> nruns, String<any> combine {valid options: "sequential"|"mixed"|"none"}, Natural<any> ntries, RealPos<any> priorHeat, RealPos<any> likelihoodHeat, RealPos<any> posteriorHeat)'
      arguments:
        - label: 'model'
          description: 'The model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Model'
          default:
          options:
        - label: 'monitors'
          description: 'The monitors used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Monitor[]'
          default:
          options:
        - label: 'moves'
          description: 'The moves used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Move[]'
          default:
          options:
        - label: 'moveschedule'
          description: 'The strategy how the moves are used.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'random'
          options:
            - 'sequential'
            - 'random'
            - 'single'
        - label: 'nruns'
          description: 'The number of replicate analyses.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'combine'
          description: 'How should we combine the traces once the simulation is finished.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'none'
          options:
            - 'sequential'
            - 'mixed'
            - 'none'
        - label: 'ntries'
          description: 'The number of initialization attempts.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
        - label: 'priorHeat'
          description: 'The power that the prior will be raised to.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'likelihoodHeat'
          description: 'The power that the likelihood will be raised to.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'posteriorHeat'
          description: 'The power that the posterior will be raised to.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
    - name: 'burnin'
      return_type: 'void'
      usage: 'burnin(Natural<any> generations, Natural<any> tuningInterval, Bool<any> underPrior)'
      arguments:
        - label: 'generations'
          description: 'The number of generation to run this burnin simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'underPrior'
          description: 'Should we run this analysis under the prior only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'initializeFromCheckpoint'
      return_type: 'void'
      usage: 'initializeFromCheckpoint(String<any> checkpointFile)'
      arguments:
        - label: 'checkpointFile'
          description: 'The checkpoint filename.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'initializeFromTrace'
      return_type: 'void'
      usage: 'initializeFromTrace(ModelTrace[]<any> trace)'
      arguments:
        - label: 'trace'
          description: 'The sample trace object.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'ModelTrace[]'
          default:
          options:
    - name: 'operatorSummary'
      return_type: 'void'
      usage: 'operatorSummary(Bool<any> currentPeriod)'
      arguments:
        - label: 'currentPeriod'
          description: 'Should the operator summary (number of tries and acceptance, and the acceptance ratio) of only the current period (i.e., after the last tuning) be printed?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations, StoppingRule[]<any> rules, Natural<any> tuningInterval, String<any> checkpointFile, Natural<any> checkpointInterval, Bool<any> underPrior)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'rules'
          description: 'The rules when to automatically stop the run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'StoppingRule[]'
          default: 'NULL'
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'checkpointFile'
          description: 'The filename for the checkpoint file.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'checkpointInterval'
          description: 'The interval when to write parameters values to a files for checkpointing.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'underPrior'
          description: 'Should we run this analysis under the prior only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  references:
    - citation: 'Metropolis N, AW Rosenbluth, MN Rosenbluth, AH Teller, E Teller (1953). Equation of state calculations by fast computing machines. Journal of Chemical Physics, 21:1087-1092.'
      doi:
      url:
    - citation: 'Hastings WK (1970) Monte Carlo sampling methods using Markov chains and their applications. Biometrika, 57:97-109.'
      doi:
      url:
- name: 'mcmcmc'
  title: 'Metropolis-Coupled MCMC analysis object'
  aliases:
  description: 'The Mcmcmc analysis object keeps a model and the associated moves and monitors. The object is used to run Metropolis Couped Markov chain Monte Carlo (Mcmcmc) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  details: 'The Mcmcmc analysis object produced by a call to this function keeps copies of the model and the associated moves and monitors. The Mcmcmc analysis object is used to run Markov chain Monte Carlo (Mcmcmc) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  example: |
    # Create a simple model (unclamped)
    a ~ exponential(1)
    mymodel = model(a)
    
    # Create a move vector and a monitor vector
    moves[1] = mvScale(a, lambda=1.0, weight=1.0)
    monitors[1] = mnFile(a,"output/out.log")
    
    # Create an mcmcmc object
    myMcmcmcObject = mcmcmc( mymodel, monitors, moves, nchains=4, deltaHeat=5)
    
    # Run a short analysis
    myMcmcmcObject.burnin( generations = 400, tuningInterval = 100)
    myMcmcmcObject.run( generations = 400)
    
    # print the summary of the operators (now tuned)
    myMcmcmcObject.operatorSummary()
  authors:
  see_also: 'mcmc'
  type_spec:
    - 'MonteCarloAnalysis'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mcmcmc(Model<any> model, Monitor[]<any> monitors, Move[]<any> moves, String<any> moveschedule {valid options: "sequential"|"random"|"single"}, Natural<any> nruns, String<any> combine {valid options: "sequential"|"mixed"|"none"}, Natural<any> ntries, Natural<any> nchains, Natural<any> swapInterval, RealPos<any> deltaHeat, Probability[]<any> heats, Bool<any> tuneHeat, Probability<any> tuneHeatTarget, String<any> swapMethod {valid options: "neighbor"|"random"|"both"}, Natural<any> swapInterval2, String<any> swapMode {valid options: "single"|"multiple"})'
      arguments:
        - label: 'model'
          description: 'The model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Model'
          default:
          options:
        - label: 'monitors'
          description: 'The monitors used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Monitor[]'
          default:
          options:
        - label: 'moves'
          description: 'The moves used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Move[]'
          default:
          options:
        - label: 'moveschedule'
          description: 'The strategy how the moves are used.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'random'
          options:
            - 'sequential'
            - 'random'
            - 'single'
        - label: 'nruns'
          description: 'The number of replicate analyses.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'combine'
          description: 'How should we combine the traces once the simulation is finished.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'none'
          options:
            - 'sequential'
            - 'mixed'
            - 'none'
        - label: 'ntries'
          description: 'The number of initialization attempts.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
        - label: 'nchains'
          description: 'The number of chains to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '4'
          options:
        - label: 'swapInterval'
          description: 'The interval at which swaps (between neighbor chains if the swapMethod is neighbor or both, or between chains chosen randomly if the swapMethod is random) will be attempted.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'deltaHeat'
          description: 'The delta parameter for the heat function.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.2'
          options:
        - label: 'heats'
          description: 'The heats of chains, starting from the cold chain to hotter chains so the first value must be 1.0. If heats are specified directly then the delta parameter would be ignored.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability[]'
          default: 'NULL'
          options:
        - label: 'tuneHeat'
          description: 'Should we tune the heats during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'tuneHeatTarget'
          description: 'The acceptance probability of adjacent chain swaps targeted by heats auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.23'
          options:
        - label: 'swapMethod'
          description: 'The method used to swap chains.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'neighbor'
          options:
            - 'neighbor'
            - 'random'
            - 'both'
        - label: 'swapInterval2'
          description: 'The interval at which swaps between randomly chosen chains will be attempted (if the swapMethod is specified as both; otherwise it would be the same as swapInterval if not provided).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'swapMode'
          description: 'Whether make a single attempt per swap interval or attempt multiple (= nchains-1 or choose(nchains,2) for neighbor or random swaps, respectively) times.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'single'
          options:
            - 'single'
            - 'multiple'
  methods:
    - name: 'burnin'
      return_type: 'void'
      usage: 'burnin(Natural<any> generations, Natural<any> tuningInterval, Bool<any> underPrior)'
      arguments:
        - label: 'generations'
          description: 'The number of generation to run this burnin simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'underPrior'
          description: 'Should we run this analysis under the prior only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'initializeFromCheckpoint'
      return_type: 'void'
      usage: 'initializeFromCheckpoint(String<any> checkpointFile)'
      arguments:
        - label: 'checkpointFile'
          description: 'The checkpoint filename.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'initializeFromTrace'
      return_type: 'void'
      usage: 'initializeFromTrace(ModelTrace[]<any> trace)'
      arguments:
        - label: 'trace'
          description: 'The sample trace object.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'ModelTrace[]'
          default:
          options:
    - name: 'operatorSummary'
      return_type: 'void'
      usage: 'operatorSummary(Bool<any> currentPeriod)'
      arguments:
        - label: 'currentPeriod'
          description: 'Should the operator summary (number of tries and acceptance, and the acceptance ratio) of only the current period (i.e., after the last tuning) be printed?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations, StoppingRule[]<any> rules, Natural<any> tuningInterval, String<any> checkpointFile, Natural<any> checkpointInterval, Bool<any> underPrior)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'rules'
          description: 'The rules when to automatically stop the run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'StoppingRule[]'
          default: 'NULL'
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'checkpointFile'
          description: 'The filename for the checkpoint file.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'checkpointInterval'
          description: 'The interval when to write parameters values to a files for checkpointing.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'underPrior'
          description: 'Should we run this analysis under the prior only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  references:
    - citation: '"Geyer,C.J. (1991) Markov chain Monte Carlo maximum likelihood. In Keramidas  (ed.), Computing Science and Statistics: Proceedings of the 23rd Symposium on  the Interface. Interface Foundation, Fairfax Station, pp. 156\u2013163."'
      doi:
      url:
    - citation: '"Gilks,W.R. and Roberts,G.O. (1996) Strategies for improving MCMC. In  Gilks,W.R., Richardson,S. and Spiegelhalter (eds) Markov chain Monte Carlo in  Practice. Chapman&Hall, London, 89\u2013114."'
      doi:
      url:
    - citation: 'Altekar, G.; Dwarkadas, S.; Huelsenbeck, J. P. & Ronquist, F. Parallel metropolis coupled Markov chain Monte Carlo for Bayesian phylogenetic inference Bioinformatics, Oxford Univ Press, 2004, 20, 407-415.'
      doi:
      url:
- name: 'mnAncestralState'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnAncestralState(Tree<any> tree, RevObject<stochastic> ctmc, String<any> filename, String<any> type, Natural<any> printgen, String<any> separator, Bool<any> append, Bool<any> version)'
      arguments:
        - label: 'tree'
          description: 'The tree which we monitor.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'ctmc'
          description: 'The CTMC process.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file for storing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'type'
          description: 'The type of data to store.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description: 'The frequency how often to sample.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The separator between columns in the file.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'append'
          description: 'Should we append or overwrite if the file exists?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnCharHistoryNewick'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnCharHistoryNewick(String<any> filename, AbstractHomologousDiscreteCharacterData<any> ctmc, TimeTree<any> tree, Natural<any> printgen, String<any> separator, Bool<any> posterior, Bool<any> likelihood, Bool<any> prior, Bool<any> append, String<any> style {valid options: "events"|"counts"}, String<any> type {valid options: "biogeo"})'
      arguments:
        - label: 'filename'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'ctmc'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'tree'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'printgen'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'posterior'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'likelihood'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'prior'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'append'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'style'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'events'
          options:
            - 'events'
            - 'counts'
        - label: 'type'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'biogeo'
          options: 'biogeo'
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnCharHistoryNhx'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnCharHistoryNhx(String<any> filename, AbstractHomologousDiscreteCharacterData<any> ctmc, TimeTree<any> tree, RlAtlas<any> atlas, Natural<any> samplegen, Natural<any> maxgen, Probability|Integer<any> burnin, String<any> separator, Bool<any> posterior, Bool<any> likelihood, Bool<any> prior, String<any> type {valid options: "biogeo"})'
      arguments:
        - label: 'filename'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'ctmc'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'tree'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'atlas'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RlAtlas'
          default:
          options:
        - label: 'samplegen'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'maxgen'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'burnin'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.25'
          options:
        - label: 'separator'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'posterior'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'likelihood'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'prior'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'type'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'biogeo'
          options: 'biogeo'
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnCharacterHistorySummary'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnCharacterHistorySummary(String<any> filename, AbstractHomologousDiscreteCharacterData<any> ctmc, TimeTree<any> tree, Natural<any> printgen, String<any> separator, Bool<any> posterior, Bool<any> likelihood, Bool<any> prior, Bool<any> append, String<any> style {valid options: "events"|"counts"}, String<any> type {valid options: "biogeo"})'
      arguments:
        - label: 'filename'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'ctmc'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'tree'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'printgen'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'posterior'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'likelihood'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'prior'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'append'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'style'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'events'
          options:
            - 'events'
            - 'counts'
        - label: 'type'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'biogeo'
          options: 'biogeo'
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnExtNewick'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnExtNewick(String<any> filename, TimeTree<any> tree, RevObject ..., Bool<any> isNodeParameter, Natural<any> printgen, String<any> separator, Bool<any> posterior, Bool<any> likelihood, Bool<any> prior, Bool<any> version)'
      arguments:
        - label: 'filename'
          description: 'The name of the file.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'tree'
          description: 'The tree variable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label:
          description: 'Variables at nodes or branches.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RevObject'
          default:
          options:
        - label: 'isNodeParameter'
          description: 'Is this a node or branch parameter?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'printgen'
          description: 'How frequently do we print.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The separator between variables.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'posterior'
          description: 'Should we print the posterior probability as well.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'likelihood'
          description: 'Should we print the likelihood as well?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'prior'
          description: 'Should we print the prior probability as well?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnFile'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnFile(RevObject ..., String<any> filename, Natural<any> printgen, String<any> separator, Bool<any> posterior, Bool<any> likelihood, Bool<any> prior, Bool<any> append, Bool<any> version)'
      arguments:
        - label:
          description: 'Variables to monitor'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RevObject'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description: 'How often should we print.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The separator/delimiter between values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'posterior'
          description: 'Should we print the posterior probability as well?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'likelihood'
          description: 'Should we print the likelihood as well?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'prior'
          description: 'Should we print the prior probability as well?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'append'
          description: 'Should we append or overwrite if the file exists?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnHomeologPhase'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnHomeologPhase(AbstractHomologousDiscreteCharacterData<any> ctmc, String<any> filename, Natural<any> printgen, String<any> separator, Bool<any> append, Bool<any> version)'
      arguments:
        - label: 'ctmc'
          description:
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default: 'NULL'
          options:
        - label: 'filename'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'append'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnJointConditionalAncestralState'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnJointConditionalAncestralState(Tree<any> tree, AbstractHomologousDiscreteCharacterData<any> ctmc, TimeTree<any> cdbdp, String<any> filename, String<any> type, Natural<any> printgen, String<any> separator, Bool<any> append, Bool<any> withTips, Bool<any> withStartStates, Bool<any> version)'
      arguments:
        - label: 'tree'
          description:
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'ctmc'
          description:
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default: 'NULL'
          options:
        - label: 'cdbdp'
          description:
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default: 'NULL'
          options:
        - label: 'filename'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'type'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'append'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'withTips'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'withStartStates'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnModel'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnModel(String<any> filename, Natural<any> printgen, String<any> separator, Bool<any> posterior, Bool<any> likelihood, Bool<any> prior, Bool<any> append, Bool<any> stochasticOnly, Bool<any> version, String[]<any> exclude)'
      arguments:
        - label: 'filename'
          description: 'The name of the file where to store the values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description: 'The frequency how often to sample values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The separator between different variables.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'posterior'
          description: 'Should we print the joint posterior probability?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'likelihood'
          description: 'Should we print the likelihood?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'prior'
          description: 'Should we print the joint prior probability?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'append'
          description: 'Should we append to an existing file?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'stochasticOnly'
          description: 'Should we monitor stochastic variables only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'exclude'
          description: 'Variables to exclude from the monitor'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default: '[ ]'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnNexus'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnNexus(String<any> filename, TimeTree<any> tree, RevObject ..., Bool<any> isNodeParameter, Bool<any> writeTaxa, Natural<any> printgen)'
      arguments:
        - label: 'filename'
          description: 'The name of the file.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'tree'
          description: 'The tree variable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label:
          description: 'Variables at nodes or branches.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RevObject'
          default:
          options:
        - label: 'isNodeParameter'
          description: 'Is this a node or branch parameter?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'writeTaxa'
          description: 'Should a taxa block be written?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'printgen'
          description: 'How frequently do we print.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnProbability'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnProbability(String<any> filename, Natural<any> printgen, String<any> separator, Bool<any> posterior, Bool<any> likelihood, Bool<any> prior, Bool<any> append, Bool<any> version)'
      arguments:
        - label: 'filename'
          description: 'The name of the file where to store the values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description: 'The frequency how often to sample values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The separator between different variables.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'posterior'
          description: 'Should we print the joint posterior probability?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'likelihood'
          description: 'Should we print the likelihood?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'prior'
          description: 'Should we print the joint prior probability?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'append'
          description: 'Should we append to an existing file?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnScreen'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnScreen(RevObject ..., Natural<any> printgen, Bool<any> posterior, Bool<any> likelihood, Bool<any> prior)'
      arguments:
        - label:
          description: 'Variables to monitor.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RevObject'
          default:
          options:
        - label: 'printgen'
          description: 'The frequency how often the variables are monitored.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'posterior'
          description: 'Monitor the joint posterior probability.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'likelihood'
          description: 'Monitor the joint likelihood.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'prior'
          description: 'Monitor the joint prior probability.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnSiteMixtureAllocation'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnSiteMixtureAllocation(AbstractHomologousDiscreteCharacterData<any> ctmc, String<any> filename, String<any> type, Natural<any> printgen, String<any> separator, Bool<any> append, Bool<any> version)'
      arguments:
        - label: 'ctmc'
          description:
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default: 'NULL'
          options:
        - label: 'filename'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'type'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'append'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnStochasticBranchRate'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnStochasticBranchRate(TimeTree<any> cdbdp, String<any> filename, Natural<any> printgen, String<any> separator, Bool<any> append, Bool<any> version)'
      arguments:
        - label: 'cdbdp'
          description: 'The character dependent birth-death process to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'filename'
          description: 'The file to save sampled character histories.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description: 'How frequently (in number of iterations) should we save sampled character histories? 1 by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The delimiter between variables. 	 by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'append'
          description: 'Should we append to an existing file? False by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnStochasticBranchStateTimes'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnStochasticBranchStateTimes(TimeTree<any> cdbdp, String<any> filename, Natural<any> printgen, String<any> separator, Bool<any> append, Bool<any> version)'
      arguments:
        - label: 'cdbdp'
          description: 'The character dependent birth-death process to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'filename'
          description: 'The file to save sampled character histories.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description: 'How frequently (in number of iterations) should we save sampled character histories? 1 by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The delimiter between variables. 	 by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'append'
          description: 'Should we append to an existing file? False by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnStochasticCharacterMap'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnStochasticCharacterMap(AbstractHomologousDiscreteCharacterData<any> ctmc, TimeTree<any> cdbdp, String<any> filename, Bool<any> include_simmap, Bool<any> use_simmap_default, Natural<any> printgen, String<any> separator, Bool<any> append, Bool<any> version, Natural<any> index)'
      arguments:
        - label: 'ctmc'
          description: 'The continuous-time Markov process to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default: 'NULL'
          options:
        - label: 'cdbdp'
          description: 'The character dependent birth-death process to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default: 'NULL'
          options:
        - label: 'filename'
          description: 'The file to save sampled character histories.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'include_simmap'
          description: 'Should we log SIMMAP/phytools compatible newick strings? True by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'use_simmap_default'
          description: 'Should we use the default SIMMAP/phytools event ordering? True by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'printgen'
          description: 'How frequently (in number of iterations) should we save sampled character histories? 1 by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The delimiter between variables. 	 by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'append'
          description: 'Should we append to an existing file? False by default.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'index'
          description: 'The index of the character to be mointored.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'mnStochasticVariable'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Monitor'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mnStochasticVariable(String<any> filename, Natural<any> printgen, String<any> separator, Bool<any> append, Bool<any> version)'
      arguments:
        - label: 'filename'
          description: 'The name of the file.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'printgen'
          description: 'The frequency how often we print.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'separator'
          description: 'The delimiter between variables.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
        - label: 'append'
          description: 'Should we append or overwrite if the file exists?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'version'
          description: 'Should we record the software version?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RevObject<any> x)'
      arguments:
        - label: 'x'
          description: 'A variable you want to monitor.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RevObject'
          default:
          options:
  references:
- name: 'model'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'model(RevObject<any> x, RevObject ...)'
      arguments:
        - label: 'x'
          description: 'Any variable that is connected in the model graph.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RevObject'
          default:
          options:
        - label:
          description: 'Additional variables.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RevObject'
          default:
          options:
  methods:
    - name: 'graph'
      return_type: 'void'
      usage: 'graph(String<any> file, Bool<any> verbose, String<any> bg)'
      arguments:
        - label: 'file'
          description: 'The name of the file where to save the model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'verbose'
          description: 'Verbose output?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'bg'
          description: 'The background color.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'lavenderblush2'
          options:
  references:
- name: 'mvAVMVN'
  title:
  aliases:
  description: |
    The adaptive variance multivariate-normal proposal of Baele et al. 2017, uses MCMC samples to fit covariance matrix to parameters.
    
    After user-defined waiting time, proposes using covariance matrix epsilon * I + (1 - epsilon) * sigmaSquared * empirical_matrix.
    
    Internally transforms variables based on whether variables are (finitely) bounded, strictly positive, or simplexed.
    
    Non-simplex-valued vector random variables are untransformed.
    
    Add random variables to the move directly (e.g. branch_rates[1], not branch_rates).WARNING: Disabling tuning disables both tuning of proposal variance and learning of empirical covariance matrix.
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvAVMVN(RealPos<any> sigmaSquared, RealPos<any> epsilon, Natural<any> waitBeforeLearning, Natural<any> waitBeforeUsing, Natural<any> maxUpdates, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'sigmaSquared'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'epsilon'
          description: 'The mixture weight of the post-learning move on a simple identity matrix.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.05'
          options:
        - label: 'waitBeforeLearning'
          description: 'The number of move attempts to wait before tracking the covariance of the variables.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '2500'
          options:
        - label: 'waitBeforeUsing'
          description: 'The number of move attempts to wait before using the learned covariance matrix.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '5000'
          options:
        - label: 'maxUpdates'
          description: 'The maximum number of updates to the empirical covariance matrix (matrix is only updated when MCMC tunes).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real<stochastic> var)'
      arguments:
        - label: 'var'
          description: 'The variable to move'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Simplex<stochastic> var)'
      arguments:
        - label: 'var'
          description: 'The variable to move'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Simplex'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real[]<stochastic> var)'
      arguments:
        - label: 'var'
          description: 'The variable to move'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real<stochastic> var)'
      arguments:
        - label: 'var'
          description: 'The variable to move'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Simplex<stochastic> var)'
      arguments:
        - label: 'var'
          description: 'The variable to move'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Simplex'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real[]<stochastic> var)'
      arguments:
        - label: 'var'
          description: 'The variable to move'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
  references:
- name: 'mvAddRemoveTip'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvAddRemoveTip(TimeTree<stochastic> tree, Bool<any> extant, Bool<any> extinct, Bool<any> sa, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this moves operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'extant'
          description: 'Should we add/remove extant tips?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'extinct'
          description: 'Should we add/remove extinct tips?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'sa'
          description: 'Should we add/remove extinct tips as sampled ancestors?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvBetaProbability'
  title:
  aliases: 'mvProbabilityElementScale'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvBetaProbability(Probability<stochastic> x, RealPos<any> delta, RealPos<any> offset, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'delta'
          description: 'The concentration parameter on the current value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'offset'
          description: 'The offset used to center proposals around 0.5.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'tune'
          description: 'Should we tune the concentration parameter during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvBetaSimplex'
  title:
  aliases: 'mvSimplexElementScale'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvBetaSimplex(Simplex<stochastic> x, RealPos<any> alpha, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Simplex'
          default:
          options:
        - label: 'alpha'
          description: 'The concentration parameter on the current value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the concentration parameter during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvBinarySwitch'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvBinarySwitch(Natural<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvBirthDeathEvent'
  title:
  aliases: 'mvBirthDeathEventDiscrete'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvBirthDeathEvent(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvBirthDeathEventContinuous'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvBirthDeathEventContinuous(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvBirthDeathFromAgeEvent'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvBirthDeathFromAgeEvent(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvBranchLengthScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvBranchLengthScale(BranchLengthTree<stochastic> tree, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree variable the move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'BranchLengthTree'
          default:
          options:
        - label: 'delta'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvBurstEvent'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvBurstEvent(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this moves operates on. It should be a fossil tree!'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvCharacterHistory'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvCharacterHistory(AbstractHomologousDiscreteCharacterData<stochastic> ctmc, RateGenerator<any> qmap_site, RateGeneratorSequence<any> qmap_seq, Probability<any> lambda, String<any> graph {valid options: "node"|"branch"|"cladogenetic"|"cladogenetic2"}, String<any> proposal {valid options: "rejection"|"rejection_shift"|"uniformization"}, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'ctmc'
          description: 'The PhyloCTMC variable.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'qmap_site'
          description: 'Per-site rate generator.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RateGenerator'
          default: 'NULL'
          options:
        - label: 'qmap_seq'
          description: 'Per-sequence rate generator.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RateGeneratorSequence'
          default: 'NULL'
          options:
        - label: 'lambda'
          description: 'Tuning probability to propose new site history.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'graph'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'node'
          options:
            - 'node'
            - 'branch'
            - 'cladogenetic'
            - 'cladogenetic2'
        - label: 'proposal'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'rejection'
          options:
            - 'rejection'
            - 'rejection_shift'
            - 'uniformization'
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvCollapseExpandFossilBranch'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvCollapseExpandFossilBranch(TimeTree<stochastic> tree, RealPos<any> origin, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this moves operates on. It should be a fossil tree!'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'origin'
          description: 'The variable for the origin of the process giving a maximum age for the new fossil attachement time.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvConjugateInverseWishart'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvConjugateInverseWishart(MatrixRealSymmetric<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvContinuousCharacterDataSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvContinuousCharacterDataSlide(ContinuousCharacterData<stochastic> x, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operators on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'ContinuousCharacterData'
          default:
          options:
        - label: 'delta'
          description: 'The sliding window width parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune this move during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvContinuousEventScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvContinuousEventScale(TimeTree<stochastic> tree, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvCorrelationMatrixElementSwap'
  title: 'Correlation Matrix element swap move.'
  aliases:
  description: 'Swaps elements i and j of the correlation matrix (i != j).'
  details:
  example: |
    
    # we draw a correlation matrix from an LKJ distribution
    R ~ dnLKJ(eta=1, dim=5)
    
    # we specify an element swap move
    moves[1] = mvCorrelationMatrixElementSwap(R)
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvCorrelationMatrixElementSwap(MatrixReal<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixReal'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvCorrelationMatrixRandomWalk'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvCorrelationMatrixRandomWalk(MatrixReal<stochastic> x, RealPos<any> sigma, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixReal'
          default:
          options:
        - label: 'sigma'
          description: 'The standard deviation of the normal distribution to draw from.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvCorrelationMatrixSingleElementBeta'
  title: 'Correlation Matrix Beta proposal.'
  aliases:
  description: 'Beta proposal on a random element of a correlation matrix.'
  details: 'This move chooses a single element of the correlation matrix at random, and draws a proposed value from a Beta distribution centered on the current value (and stretched to range from -1 to 1).'
  example: |
    
    # we draw a correlation matrix from an LKJ distribution
    R ~ dnLKJ(eta=1, dim=5)
    
    # we specify a beta move on the correlation matrix
    moves[1] = mvCorrelationMatrixSingleElementBeta(R, alpha=10.0)
  authors:
  see_also:
    - 'mvCorrelationMatrixSpecificElementBeta'
    - 'mvCorrelationMatrixRandomWalk'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvCorrelationMatrixSingleElementBeta(MatrixReal<stochastic> x, RealPos<any> alpha, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixReal'
          default:
          options:
        - label: 'alpha'
          description: 'The shape of the beta distribution to draw from.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '10'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvCorrelationMatrixSpecificElementBeta'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvCorrelationMatrixSpecificElementBeta(MatrixReal<stochastic> x, Natural<any> row, Natural<any> col, RealPos<any> alpha, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixReal'
          default:
          options:
        - label: 'row'
          description: 'The row of the variable on which this move operates.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'col'
          description: 'The column of the variable on which this move operates.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'alpha'
          description: 'The shape of the beta distribution to draw from.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '10'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvCorrelationMatrixUpdate'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvCorrelationMatrixUpdate(MatrixReal<stochastic> r, RealPos[]<any> s, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'r'
          description: 'The correlation matrix on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixReal'
          default:
          options:
        - label: 's'
          description: 'The vector of variances needed to complete the move.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvDPPAllocateAuxGibbs'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvDPPAllocateAuxGibbs(Real[]<stochastic> x, Integer<any> numAux, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'numAux'
          description: 'The number of auxillary categories.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Integer'
          default: '4'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvDPPGibbsConcentration'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvDPPGibbsConcentration(RealPos<stochastic> concentration, Integer<any> numDPPCats, RealPos<any> gammaShape, RealPos<any> gammaRate, RealPos<any> numElements, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'concentration'
          description:
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'numDPPCats'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Integer'
          default:
          options:
        - label: 'gammaShape'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'gammaRate'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'numElements'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvDPPValueBetaSimplex'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvDPPValueBetaSimplex(Simplex[]<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Simplex[]'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvDPPValueScaling'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvDPPValueScaling(RealPos[]<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvDirichletSimplex'
  title:
  aliases: 'mvSimplex'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvDirichletSimplex(Simplex<stochastic> x, RealPos<any> alpha, Natural<any> numCats, RealPos<any> offset, RealPos<any> kappa, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The simplex on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Simplex'
          default:
          options:
        - label: 'alpha'
          description: 'The concentration parameter on the previous value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'numCats'
          description: 'The number of categories changed per move.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'offset'
          description: 'The offset of the current value to center new proposals (x+offset).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'kappa'
          description: 'The offset of tuning parameter (x * alpha + kappa).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'tune'
          description: 'Should we tune this move during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvDiscreteEventCategoryRandomWalk'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvDiscreteEventCategoryRandomWalk(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvElementSwapSimplex'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvElementSwapSimplex(Simplex<stochastic> x, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Simplex'
          default:
          options:
        - label: 'tune'
          description: 'Should we tune the concentration parameter during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvEllipticalSliceSamplingSimple'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvEllipticalSliceSamplingSimple(Real[]<deterministic> x, RealPos<any> window, Bool<any> tune, Bool<any> forceAccept, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'window'
          description: 'The anglular window (steps-size) of proposals, a value in the interval (0,2*pi].'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '6.283185'
          options:
        - label: 'tune'
          description: 'Should we tune the move during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'forceAccept'
          description: 'If we hit maximum slice iterations, should we force the sampler to return the initial values (accept a step of size 0)? Not generally recommended.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvEmpiricalTree'
  title:
  aliases:
  description: 'An MCMC move that operates on empirical tree distributions.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Create a distribution of trees
    tree ~ dnEmpiricalTree(tree_trace)
    
    # Add an MCMC move
    moves[1] = mvEmpiricalTree(tree)
  authors:
  see_also:
    - 'mvEmpiricalTree'
    - 'treeTrace'
    - 'readTreeTrace'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvEmpiricalTree(Tree<stochastic> tree, Bool<any> metropolisHastings, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The stochastic tree variable on which this moves operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'metropolisHastings'
          description: 'If TRUE, use the regular Metropolis-Hastings acceptance ratio. If FALSE, always accept this move and sample every tree uniformly.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvEventTimeBeta'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvEventTimeBeta(TimeTree<stochastic> tree, RealPos<any> delta, RealPos<any> offset, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'delta'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'offset'
          description: 'The offset for the proposal density.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '2'
          options:
        - label: 'tune'
          description: 'Should we tune the concentration parameter during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvEventTimeSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvEventTimeSlide(TimeTree<stochastic> tree, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'delta'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the concentration parameter during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvFNPR'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvFNPR(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGMRFHyperpriorGibbs'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGMRFHyperpriorGibbs(RealPos<stochastic> x, Real[]<deterministic> normals, RealPos<any> zeta, Natural<any> order, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'normals'
          description: 'The vector of Normal RVs defining the field'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'zeta'
          description: 'The value controlling the shrinkage of the field, a scale by which x is multiplied, effectively making x ~ halfCauchy(0,zeta).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'order'
          description: 'The order of this GMRF model, first (1) or second (2). Defaults to first order.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGMRFUnevenGridHyperpriorGibbs'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGMRFUnevenGridHyperpriorGibbs(RealPos<stochastic> x, Real[]<deterministic> normals, RealPos[]<deterministic> grid, RealPos<any> zeta, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'normals'
          description: 'The vector of Normal RVs defining the field'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'grid'
          description: 'The space between i and i-1.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'zeta'
          description: 'The value controlling the shrinkage of the field, a scale by which x is multiplied, effectively making x ~ halfCauchy(0,zeta).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGPR'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGPR(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGammaScale'
  title:
  aliases:
  description: 'A move to scale a single continuous value by multiplying by a value drawn from a Gamma(lambda,1) distribution. Lambda is the tuning parameter that controls the size of the proposals.'
  details:
  example: |
    # Here is a simple example for conducting MCMC on the mean and sd of a Normal distribution.
    
    # Uniform(0,1) priors on the mean and sd
    mean ~ dnUnif(0,1)
    sd ~ dnUnif(0,1)
    
    # Dummy data (will not actually be analyzed)
    data <- v(0.4,0.5,0.6)
    
    # Clamping data
    for (i in 1:data.size()){ outcomes[i] ~ dnNorm(mean,sd); outcomes[i].clamp(data[i]) }
    
    # Initializing move and monitor counters
    mvi = 1
    mni = 1
    
    # Adding Gamma scale moves for the mean and sd (THIS MOVE IS HERE)
    moves[mvi++] = mvGammaScale(mean)
    moves[mvi++] = mvGammaScale(sd)
    
    # Instantiating the model
    mymodel = model(outcomes)
    
    # Adding screen monitor for the mean
    monitors[mni++] = mnScreen(mean, printgen=1000)
    
    # Creating MCMC object
    mymcmc = mcmc(mymodel, moves, monitors)
    
    # Running MCMC under the prior
    mymcmc.run(30000,underPrior=TRUE);
  authors:
  see_also: 'mvScale'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGammaScale(RealPos<stochastic> x, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The strength of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune lambda during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGibbsDrawCharacterHistory'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGibbsDrawCharacterHistory(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The time-tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGibbsMixtureAllocation'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGibbsMixtureAllocation(Real<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGraphFlipClique'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGraphFlipClique(MatrixRealSymmetric<stochastic> x, RealPos<any> r_set, Probability<any> p_vertex, Probability<any> p_edge, Natural[]<any> vertices, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
        - label: 'r_set'
          description: 'Rate that is equal to the expected number of vertex-sets to perturb (min 1).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'p_vertex'
          description: 'Probability of including a vertex in a vertex-set (min 2 vertices/set).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.1'
          options:
        - label: 'p_edge'
          description: 'Probability of forcing edge to consensus value (0,1) in a vertex-set.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'vertices'
          description: 'A vector of vertices to target with this proposal. An empty vector is interpretted as the full list of vertices.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Natural[]'
          default: '[ ]'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGraphFlipEdge'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGraphFlipEdge(MatrixRealSymmetric<stochastic> x, Probability<any> p, Natural[][]<any> edges, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
        - label: 'p'
          description: 'The probability of flipping each edge in edges (min flips == 1).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'edges'
          description: 'A vector of [i,j] edges to target with this proposal. An empty vector is interpretted as the full list of edges.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Natural[][]'
          default: '[ ]'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvGraphShiftEdge'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvGraphShiftEdge(MatrixRealSymmetric<stochastic> x, Probability<any> p, Natural[]<any> vertices, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
        - label: 'p'
          description: 'The probability of flipping each edge in edges.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'vertices'
          description: 'A vector of vertices to target with this proposal. An empty vector is interpretted as the full list of vertices.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Natural[]'
          default: '[ ]'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvHSRFHyperpriorsGibbs'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvHSRFHyperpriorsGibbs(RealPos<stochastic> gs, RealPos[]<deterministic> ls, Real[]<deterministic> normals, RealPos<any> zeta, Natural<any> order, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'gs'
          description: 'The global scale variable on which this move operates'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'ls'
          description: 'The local scales variables on which this move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'normals'
          description: 'The vector of Normal RVs defining the field'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'zeta'
          description: 'The value controlling the shrinkage of the field.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'order'
          description: 'The order of this GMRF model, first (1) or second (2). Defaults to first order.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvHSRFIntervalSwap'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvHSRFIntervalSwap(Real[]<deterministic> deltas, RealPos[]<deterministic> sigmas, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'deltas'
          description: 'The HSMRF delta parameters on which the move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'sigmas'
          description: 'The HSMRF sigma parameters on which the move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvHSRFUnevenGridHyperpriorsGibbs'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvHSRFUnevenGridHyperpriorsGibbs(RealPos<stochastic> gs, RealPos[]<deterministic> ls, Real[]<deterministic> normals, RealPos[]<deterministic> grid, RealPos<any> zeta, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'gs'
          description: 'The global scale variable on which this move operates'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'ls'
          description: 'The local scales variables on which this move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'normals'
          description: 'The vector of Normal RVs defining the field'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'grid'
          description: 'The space between i and i-1.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'zeta'
          description: 'The value controlling the shrinkage of the field.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvHomeologPhase'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvHomeologPhase(AbstractHomologousDiscreteCharacterData<stochastic> ctmc, String<any> tip1, String<any> tip2, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'ctmc'
          description: 'The PhyloCTMC variable.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'tip1'
          description: 'Tip 1 to switch.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'String'
          default:
          options:
        - label: 'tip2'
          description: 'Tip 2 to switch.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'String'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvIndependentTopology'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvIndependentTopology(TimeTree<stochastic> tree, Distribution__Tree<any> proposal, RealPos[]<any> rates, Clade<any> outgroup, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The stochastic time tree variable on which this moves operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'proposal'
          description: 'The proposal topology distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__Tree'
          default:
          options:
        - label: 'rates'
          description: 'The vector of branch-specific substitution rates.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'outgroup'
          description: 'Outgroup used to root the proposal topologies.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default: 'NA'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvLayeredScaleProposal'
  title: 'Rescales all the subtrees below some age.'
  aliases:
  description: 'Makes a subtree scale move on all subtrees below a given age in the tree. Tree topology is not altered.'
  details: |
    The tree must be ultrametric.
    
    An age is randomly drawn between the root age and the age of the oldest tip. Then all subtrees below this age are scaled up or down depending on a scaler drawn from an exponential distribution.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
    # set my move index
    mi = 0
    move_species_subtree_scale = mvLayeredScaleProposal( speciesTree=spTree, weight=5 )
    for (i in 1:n_genes) {
       move_species_subtree_scale.addGeneTreeVariable( geneTrees[i] )
    }
    moves[++mi] = move_species_subtree_scale
    # We get a handle on our model.
    # We can use any node of our model as a handle, here we choose to use the topology.
    mymodel = model(spTree)
    # Monitors to check the progression of the program
    monitors[1] = mnScreen(printgen=10, spTree)
    # Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
    # or use mcmcmc with heated chains.
    mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
    mymcmc.run(generations=1000)
    mymcmc.operatorSummary()
  authors:
  see_also: 'mvSubTreeScale'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvLayeredScaleProposal(TimeTree<stochastic> tree, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'lambda'
          description: 'The strength of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune lambda during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvLevyJump'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvLevyJump(Real<stochastic> x, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'delta'
          description: 'The window size of the proposals.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvLevyJumpSum'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvLevyJumpSum(Real<stochastic> value_1, Real<stochastic> value_2, RealPos<any> slide, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'value_1'
          description:
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'value_2'
          description:
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'slide'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMatrixElementScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMatrixElementScale(RealPos[][]|Real[][]|MatrixRealSymmetric|MatrixReal<stochastic> x, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos[][]'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMatrixElementSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMatrixElementSlide(RealPos[][]|Real[][]|MatrixRealSymmetric|MatrixReal<stochastic> x, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos[][]'
          default:
          options:
        - label: 'delta'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMirror'
  title:
  aliases:
  description: 'The adaptive mirror (normal) proposal of Thawornwattana et al. 2017, uses MCMC samples to find posterior mean and variance. After user-defined waiting time, proposes moves on opposite side of posterior mean from current location using a normal distribution with the learned posterior standard deviation (scaled by lambda). Before this time, the move uses mu0 as the mean, and lambda as the standard deviation. WARNING: Disabling tuning disables both tuning of proposal variance and learning of empirical mean and variance. To learn the empirical mean and variance without tuning sigma, set adaptOnly=true.'
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMirror(Real<stochastic> x, Natural<any> waitBeforeLearning, Natural<any> waitBeforeUsing, Natural<any> maxUpdates, Real<any> mu0, RealPos<any> sigma, Bool<any> tune, Bool<any> adaptOnly, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'waitBeforeLearning'
          description: 'The number of move attempts to wait before tracking the mean and variance of the variable.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '500'
          options:
        - label: 'waitBeforeUsing'
          description: 'The number of move attempts to wait before using the learned mean and variance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
        - label: 'maxUpdates'
          description: 'The maximum number of updates to the empirical mean and variance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'mu0'
          description: 'Initial guess at posterior mean.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'sigma'
          description: 'The tuning parameter, adjusts variance of proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the move during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'adaptOnly'
          description: 'If true, sigma is not tuned but mean and variance are still learned'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMirrorMultiplier'
  title:
  aliases:
  description: 'The adaptive mirror multiplier (normal) proposal of Thawornwattana et al. 2017, uses MCMC samples to find posterior mean and variance on the log-scale. After user-defined waiting time, proposes moves (on the log-scale) on opposite side of posterior mean from current location using a normal distribution with the learned posterior standard deviation (scaled by lambda). Before this time, the move uses mu0 as the mean, and lambda as the standard deviation. WARNING: Disabling tuning disables both tuning of proposal variance and learning of empirical mean and variance. To learn the empirical mean and variance without tuning sigma, set adaptOnly=true.'
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMirrorMultiplier(Real<stochastic> x, Natural<any> waitBeforeLearning, Natural<any> waitBeforeUsing, Natural<any> maxUpdates, Real<any> mu0, RealPos<any> sigma, Bool<any> tune, Bool<any> adaptOnly, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'waitBeforeLearning'
          description: 'The number of move attempts to wait before tracking the mean and variance of the variable.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '500'
          options:
        - label: 'waitBeforeUsing'
          description: 'The number of move attempts to wait before using the learned mean and variance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
        - label: 'maxUpdates'
          description: 'The maximum number of updates to the empirical mean and variance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'mu0'
          description: 'Initial guess at posterior log-mean.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'sigma'
          description: 'The tuning parameter, adjusts variance of proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the move during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'adaptOnly'
          description: 'If true, sigma is not tuned but mean and variance are still learned'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMixtureAllocation'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMixtureAllocation(Real<stochastic> x, Natural<any> delta, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'delta'
          description: 'The window of how many categories to propose left and right.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMultiValueEventBirthDeath'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMultiValueEventBirthDeath(MultiValueEvent<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MultiValueEvent'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMultiValueEventScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMultiValueEventScale(MultiValueEvent<stochastic> x, String<any> name, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MultiValueEvent'
          default:
          options:
        - label: 'name'
          description: 'The name of the value for the multi-variate event object on which this move works.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we auto-tune?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMultiValueEventSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMultiValueEventSlide(MultiValueEvent<stochastic> x, String<any> name, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MultiValueEvent'
          default:
          options:
        - label: 'name'
          description: 'The name of the value for the multi-variate event object on which this move works.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we auto-tune?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvMultipleElementVectorScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvMultipleElementVectorScale(RealPos[]<deterministic> x, Natural<any> numToMove, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which the move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'numToMove'
          description: 'The number of vector elements changed per move.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNNI'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNNI(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNarrow'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNarrow(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNarrowExchangeRateMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNarrowExchangeRateMatrix(TimeTree<stochastic> tree, RateGenerator[]<deterministic> rateMatrices, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'rateMatrices'
          description: 'The branch-specific rate matrices.'
          dag_type: '<deterministic>'
          pass_by: 'const reference'
          value_type: 'RateGenerator[]'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNodeRateTimeSlideUniform'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNodeRateTimeSlideUniform(TimeTree<stochastic> tree, RealPos[]<any> rates, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'rates'
          description: 'The vector of branch-specific substitution rates.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNodeTimeScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNodeTimeScale(TimeTree<stochastic> tree, RealPos<any> lambda, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposals.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNodeTimeSlideBeta'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNodeTimeSlideBeta(TimeTree<stochastic> tree, RealPos<any> delta, RealPos<any> offset, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'delta'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'offset'
          description: 'The offset for the proposal density.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '2'
          options:
        - label: 'tune'
          description: 'Should we tune the concentration parameter during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNodeTimeSlidePathTruncatedNormal'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNodeTimeSlidePathTruncatedNormal(TimeTree<stochastic> tree, TimeTree<stochastic> sigma, Bool<any> scaleByAge, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'sigma'
          description: 'The sd of the proposal.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default: '1'
          options:
        - label: 'scaleByAge'
          description: 'Should we additionally use age of node to adjust sd?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'tune'
          description: 'Should we tune sigma during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNodeTimeSlideUniform'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNodeTimeSlideUniform(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvNodeTimeSlideUniformAgeConstrained'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvNodeTimeSlideUniformAgeConstrained(TimeTree<stochastic> tree, Clade[]<stochastic> constraints, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The age constraints.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Clade[]'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvRJSwitch'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRJSwitch(Real<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvRandomDive'
  title:
  aliases:
  description: |
    The multiplicative proposal of Dutta 2012, allows for long-distance moves.
    
    Useful for fat-tailed distributions, possibly for bimoodal distributions.
    
    Variables on [0,infinity) are log-transformed for proposals.
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRandomDive(Real<stochastic> x, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'delta'
          description: 'The tuning parameter, larger values for bolder moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the window size during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvRandomGeometricWalk'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRandomGeometricWalk(Integer<stochastic> x, Probability<any> alpha, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Integer'
          default:
          options:
        - label: 'alpha'
          description: 'The success probability of the geometric distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.5'
          options:
        - label: 'tune'
          description: 'Should we tune the success probability during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvRandomIntegerWalk'
  title:
  aliases: 'mvRandomNaturalWalk'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRandomIntegerWalk(Natural<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvRateAgeBetaShift'
  title:
  aliases: 'mvNodeRateTimeSlideBeta'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRateAgeBetaShift(Tree<stochastic> tree, RealPos[]<deterministic> rates, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'rates'
          description: 'The vector of per-branch rates (from a relaxed clock).'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'delta'
          description: 'The concentration of the move on the previous age.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune this move during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvRateAgeProposal'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRateAgeProposal(Tree<any> tree, RealPos<any> alpha, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree to which the branch-rates belong.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The scaling factor (strength) of this move.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addRates'
      return_type: 'void'
      usage: 'addRates(RealPos[]<deterministic> var)'
      arguments:
        - label: 'var'
          description: 'The variable to move'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
  references:
- name: 'mvRateAgeSubtreeProposal'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRateAgeSubtreeProposal(Tree<any> tree, RealPos<any> alpha, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree to which the branch-rates belong.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The scaling factor (strength) of this move.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addRates'
      return_type: 'void'
      usage: 'addRates(RealPos[]<deterministic> var)'
      arguments:
        - label: 'var'
          description: 'The variable to move'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
  references:
- name: 'mvRootTimeScaleBactrian'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRootTimeScaleBactrian(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvRootTimeSlideUniform'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvRootTimeSlideUniform(TimeTree<stochastic> tree, RealPos<any> origin, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'origin'
          description: 'The maximum root age.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvSPR'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSPR(BranchLengthTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'BranchLengthTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvScale(Real<stochastic> x, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'lambda'
          description: 'The strength of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune lambda during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvScaleBactrian'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvScaleBactrian(RealPos<stochastic> x, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The strength of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune lambda during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvScaleBactrianCauchy'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvScaleBactrianCauchy(RealPos<stochastic> x, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The strength of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune lambda during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvShrinkExpand'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvShrinkExpand(Real[]<deterministic> x, RealPos<stochastic> sd, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which the move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'sd'
          description: 'The standard deviation parameter if available.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvShrinkExpandScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvShrinkExpandScale(RealPos[]<deterministic> x, RealPos<stochastic> sd, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which the move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'sd'
          description: 'The standard deviation parameter if available.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvSlice'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSlice(Real<stochastic> x, RealPos<any> window, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'window'
          description: 'The window (steps-size) of proposals.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the move during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSlide(Real<stochastic> x, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'delta'
          description: 'The window size parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the window size during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvSlideBactrian'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSlideBactrian(Real<stochastic> x, RealPos<any> sigma, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sigma'
          description: 'The scale parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune sigma during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvSpeciesNarrow'
  title: 'Narrow-exchange joint move on species tree and gene trees for multispecies coalescent models.'
  aliases:
  description: 'Makes a narrow-exchange move both in the species tree and in the gene trees that contain nodes of the relevant populations.'
  details: |
    The species tree must be ultrametric.
    
    All the gene trees that evolved along the species tree according to some form of multispecies coalescent must be added to the move using the addGeneTreeVariable method.
    
    This move jointly performs narrow exchange moves (Nearest-Neighbor Interchanges without branch length alterations) on the species tree and on gene trees, all of which must be ultrametric.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
    # set my move index
    mi = 0
    move_species_narrow_exchange = mvSpeciesNarrow( speciesTree=spTree, weight=5 )
    for (i in 1:n_genes) {
       move_species_narrow_exchange.addGeneTreeVariable( geneTrees[i] )
    }
    moves[++mi] = move_species_narrow_exchange
    # We get a handle on our model.
    # We can use any node of our model as a handle, here we choose to use the topology.
    mymodel = model(spTree)
    # Monitors to check the progression of the program
    monitors[1] = mnScreen(printgen=10, spTree)
    # Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
    # or use mcmcmc with heated chains.
    mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
    mymcmc.run(generations=1000)
    mymcmc.operatorSummary()
  authors:
  see_also:
    - 'mvSpeciesSubtreeScale'
    - 'mvSpeciesSubtreeScaleBeta'
    - 'mvSpeciesNodeTimeSlideUniform'
    - 'mvSpeciesTreeScale'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSpeciesNarrow(TimeTree<stochastic> speciesTree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addGeneTreeVariable'
      return_type: 'void'
      usage: 'addGeneTreeVariable(TimeTree<stochastic> geneTree)'
      arguments:
        - label: 'geneTree'
          description: 'A gene tree.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
  references:
    - citation: '"Guided Tree Topology Proposals for Bayesian Phylogenetic Inference. Sebastian  H\xF6hna, Alexei J. Drummond. Syst Biol (2012) 61 (1): 1-11."'
      doi: 'https://doi.org/10.1093/sysbio/syr074'
      url: 'https://academic.oup.com/sysbio/article-lookup/doi/10.1093/sysbio/syr074'
    - citation: 'Algorithmic improvements to species delimitation and phylogeny estimation under the multispecies coalescent. Graham Jones.  Journal of Mathematical Biology, 2016.'
      doi: 'https://doi.org/10.1007/s00285-016-1034-0'
      url: 'http://link.springer.com/article/10.1007/s00285-016-1034-0'
- name: 'mvSpeciesNodeTimeSlideUniform'
  title: 'Node time slide joint move on species tree and gene trees for multispecies coalescent models.'
  aliases:
  description: 'Makes a node time slide move both in the species tree and in the gene trees that contain nodes of the relevant populations. Tree topologies are not altered.'
  details: |
    The species tree must be ultrametric.
    
    All the gene trees that evolved along the species tree according to some form of multispecies coalescent must be added to the move using the addGeneTreeVariable method.
    
    This move jointly performs node time slides (branch length alterations, keeping the topologies fixed) on the species tree and on gene trees, all of which must be ultrametric.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
    # set my move index
    mi = 0
    move_species_node_time_slide = mvSpeciesNodeTimeSlideUniform( speciesTree=spTree, weight=5 )
    for (i in 1:n_genes) {
       move_species_node_time_slide.addGeneTreeVariable( geneTrees[i] )
    }
    moves[++mi] = move_species_node_time_slide
    # We get a handle on our model.
    # We can use any node of our model as a handle, here we choose to use the topology.
    mymodel = model(spTree)
    # Monitors to check the progression of the program
    monitors[1] = mnScreen(printgen=10, spTree)
    # Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
    # or use mcmcmc with heated chains.
    mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
    mymcmc.run(generations=1000)
    mymcmc.operatorSummary()
  authors:
  see_also:
    - 'mvSpeciesSubtreeScale'
    - 'mvSpeciesSubtreeScaleBeta'
    - 'mvSpeciesNarrow'
    - 'mvSpeciesTreeScale'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSpeciesNodeTimeSlideUniform(TimeTree<stochastic> speciesTree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'speciesTree'
          description: 'The ultrametric species tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addGeneTreeVariable'
      return_type: 'void'
      usage: 'addGeneTreeVariable(TimeTree<stochastic> geneTree)'
      arguments:
        - label: 'geneTree'
          description: 'A gene tree.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
  references:
    - citation: '"Guided Tree Topology Proposals for Bayesian Phylogenetic Inference. Sebastian  H\xF6hna, Alexei J. Drummond. Syst Biol (2012) 61 (1): 1-11."'
      doi: 'https://doi.org/10.1093/sysbio/syr074'
      url: 'https://academic.oup.com/sysbio/article-lookup/doi/10.1093/sysbio/syr074'
    - citation: 'Algorithmic improvements to species delimitation and phylogeny estimation under the multispecies coalescent. Graham Jones.  Journal of Mathematical Biology, 2016.'
      doi: 'https://doi.org/10.1007/s00285-016-1034-0'
      url: 'http://link.springer.com/article/10.1007/s00285-016-1034-0'
- name: 'mvSpeciesSubtreeScale'
  title: 'Subtree scale move on species tree and gene trees for multispecies coalescent models.'
  aliases:
  description: 'Makes a subtree scale move both in the species tree and in the gene trees that contain nodes of the relevant populations. Tree topologies are not altered.'
  details: |
    The species tree must be ultrametric.
    
    All the gene trees that evolved along the species tree according to some form of multispecies coalescent must be added to the move using the addGeneTreeVariable method.
    
    This move jointly performs a subtree scale move (a whole subtree is scaled up or down, keeping the topology fixed) on the species tree and on gene trees, all of which must be ultrametric.
    
    How this works: we pick a random node which is not the root.
    Then, we uniformly pick an age between the parent and the oldest sampled descendant.
    The picked subtree is then scaled to this new age.
    All gene-trees that are present in the population will be scaled accordingly.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
    # set my move index
    mi = 0
    move_species_subtree_scale = mvSpeciesSubtreeScale( speciesTree=spTree, weight=5 )
    for (i in 1:n_genes) {
       move_species_subtree_scale.addGeneTreeVariable( geneTrees[i] )
    }
    moves[++mi] = move_species_subtree_scale
    # We get a handle on our model.
    # We can use any node of our model as a handle, here we choose to use the topology.
    mymodel = model(spTree)
    # Monitors to check the progression of the program
    monitors[1] = mnScreen(printgen=10, spTree)
    # Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
    # or use mcmcmc with heated chains.
    mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
    mymcmc.run(generations=1000)
    mymcmc.operatorSummary()
  authors:
  see_also:
    - 'mvSpeciesNodeTimeSlideUniform'
    - 'mvSpeciesSubtreeScaleBeta'
    - 'mvSpeciesNarrow'
    - 'mvSpeciesTreeScale'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSpeciesSubtreeScale(TimeTree<stochastic> speciesTree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'speciesTree'
          description: 'The species variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addGeneTreeVariable'
      return_type: 'void'
      usage: 'addGeneTreeVariable(TimeTree<stochastic> geneTree)'
      arguments:
        - label: 'geneTree'
          description: 'A gene tree to scale.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
  references:
    - citation: '"Guided Tree Topology Proposals for Bayesian Phylogenetic Inference. Sebastian  H\xF6hna, Alexei J. Drummond. Syst Biol (2012) 61 (1): 1-11."'
      doi: 'https://doi.org/10.1093/sysbio/syr074'
      url: 'https://academic.oup.com/sysbio/article-lookup/doi/10.1093/sysbio/syr074'
    - citation: 'Algorithmic improvements to species delimitation and phylogeny estimation under the multispecies coalescent. Graham Jones.  Journal of Mathematical Biology, 2016.'
      doi: 'https://doi.org/10.1007/s00285-016-1034-0'
      url: 'http://link.springer.com/article/10.1007/s00285-016-1034-0'
- name: 'mvSpeciesSubtreeScaleBeta'
  title: 'Subtree scale move on species tree and gene trees for multispecies coalescent models.'
  aliases:
  description: 'Makes a subtree scale move both in the species tree and in the gene trees that contain nodes of the relevant populations. Tree topologies are not altered. Uses a beta distribution to propose a new age value.'
  details: |
    The species tree must be ultrametric.
    
    All the gene trees that evolved along the species tree according to some form of multispecies coalescent must be added to the move using the addGeneTreeVariable method.
    
    This move jointly performs a subtree scale move (a whole subtree is scaled up or down, keeping the topology fixed) on the species tree and on gene trees, all of which must be ultrametric.
    
    How this works: we pick a random node which is not the root.
    Then, we pick a new age between the parent and the oldest sampled descendant according to a beta distribution.
    The picked subtree is then scaled to this new age.
    All gene-trees that are present in the population will be scaled accordingly.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
    # set my move index
    mi = 0
    move_species_subtree_scale_beta = mvSpeciesSubtreeScaleBeta( speciesTree=spTree, weight=5 )
    for (i in 1:n_genes) {
       move_species_subtree_scale_beta.addGeneTreeVariable( geneTrees[i] )
    }
    moves[++mi] = move_species_subtree_scale_beta
    # We get a handle on our model.
    # We can use any node of our model as a handle, here we choose to use the topology.
    mymodel = model(spTree)
    # Monitors to check the progression of the program
    monitors[1] = mnScreen(printgen=10, spTree)
    # Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
    # or use mcmcmc with heated chains.
    mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
    mymcmc.run(generations=1000)
    mymcmc.operatorSummary()
  authors:
  see_also:
    - 'mvSpeciesNodeTimeSlideUniform'
    - 'mvSpeciesSubtreeScale'
    - 'mvSpeciesNarrow'
    - 'mvSpeciesTreeScale'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSpeciesSubtreeScaleBeta(TimeTree<stochastic> speciesTree, RealPos<any> alpha, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree on which this move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'alpha'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '10'
          options:
        - label: 'tune'
          description: 'Should we tune the concentration parameter during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addGeneTreeVariable'
      return_type: 'void'
      usage: 'addGeneTreeVariable(TimeTree<stochastic> geneTree)'
      arguments:
        - label: 'geneTree'
          description: 'A gene tree.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
  references:
    - citation: '"Guided Tree Topology Proposals for Bayesian Phylogenetic Inference. Sebastian  H\xF6hna, Alexei J. Drummond. Syst Biol (2012) 61 (1): 1-11."'
      doi: 'https://doi.org/10.1093/sysbio/syr074'
      url: 'https://academic.oup.com/sysbio/article-lookup/doi/10.1093/sysbio/syr074'
    - citation: 'Algorithmic improvements to species delimitation and phylogeny estimation under the multispecies coalescent. Graham Jones.  Journal of Mathematical Biology, 2016.'
      doi: 'https://doi.org/10.1007/s00285-016-1034-0'
      url: 'http://link.springer.com/article/10.1007/s00285-016-1034-0'
- name: 'mvSpeciesTreeScale'
  title: 'Tree scale move on species tree and gene trees for multispecies coalescent models.'
  aliases:
  description: 'Makes a tree scale move both in the species tree and in the gene trees. Tree topologies are not altered.'
  details: |
    The species tree must be ultrametric.
    
    All the gene trees that evolved along the species tree according to some form of multispecies coalescent must be added to the move using the addGeneTreeVariable method.
    
    This move jointly performs a tree scale move (the entire tree is scaled up or down, keeping the topology fixed) on the species tree and on gene trees, all of which must be ultrametric.
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/"
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    root ~  dnNormal(mean=75,sd=2.5,min=0.0, max=Inf)
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=root, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees:
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
    # set my move index
    mi = 0
    move_species_tree_scale = mvSpeciesTreeScale( speciesTree=spTree, root=root, weight=5 )
    for (i in 1:n_genes) {
       move_species_tree_scale.addGeneTreeVariable( geneTrees[i] )
    }
    moves[++mi] = move_species_tree_scale
    # We get a handle on our model.
    # We can use any node of our model as a handle, here we choose to use the topology.
    mymodel = model(spTree)
    # Monitors to check the progression of the program
    monitors[1] = mnScreen(printgen=10, spTree)
    # Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
    # or use mcmcmc with heated chains.
    mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
    mymcmc.run(generations=1000)
    mymcmc.operatorSummary()
  authors:
  see_also:
    - 'mvSpeciesNodeTimeSlideUniform'
    - 'mvSpeciesSubtreeScaleBeta'
    - 'mvSpeciesNarrow'
    - 'mvSpeciesSubtreeScale'
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSpeciesTreeScale(TimeTree<stochastic> speciesTree, RealPos<stochastic> rootAge, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'rootAge'
          description: 'The root age variable.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'delta'
          description: 'The strength of the proposal'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the strength during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addGeneTreeVariable'
      return_type: 'void'
      usage: 'addGeneTreeVariable(TimeTree<stochastic> geneTree)'
      arguments:
        - label: 'geneTree'
          description: 'A gene tree variable.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
  references:
    - citation: '"Guided Tree Topology Proposals for Bayesian Phylogenetic Inference. Sebastian  H\xF6hna, Alexei J. Drummond. Syst Biol (2012) 61 (1): 1-11."'
      doi: 'https://doi.org/10.1093/sysbio/syr074'
      url: 'https://academic.oup.com/sysbio/article-lookup/doi/10.1093/sysbio/syr074'
    - citation: 'Algorithmic improvements to species delimitation and phylogeny estimation under the multispecies coalescent. Graham Jones.  Journal of Mathematical Biology, 2016.'
      doi: 'https://doi.org/10.1007/s00285-016-1034-0'
      url: 'http://link.springer.com/article/10.1007/s00285-016-1034-0'
- name: 'mvSubtreeScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSubtreeScale(TimeTree<stochastic> tree, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvSymmetricMatrixElementSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSymmetricMatrixElementSlide(MatrixRealSymmetric<stochastic> x, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The matrix variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
        - label: 'delta'
          description: 'The sliding window size.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the move during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvSynchronizedVectorFixedSingleElementSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvSynchronizedVectorFixedSingleElementSlide(Real[][]<deterministic> x, Natural|Natural[]<any> element, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable (a deterministic variable holding the vector of stochastic variable) on which this move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[][]'
          default:
          options:
        - label: 'element'
          description: 'The index or indices of the element to scale.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of this move.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvTipTimeSlideUniform'
  title:
  aliases: 'mvFossilTimeSlideUniform'
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvTipTimeSlideUniform(TimeTree<stochastic> tree, RealPos<any> origin, String|Taxon<any> tip, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'origin'
          description: 'The variable for the origin of the process giving a maximum age.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'tip'
          description: 'The name of a specific tip/taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default: 'NULL'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvTreeScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvTreeScale(TimeTree<stochastic> tree, RealPos<stochastic> rootAge, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'tree'
          description: 'The tree variable the move operates on.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'rootAge'
          description: 'The root age variable.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'delta'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvUPPAllocation'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvUPPAllocation(RealPos[]<stochastic> x, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvUpDownScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvUpDownScale(RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(TimeTree<stochastic> tree, Bool<any> up)'
      arguments:
        - label: 'tree'
          description: 'The tree variable to scale.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real[]<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RealPos[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(TimeTree<stochastic> tree, Bool<any> up)'
      arguments:
        - label: 'tree'
          description: 'The tree variable to scale.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real[]<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(RealPos[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
  references:
- name: 'mvUpDownSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvUpDownSlide(RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real[]<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RealPos[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real[]<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(RealPos[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
  references:
- name: 'mvUpDownSlideBactrian'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvUpDownSlideBactrian(RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'lambda'
          description: 'The scaling factor (strength) of the proposal.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real[]<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(Real[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'addVariable'
      return_type: 'void'
      usage: 'addVariable(RealPos[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'The variable to scale'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'up'
          description: 'Scaling up or down?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real[]<stochastic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(Real[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'removeVariable'
      return_type: 'void'
      usage: 'removeVariable(RealPos[]<deterministic> var, Bool<any> up)'
      arguments:
        - label: 'var'
          description: 'Scaling up or down?'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'up'
          description: 'The variable to scale'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
  references:
- name: 'mvVectorBinarySwitch'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvVectorBinarySwitch(Natural[]<deterministic> x, Probability<any> p, Natural[]<any> elements, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Natural[]'
          default:
          options:
        - label: 'p'
          description: 'The probability of applying the move to each element.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'elements'
          description: 'The indices of elements. All are used if this is empty.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Natural[]'
          default: '[ ]'
          options:
        - label: 'tune'
          description: 'Should we tune the window size during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvVectorFixedSingleElementSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvVectorFixedSingleElementSlide(Real[]<stochastic> x, RealPos<any> lambda, Bool<any> tune, Natural<any> element, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of this move.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'element'
          description: 'The index of the element to scale.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvVectorScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvVectorScale(RealPos[]<stochastic> x, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling parameter (strength) of the move.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling parameter during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvVectorSingleElementScale'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvVectorSingleElementScale(RealPos[]<deterministic> x, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (strength) of this move.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvVectorSingleElementSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvVectorSingleElementSlide(Real[]<deterministic> x, RealPos<any> lambda, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'lambda'
          description: 'The scaling factor (or strength) of the proposals.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we auto tune during burning?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvVectorSlide'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvVectorSlide(Real[]<stochastic> x, Natural[]<any> elements, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which this move operates.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'elements'
          description: 'The indices of elements. All are used if this is empty.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Natural[]'
          default: '[ ]'
          options:
        - label: 'delta'
          description: 'The window size parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the window size during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'mvVectorSlideRecenter'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'Move'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'mvVectorSlideRecenter(Real[]<deterministic> x, Real<stochastic> mean, RealPos<any> delta, Bool<any> tune, RealPos<any> weight, Probability<any> tuneTarget)'
      arguments:
        - label: 'x'
          description: 'The variable on which the move operates.'
          dag_type: '<deterministic>'
          pass_by: 'reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'mean'
          description: 'The mean parameter of the variables.'
          dag_type: '<stochastic>'
          pass_by: 'reference'
          value_type: 'Real'
          default:
          options:
        - label: 'delta'
          description: 'The window size parameter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tune'
          description: 'Should we tune the scaling factor during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'weight'
          description: 'The weight how often on average this move will be used per iteration.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tuneTarget'
          description: 'The acceptance probability targeted by auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.44'
          options:
  methods:
  references:
- name: 'pathSampler'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'pathSampler(String<any> filename, String<any> powerColumnName, String<any> likelihoodColumnName, String<any> delimiter)'
      arguments:
        - label: 'filename'
          description: 'The filename where the likelihood samples are stored in.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'powerColumnName'
          description: 'The name of the column that holds the values of the powers.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'likelihoodColumnName'
          description: 'The name of the column that holds the likelihood values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'delimiter'
          description: 'The delimiter between columns.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
  methods:
    - name: 'marginal'
      return_type: 'Real'
      usage: 'marginal()'
      arguments:
  references:
- name: 'posteriorPredictiveAnalysis'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'posteriorPredictiveAnalysis(MonteCarloAnalysis<any> sampler, String<any> directory)'
      arguments:
        - label: 'sampler'
          description: 'The template Monte Carlo sampler instance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'MonteCarloAnalysis'
          default:
          options:
        - label: 'directory'
          description: 'The name of the directory where the simulated data are.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations)'
      arguments:
        - label: 'generations'
          description: 'The number of generation to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'posteriorPredictiveSimulation'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'posteriorPredictiveSimulation(Model<any> model, String<any> directory, ModelTrace[]<any> trace, AncestralStateTrace[]<any> ancestralStateTrace)'
      arguments:
        - label: 'model'
          description: 'The reference model instance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Model'
          default:
          options:
        - label: 'directory'
          description: 'The name of the directory where we store the simulations.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'trace'
          description: 'The sample trace object.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'ModelTrace[]'
          default:
          options:
        - label: 'ancestralStateTrace'
          description: 'The ancestral state trace object. Used only for simulating CDBDP when conditioning on sampled tip states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AncestralStateTrace[]'
          default: 'NULL'
          options:
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> thinning)'
      arguments:
        - label: 'thinning'
          description: 'The number of samples to jump over.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
  references:
- name: 'powerPosterior'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'powerPosterior(Model<any> model, Move[]<any> moves, Monitor[]<any> monitors, String<any> filename, RealPos[]<any> powers, Natural<any> cats, RealPos<any> alpha, Natural<any> sampleFreq, Natural<any> procPerLikelihood)'
      arguments:
        - label: 'model'
          description: 'The model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Model'
          default:
          options:
        - label: 'moves'
          description: 'The vector moves to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Move[]'
          default:
          options:
        - label: 'monitors'
          description: 'The monitors to call. Do not provide a screen monitor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Monitor[]'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file for the likelihood samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'powers'
          description: 'A vector of powers.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'cats'
          description: 'The number of categories if no powers are specified.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '100'
          options:
        - label: 'alpha'
          description: 'The alpha parameter of the beta distribution if no powers are specified.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.2'
          options:
        - label: 'sampleFreq'
          description: 'The sampling frequency of the likelihood values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '100'
          options:
        - label: 'procPerLikelihood'
          description: 'Number of processors used to compute the likelihood.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
  methods:
    - name: 'burnin'
      return_type: 'void'
      usage: 'burnin(Natural<any> generations, Natural<any> tuningInterval)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tuningInterval'
          description: 'The frequency when the moves are tuned (usually between 50 and 1000).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations, Probability<any> burninFraction, Natural<any> preburninGenerations, Natural<any> tuningInterval)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'burninFraction'
          description: 'The fraction of samples to discard.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.25'
          options:
        - label: 'preburninGenerations'
          description: 'The number of generations to run as pre-burnin when parameter tuning is done.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'tuningInterval'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '100'
          options:
  references:
- name: 'srGelmanRubin'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'AbstractConvergenceStoppingRule'
    - 'StoppingRule'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'srGelmanRubin(RealPos<any> R, String<any> filename, Natural<any> frequency, String<any> burninMethod {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'R'
          description: 'The maximum allowed potential scale reduction factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file containing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'frequency'
          description: 'The frequency how often to check for convergence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'burninMethod'
          description: 'Which type of burnin method to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ESS'
          options:
            - 'ESS'
            - 'SEM'
  methods:
  references:
- name: 'srGeweke'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'AbstractConvergenceStoppingRule'
    - 'StoppingRule'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'srGeweke(Probability<any> prob, Probability<any> frac1, Probability<any> frac2, String<any> filename, Natural<any> frequency, String<any> burninMethod {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'prob'
          description: 'The significance level.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.05'
          options:
        - label: 'frac1'
          description: 'The fraction of samples used for the first window.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.1'
          options:
        - label: 'frac2'
          description: 'The fraction of samples used for the second window.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.5'
          options:
        - label: 'filename'
          description: 'The name of the file containing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'frequency'
          description: 'The frequency how often to check for convergence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'burninMethod'
          description: 'Which type of burnin method to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ESS'
          options:
            - 'ESS'
            - 'SEM'
  methods:
  references:
- name: 'srMaxIteration'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'StoppingRule'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'srMaxIteration(Natural<any> maxIteration)'
      arguments:
        - label: 'maxIteration'
          description: 'The maximum number of iterations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'srMaxTime'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'StoppingRule'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'srMaxTime(RealPos<any> maxTime, String<any> unit {valid options: "seconds"|"minutes"|"hours"})'
      arguments:
        - label: 'maxTime'
          description: 'The maximum time to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'unit'
          description: 'The unit in which we measure the maximum time.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'seconds'
          options:
            - 'seconds'
            - 'minutes'
            - 'hours'
  methods:
  references:
- name: 'srMinESS'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'AbstractConvergenceStoppingRule'
    - 'StoppingRule'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'srMinESS(RealPos<any> minEss, String<any> filename, Natural<any> frequency, String<any> burninMethod {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'minEss'
          description: 'The minimum ESS threshold when stopping is allowed.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file containing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'frequency'
          description: 'The frequency how often to check for convergence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'burninMethod'
          description: 'Which type of burnin method to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ESS'
          options:
            - 'ESS'
            - 'SEM'
  methods:
  references:
- name: 'srStationarity'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'AbstractConvergenceStoppingRule'
    - 'StoppingRule'
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'srStationarity(Probability<any> prob, String<any> filename, Natural<any> frequency, String<any> burninMethod {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'prob'
          description: 'The significance level.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file containing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'frequency'
          description: 'The frequency how often to check for convergence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'burninMethod'
          description: 'Which type of burnin method to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ESS'
          options:
            - 'ESS'
            - 'SEM'
  methods:
  references:
- name: 'steppingStoneSampler'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'steppingStoneSampler(String<any> filename, String<any> powerColumnName, String<any> likelihoodColumnName, String<any> delimiter)'
      arguments:
        - label: 'filename'
          description: 'The name of the file where the likelhood samples are stored.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'powerColumnName'
          description: 'The name of the column of the powers.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'likelihoodColumnName'
          description: 'The name of the column of the likelihood samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'delimiter'
          description: 'The column delimiter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
  methods:
    - name: 'marginal'
      return_type: 'Real'
      usage: 'marginal()'
      arguments:
  references:
- name: 'taxon'
  title: 'Taxon object'
  aliases:
  description: 'The taxon function creates a Taxon object.'
  details: 'Each Taxon object records that taxon''s name in addition to other information, such as age (which is non-zero for fossils). Character matrices and trees contain Taxon vectors (Taxon[]) that are used to match leaf nodes to data entries for phylogenetic analyses. For multispecies coalescent analyses, Taxon objects are also used to assign species memberships to individuals.'
  example: |
    # we can create a Taxon object
    taxon_gorilla = taxon("Gorilla_gorilla")
    # we can create a dummy vector of Taxon objects for simulation
    for (i in 1:10) { taxa[i] = taxon("Taxon"+i) }
    phy ~ dnBDP(lambda=1, mu=0, rootAge=1, taxa=taxa)
    # retrieve the taxon list for 'phy'
    phy.taxa()
  authors:
  see_also: 'readTaxonData'
  type_spec: 'RevObject'
  constructor:
    - usage: 'taxon(String<any> taxonName, String<any> speciesName, RealPos<any> age/min, RealPos<any> max)'
      arguments:
        - label: 'taxonName'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'speciesName'
          description: 'The name of the species it belongs to.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'taxonName'
          options:
        - label: 'age/min'
          description: 'The (minimum) age before the present when this taxon was sampled.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'max'
          description: 'The maximum age before the present when this taxon was sampled.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: 'age/min'
          options:
  methods:
    - name: 'getAge'
      return_type: 'String'
      usage: 'getAge()'
      arguments:
    - name: 'getMaxAge'
      return_type: 'String'
      usage: 'getMaxAge()'
      arguments:
    - name: 'getMinAge'
      return_type: 'String'
      usage: 'getMinAge()'
      arguments:
    - name: 'getName'
      return_type: 'String'
      usage: 'getName()'
      arguments:
    - name: 'getSpeciesName'
      return_type: 'String'
      usage: 'getSpeciesName()'
      arguments:
  references:
- name: 'validationAnalysis'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  type_spec:
    - 'WorkspaceToCoreWrapperObject'
    - 'WorkspaceObject'
    - 'RevObject'
  constructor:
    - usage: 'validationAnalysis(MonteCarloAnalysis<any> sampler, Natural<any> simulations)'
      arguments:
        - label: 'sampler'
          description: 'The template Monte Carlo sampler instance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'MonteCarloAnalysis'
          default:
          options:
        - label: 'simulations'
          description: 'How many replicate simulations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
    - name: 'burnin'
      return_type: 'void'
      usage: 'burnin(Natural<any> generations, Natural<any> tuningInterval)'
      arguments:
        - label: 'generations'
          description: 'The number of generation to run this burnin simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'summarize'
      return_type: 'void'
      usage: 'summarize(Probability<any> coverageProbability)'
      arguments:
        - label: 'coverageProbability'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.9'
          options:
  references:
